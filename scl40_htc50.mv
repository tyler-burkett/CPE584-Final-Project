//----------------------------------------------------------------------------
// Date		: $Date: 2012/12/06 14:52:08 $
// Copyright	: 1997-2012 by Synopsys, Inc., All Rights Reserved.
// Revision	: $Revision: 1.7 $
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
// Cell model definitions.
//----------------------------------------------------------------------------

`resetall


`timescale 100ps / 1ps

`ifdef VIRL_functiononly
    `delay_mode_distributed
`else
   // CDT 248005
   `ifdef SCL40_HTC50_BUFDLYL24_ENABLE_DELAY
      `delay_mode_distributed
   `else
      `delay_mode_path
   `endif
`endif

// Always include bias pins because some cells don't use the macro
`ifndef BIAS_PINS
`define BIAS_PINS 1
`endif

//%BEGIN SEH_ADDF42_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ADDF42_L50_1 (S, CO, ICO, A, B, C, D, CI, VDD, VSS, VBP, VBN);
   output S, CO, ICO;
   input A, B, C, D, CI, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3, int_res_4, int_res_5, int_res_6, 
      int_res_7;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDF42_L50_1 (S, CO, ICO, A, B, C, D, CI, VDD, VSS);
   output S, CO, ICO;
   input A, B, C, D, CI, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3, int_res_4, int_res_5, int_res_6, 
      int_res_7;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   xor (int_res_0, A_org, B_org, C_org);
   and (int_res_1, int_res_0, D_org);
   xor (int_res_2, A_org, B_org, C_org);
   and (int_res_3, int_res_2, CI_org);
   and (int_res_4, D_org, CI_org);
   and (int_res_5, A_org, B_org);
   and (int_res_6, A_org, C_org);
   and (int_res_7, B_org, C_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      xor #1 (S, A_org, B_org, C_org, D_org, CI_org);
      or #1 (CO, int_res_1, int_res_3, int_res_4);
      or #1 (ICO, int_res_5, int_res_6, int_res_7);
   `else
      xor (S, A_org, B_org, C_org, D_org, CI_org);
      or (CO, int_res_1, int_res_3, int_res_4);
      or (ICO, int_res_5, int_res_6, int_res_7);

   `endif

   `ifdef VIRL_functiononly

   `else


specify
(CI +=> CO)=(0, 0);
if ((~(A) & ~(B) & ~(C) & CI)) (D +=> CO)=(0, 0);
if ((~(A) & ~(B) & C & ~(CI))) (D +=> CO)=(0, 0);
if ((~(A) & B & ~(C) & ~(CI))) (D +=> CO)=(0, 0);
if ((~(A) & B & C & CI)) (D +=> CO)=(0, 0);
if ((A & ~(B) & ~(C) & ~(CI))) (D +=> CO)=(0, 0);
if ((A & ~(B) & C & CI)) (D +=> CO)=(0, 0);
if ((A & B & ~(C) & CI)) (D +=> CO)=(0, 0);
if ((A & B & C & ~(CI))) (D +=> CO)=(0, 0);
if ((~(A) & ~(B) & ~(CI) & D)) (C +=> CO)=(0, 0);
if ((~(A) & ~(B) & CI & ~(D))) (C +=> CO)=(0, 0);
if ((~(A) & B & ~(CI) & D)) (C -=> CO)=(0, 0);
if ((~(A) & B & CI & ~(D))) (C -=> CO)=(0, 0);
if ((A & ~(B) & ~(CI) & D)) (C -=> CO)=(0, 0);
if ((A & ~(B) & CI & ~(D))) (C -=> CO)=(0, 0);
if ((A & B & ~(CI) & D)) (C +=> CO)=(0, 0);
if ((A & B & CI & ~(D))) (C +=> CO)=(0, 0);
if ((~(A) & ~(C) & ~(CI) & D)) (B +=> CO)=(0, 0);
if ((~(A) & ~(C) & CI & ~(D))) (B +=> CO)=(0, 0);
if ((~(A) & C & ~(CI) & D)) (B -=> CO)=(0, 0);
if ((~(A) & C & CI & ~(D))) (B -=> CO)=(0, 0);
if ((A & ~(C) & ~(CI) & D)) (B -=> CO)=(0, 0);
if ((A & ~(C) & CI & ~(D))) (B -=> CO)=(0, 0);
if ((A & C & ~(CI) & D)) (B +=> CO)=(0, 0);
if ((A & C & CI & ~(D))) (B +=> CO)=(0, 0);
if ((~(B) & ~(C) & ~(CI) & D)) (A +=> CO)=(0, 0);
if ((~(B) & ~(C) & CI & ~(D))) (A +=> CO)=(0, 0);
if ((~(B) & C & ~(CI) & D)) (A -=> CO)=(0, 0);
if ((~(B) & C & CI & ~(D))) (A -=> CO)=(0, 0);
if ((B & ~(C) & ~(CI) & D)) (A -=> CO)=(0, 0);
if ((B & ~(C) & CI & ~(D))) (A -=> CO)=(0, 0);
if ((B & C & ~(CI) & D)) (A +=> CO)=(0, 0);
if ((B & C & CI & ~(D))) (A +=> CO)=(0, 0);
if ((~(A) & B & ~(CI) & ~(D))) (C +=> ICO)=(0, 0);
if ((~(A) & B & ~(CI) & D)) (C +=> ICO)=(0, 0);
if ((~(A) & B & CI & ~(D))) (C +=> ICO)=(0, 0);
if ((~(A) & B & CI & D)) (C +=> ICO)=(0, 0);
if ((A & ~(B) & ~(CI) & ~(D))) (C +=> ICO)=(0, 0);
if ((A & ~(B) & ~(CI) & D)) (C +=> ICO)=(0, 0);
if ((A & ~(B) & CI & ~(D))) (C +=> ICO)=(0, 0);
if ((A & ~(B) & CI & D)) (C +=> ICO)=(0, 0);
if ((~(A) & C & ~(CI) & ~(D))) (B +=> ICO)=(0, 0);
if ((~(A) & C & ~(CI) & D)) (B +=> ICO)=(0, 0);
if ((~(A) & C & CI & ~(D))) (B +=> ICO)=(0, 0);
if ((~(A) & C & CI & D)) (B +=> ICO)=(0, 0);
if ((A & ~(C) & ~(CI) & ~(D))) (B +=> ICO)=(0, 0);
if ((A & ~(C) & ~(CI) & D)) (B +=> ICO)=(0, 0);
if ((A & ~(C) & CI & ~(D))) (B +=> ICO)=(0, 0);
if ((A & ~(C) & CI & D)) (B +=> ICO)=(0, 0);
if ((~(B) & C & ~(CI) & ~(D))) (A +=> ICO)=(0, 0);
if ((~(B) & C & ~(CI) & D)) (A +=> ICO)=(0, 0);
if ((~(B) & C & CI & ~(D))) (A +=> ICO)=(0, 0);
if ((~(B) & C & CI & D)) (A +=> ICO)=(0, 0);
if ((B & ~(C) & ~(CI) & ~(D))) (A +=> ICO)=(0, 0);
if ((B & ~(C) & ~(CI) & D)) (A +=> ICO)=(0, 0);
if ((B & ~(C) & CI & ~(D))) (A +=> ICO)=(0, 0);
if ((B & ~(C) & CI & D)) (A +=> ICO)=(0, 0);
if ((A & B & C & ~(D)) | (A & B & ~(C) & D) | (A & ~(B) & C & D) | (A & ~(B) & ~(C) & ~(D)) | (~(A) & B & C & D) | (~(A) & B & ~(C) & ~(D)) | (~(A) & ~(B) & C & ~(D)) | (~(A) & ~(B) & ~(C) & D)) (CI -=> S)=(0, 0);
if ((A & B & C & D) | (A & B & ~(C) & ~(D)) | (A & ~(B) & C & ~(D)) | (A & ~(B) & ~(C) & D) | (~(A) & B & C & ~(D)) | (~(A) & B & ~(C) & D) | (~(A) & ~(B) & C & D) | (~(A) & ~(B) & ~(C) & ~(D))) (CI +=> S)=(0, 0);
if ((~(A) & ~(B) & ~(C) & ~(CI))) (D +=> S)=(0, 0);
if ((~(A) & ~(B) & ~(C) & CI)) (D -=> S)=(0, 0);
if ((~(A) & ~(B) & C & ~(CI))) (D -=> S)=(0, 0);
if ((~(A) & ~(B) & C & CI)) (D +=> S)=(0, 0);
if ((~(A) & B & ~(C) & ~(CI))) (D -=> S)=(0, 0);
if ((~(A) & B & ~(C) & CI)) (D +=> S)=(0, 0);
if ((~(A) & B & C & ~(CI))) (D +=> S)=(0, 0);
if ((~(A) & B & C & CI)) (D -=> S)=(0, 0);
if ((A & ~(B) & ~(C) & ~(CI))) (D -=> S)=(0, 0);
if ((A & ~(B) & ~(C) & CI)) (D +=> S)=(0, 0);
if ((A & ~(B) & C & ~(CI))) (D +=> S)=(0, 0);
if ((A & ~(B) & C & CI)) (D -=> S)=(0, 0);
if ((A & B & ~(C) & ~(CI))) (D +=> S)=(0, 0);
if ((A & B & ~(C) & CI)) (D -=> S)=(0, 0);
if ((A & B & C & ~(CI))) (D -=> S)=(0, 0);
if ((A & B & C & CI)) (D +=> S)=(0, 0);
if ((~(A) & ~(B) & ~(CI) & ~(D))) (C +=> S)=(0, 0);
if ((~(A) & ~(B) & ~(CI) & D)) (C -=> S)=(0, 0);
if ((~(A) & ~(B) & CI & ~(D))) (C -=> S)=(0, 0);
if ((~(A) & ~(B) & CI & D)) (C +=> S)=(0, 0);
if ((~(A) & B & ~(CI) & ~(D))) (C -=> S)=(0, 0);
if ((~(A) & B & ~(CI) & D)) (C +=> S)=(0, 0);
if ((~(A) & B & CI & ~(D))) (C +=> S)=(0, 0);
if ((~(A) & B & CI & D)) (C -=> S)=(0, 0);
if ((A & ~(B) & ~(CI) & ~(D))) (C -=> S)=(0, 0);
if ((A & ~(B) & ~(CI) & D)) (C +=> S)=(0, 0);
if ((A & ~(B) & CI & ~(D))) (C +=> S)=(0, 0);
if ((A & ~(B) & CI & D)) (C -=> S)=(0, 0);
if ((A & B & ~(CI) & ~(D))) (C +=> S)=(0, 0);
if ((A & B & ~(CI) & D)) (C -=> S)=(0, 0);
if ((A & B & CI & ~(D))) (C -=> S)=(0, 0);
if ((A & B & CI & D)) (C +=> S)=(0, 0);
if ((~(A) & ~(C) & ~(CI) & ~(D))) (B +=> S)=(0, 0);
if ((~(A) & ~(C) & ~(CI) & D)) (B -=> S)=(0, 0);
if ((~(A) & ~(C) & CI & ~(D))) (B -=> S)=(0, 0);
if ((~(A) & ~(C) & CI & D)) (B +=> S)=(0, 0);
if ((~(A) & C & ~(CI) & ~(D))) (B -=> S)=(0, 0);
if ((~(A) & C & ~(CI) & D)) (B +=> S)=(0, 0);
if ((~(A) & C & CI & ~(D))) (B +=> S)=(0, 0);
if ((~(A) & C & CI & D)) (B -=> S)=(0, 0);
if ((A & ~(C) & ~(CI) & ~(D))) (B -=> S)=(0, 0);
if ((A & ~(C) & ~(CI) & D)) (B +=> S)=(0, 0);
if ((A & ~(C) & CI & ~(D))) (B +=> S)=(0, 0);
if ((A & ~(C) & CI & D)) (B -=> S)=(0, 0);
if ((A & C & ~(CI) & ~(D))) (B +=> S)=(0, 0);
if ((A & C & ~(CI) & D)) (B -=> S)=(0, 0);
if ((A & C & CI & ~(D))) (B -=> S)=(0, 0);
if ((A & C & CI & D)) (B +=> S)=(0, 0);
if ((~(B) & ~(C) & ~(CI) & ~(D))) (A +=> S)=(0, 0);
if ((~(B) & ~(C) & ~(CI) & D)) (A -=> S)=(0, 0);
if ((~(B) & ~(C) & CI & ~(D))) (A -=> S)=(0, 0);
if ((~(B) & ~(C) & CI & D)) (A +=> S)=(0, 0);
if ((~(B) & C & ~(CI) & ~(D))) (A -=> S)=(0, 0);
if ((~(B) & C & ~(CI) & D)) (A +=> S)=(0, 0);
if ((~(B) & C & CI & ~(D))) (A +=> S)=(0, 0);
if ((~(B) & C & CI & D)) (A -=> S)=(0, 0);
if ((B & ~(C) & ~(CI) & ~(D))) (A -=> S)=(0, 0);
if ((B & ~(C) & ~(CI) & D)) (A +=> S)=(0, 0);
if ((B & ~(C) & CI & ~(D))) (A +=> S)=(0, 0);
if ((B & ~(C) & CI & D)) (A -=> S)=(0, 0);
if ((B & C & ~(CI) & ~(D))) (A +=> S)=(0, 0);
if ((B & C & ~(CI) & D)) (A -=> S)=(0, 0);
if ((B & C & CI & ~(D))) (A -=> S)=(0, 0);
if ((B & C & CI & D)) (A +=> S)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ADDF42_L50_1

//%BEGIN SEH_ADDF42_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ADDF42_L50_2 (S, CO, ICO, A, B, C, D, CI, VDD, VSS, VBP, VBN);
   output S, CO, ICO;
   input A, B, C, D, CI, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3, int_res_4, int_res_5, int_res_6, 
      int_res_7;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDF42_L50_2 (S, CO, ICO, A, B, C, D, CI, VDD, VSS);
   output S, CO, ICO;
   input A, B, C, D, CI, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3, int_res_4, int_res_5, int_res_6, 
      int_res_7;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   xor (int_res_0, A_org, B_org, C_org);
   and (int_res_1, int_res_0, D_org);
   xor (int_res_2, A_org, B_org, C_org);
   and (int_res_3, int_res_2, CI_org);
   and (int_res_4, D_org, CI_org);
   and (int_res_5, A_org, B_org);
   and (int_res_6, A_org, C_org);
   and (int_res_7, B_org, C_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      xor #1 (S, A_org, B_org, C_org, D_org, CI_org);
      or #1 (CO, int_res_1, int_res_3, int_res_4);
      or #1 (ICO, int_res_5, int_res_6, int_res_7);
   `else
      xor (S, A_org, B_org, C_org, D_org, CI_org);
      or (CO, int_res_1, int_res_3, int_res_4);
      or (ICO, int_res_5, int_res_6, int_res_7);

   `endif

   `ifdef VIRL_functiononly

   `else


specify
(CI +=> CO)=(0, 0);
if ((~(A) & ~(B) & ~(C) & CI)) (D +=> CO)=(0, 0);
if ((~(A) & ~(B) & C & ~(CI))) (D +=> CO)=(0, 0);
if ((~(A) & B & ~(C) & ~(CI))) (D +=> CO)=(0, 0);
if ((~(A) & B & C & CI)) (D +=> CO)=(0, 0);
if ((A & ~(B) & ~(C) & ~(CI))) (D +=> CO)=(0, 0);
if ((A & ~(B) & C & CI)) (D +=> CO)=(0, 0);
if ((A & B & ~(C) & CI)) (D +=> CO)=(0, 0);
if ((A & B & C & ~(CI))) (D +=> CO)=(0, 0);
if ((~(A) & ~(B) & ~(CI) & D)) (C +=> CO)=(0, 0);
if ((~(A) & ~(B) & CI & ~(D))) (C +=> CO)=(0, 0);
if ((~(A) & B & ~(CI) & D)) (C -=> CO)=(0, 0);
if ((~(A) & B & CI & ~(D))) (C -=> CO)=(0, 0);
if ((A & ~(B) & ~(CI) & D)) (C -=> CO)=(0, 0);
if ((A & ~(B) & CI & ~(D))) (C -=> CO)=(0, 0);
if ((A & B & ~(CI) & D)) (C +=> CO)=(0, 0);
if ((A & B & CI & ~(D))) (C +=> CO)=(0, 0);
if ((~(A) & ~(C) & ~(CI) & D)) (B +=> CO)=(0, 0);
if ((~(A) & ~(C) & CI & ~(D))) (B +=> CO)=(0, 0);
if ((~(A) & C & ~(CI) & D)) (B -=> CO)=(0, 0);
if ((~(A) & C & CI & ~(D))) (B -=> CO)=(0, 0);
if ((A & ~(C) & ~(CI) & D)) (B -=> CO)=(0, 0);
if ((A & ~(C) & CI & ~(D))) (B -=> CO)=(0, 0);
if ((A & C & ~(CI) & D)) (B +=> CO)=(0, 0);
if ((A & C & CI & ~(D))) (B +=> CO)=(0, 0);
if ((~(B) & ~(C) & ~(CI) & D)) (A +=> CO)=(0, 0);
if ((~(B) & ~(C) & CI & ~(D))) (A +=> CO)=(0, 0);
if ((~(B) & C & ~(CI) & D)) (A -=> CO)=(0, 0);
if ((~(B) & C & CI & ~(D))) (A -=> CO)=(0, 0);
if ((B & ~(C) & ~(CI) & D)) (A -=> CO)=(0, 0);
if ((B & ~(C) & CI & ~(D))) (A -=> CO)=(0, 0);
if ((B & C & ~(CI) & D)) (A +=> CO)=(0, 0);
if ((B & C & CI & ~(D))) (A +=> CO)=(0, 0);
if ((~(A) & B & ~(CI) & ~(D))) (C +=> ICO)=(0, 0);
if ((~(A) & B & ~(CI) & D)) (C +=> ICO)=(0, 0);
if ((~(A) & B & CI & ~(D))) (C +=> ICO)=(0, 0);
if ((~(A) & B & CI & D)) (C +=> ICO)=(0, 0);
if ((A & ~(B) & ~(CI) & ~(D))) (C +=> ICO)=(0, 0);
if ((A & ~(B) & ~(CI) & D)) (C +=> ICO)=(0, 0);
if ((A & ~(B) & CI & ~(D))) (C +=> ICO)=(0, 0);
if ((A & ~(B) & CI & D)) (C +=> ICO)=(0, 0);
if ((~(A) & C & ~(CI) & ~(D))) (B +=> ICO)=(0, 0);
if ((~(A) & C & ~(CI) & D)) (B +=> ICO)=(0, 0);
if ((~(A) & C & CI & ~(D))) (B +=> ICO)=(0, 0);
if ((~(A) & C & CI & D)) (B +=> ICO)=(0, 0);
if ((A & ~(C) & ~(CI) & ~(D))) (B +=> ICO)=(0, 0);
if ((A & ~(C) & ~(CI) & D)) (B +=> ICO)=(0, 0);
if ((A & ~(C) & CI & ~(D))) (B +=> ICO)=(0, 0);
if ((A & ~(C) & CI & D)) (B +=> ICO)=(0, 0);
if ((~(B) & C & ~(CI) & ~(D))) (A +=> ICO)=(0, 0);
if ((~(B) & C & ~(CI) & D)) (A +=> ICO)=(0, 0);
if ((~(B) & C & CI & ~(D))) (A +=> ICO)=(0, 0);
if ((~(B) & C & CI & D)) (A +=> ICO)=(0, 0);
if ((B & ~(C) & ~(CI) & ~(D))) (A +=> ICO)=(0, 0);
if ((B & ~(C) & ~(CI) & D)) (A +=> ICO)=(0, 0);
if ((B & ~(C) & CI & ~(D))) (A +=> ICO)=(0, 0);
if ((B & ~(C) & CI & D)) (A +=> ICO)=(0, 0);
if ((A & B & C & ~(D)) | (A & B & ~(C) & D) | (A & ~(B) & C & D) | (A & ~(B) & ~(C) & ~(D)) | (~(A) & B & C & D) | (~(A) & B & ~(C) & ~(D)) | (~(A) & ~(B) & C & ~(D)) | (~(A) & ~(B) & ~(C) & D)) (CI -=> S)=(0, 0);
if ((A & B & C & D) | (A & B & ~(C) & ~(D)) | (A & ~(B) & C & ~(D)) | (A & ~(B) & ~(C) & D) | (~(A) & B & C & ~(D)) | (~(A) & B & ~(C) & D) | (~(A) & ~(B) & C & D) | (~(A) & ~(B) & ~(C) & ~(D))) (CI +=> S)=(0, 0);
if ((~(A) & ~(B) & ~(C) & ~(CI))) (D +=> S)=(0, 0);
if ((~(A) & ~(B) & ~(C) & CI)) (D -=> S)=(0, 0);
if ((~(A) & ~(B) & C & ~(CI))) (D -=> S)=(0, 0);
if ((~(A) & ~(B) & C & CI)) (D +=> S)=(0, 0);
if ((~(A) & B & ~(C) & ~(CI))) (D -=> S)=(0, 0);
if ((~(A) & B & ~(C) & CI)) (D +=> S)=(0, 0);
if ((~(A) & B & C & ~(CI))) (D +=> S)=(0, 0);
if ((~(A) & B & C & CI)) (D -=> S)=(0, 0);
if ((A & ~(B) & ~(C) & ~(CI))) (D -=> S)=(0, 0);
if ((A & ~(B) & ~(C) & CI)) (D +=> S)=(0, 0);
if ((A & ~(B) & C & ~(CI))) (D +=> S)=(0, 0);
if ((A & ~(B) & C & CI)) (D -=> S)=(0, 0);
if ((A & B & ~(C) & ~(CI))) (D +=> S)=(0, 0);
if ((A & B & ~(C) & CI)) (D -=> S)=(0, 0);
if ((A & B & C & ~(CI))) (D -=> S)=(0, 0);
if ((A & B & C & CI)) (D +=> S)=(0, 0);
if ((~(A) & ~(B) & ~(CI) & ~(D))) (C +=> S)=(0, 0);
if ((~(A) & ~(B) & ~(CI) & D)) (C -=> S)=(0, 0);
if ((~(A) & ~(B) & CI & ~(D))) (C -=> S)=(0, 0);
if ((~(A) & ~(B) & CI & D)) (C +=> S)=(0, 0);
if ((~(A) & B & ~(CI) & ~(D))) (C -=> S)=(0, 0);
if ((~(A) & B & ~(CI) & D)) (C +=> S)=(0, 0);
if ((~(A) & B & CI & ~(D))) (C +=> S)=(0, 0);
if ((~(A) & B & CI & D)) (C -=> S)=(0, 0);
if ((A & ~(B) & ~(CI) & ~(D))) (C -=> S)=(0, 0);
if ((A & ~(B) & ~(CI) & D)) (C +=> S)=(0, 0);
if ((A & ~(B) & CI & ~(D))) (C +=> S)=(0, 0);
if ((A & ~(B) & CI & D)) (C -=> S)=(0, 0);
if ((A & B & ~(CI) & ~(D))) (C +=> S)=(0, 0);
if ((A & B & ~(CI) & D)) (C -=> S)=(0, 0);
if ((A & B & CI & ~(D))) (C -=> S)=(0, 0);
if ((A & B & CI & D)) (C +=> S)=(0, 0);
if ((~(A) & ~(C) & ~(CI) & ~(D))) (B +=> S)=(0, 0);
if ((~(A) & ~(C) & ~(CI) & D)) (B -=> S)=(0, 0);
if ((~(A) & ~(C) & CI & ~(D))) (B -=> S)=(0, 0);
if ((~(A) & ~(C) & CI & D)) (B +=> S)=(0, 0);
if ((~(A) & C & ~(CI) & ~(D))) (B -=> S)=(0, 0);
if ((~(A) & C & ~(CI) & D)) (B +=> S)=(0, 0);
if ((~(A) & C & CI & ~(D))) (B +=> S)=(0, 0);
if ((~(A) & C & CI & D)) (B -=> S)=(0, 0);
if ((A & ~(C) & ~(CI) & ~(D))) (B -=> S)=(0, 0);
if ((A & ~(C) & ~(CI) & D)) (B +=> S)=(0, 0);
if ((A & ~(C) & CI & ~(D))) (B +=> S)=(0, 0);
if ((A & ~(C) & CI & D)) (B -=> S)=(0, 0);
if ((A & C & ~(CI) & ~(D))) (B +=> S)=(0, 0);
if ((A & C & ~(CI) & D)) (B -=> S)=(0, 0);
if ((A & C & CI & ~(D))) (B -=> S)=(0, 0);
if ((A & C & CI & D)) (B +=> S)=(0, 0);
if ((~(B) & ~(C) & ~(CI) & ~(D))) (A +=> S)=(0, 0);
if ((~(B) & ~(C) & ~(CI) & D)) (A -=> S)=(0, 0);
if ((~(B) & ~(C) & CI & ~(D))) (A -=> S)=(0, 0);
if ((~(B) & ~(C) & CI & D)) (A +=> S)=(0, 0);
if ((~(B) & C & ~(CI) & ~(D))) (A -=> S)=(0, 0);
if ((~(B) & C & ~(CI) & D)) (A +=> S)=(0, 0);
if ((~(B) & C & CI & ~(D))) (A +=> S)=(0, 0);
if ((~(B) & C & CI & D)) (A -=> S)=(0, 0);
if ((B & ~(C) & ~(CI) & ~(D))) (A -=> S)=(0, 0);
if ((B & ~(C) & ~(CI) & D)) (A +=> S)=(0, 0);
if ((B & ~(C) & CI & ~(D))) (A +=> S)=(0, 0);
if ((B & ~(C) & CI & D)) (A -=> S)=(0, 0);
if ((B & C & ~(CI) & ~(D))) (A +=> S)=(0, 0);
if ((B & C & ~(CI) & D)) (A -=> S)=(0, 0);
if ((B & C & CI & ~(D))) (A -=> S)=(0, 0);
if ((B & C & CI & D)) (A +=> S)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ADDF42_L50_2

//%BEGIN SEH_ADDF_DL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ADDF_DL50_1 (S, CO, A, B, CI, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, CI, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDF_DL50_1 (S, CO, A, B, CI, VDD, VSS);
   output S, CO;
   input A, B, CI, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A_org, B_org);
   and (int_res_1, A_org, CI_org);
   and (int_res_2, B_org, CI_org);
   `ifdef VIRL_functiononly
      xor #1 (S, A_org, B_org, CI_org);
      or #1 (CO, int_res_0, int_res_1, int_res_2);
   `else
      xor (S, A_org, B_org, CI_org);
      or (CO, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A) & B)) (CI +=> CO)=(0, 0);
if ((A & ~(B))) (CI +=> CO)=(0, 0);
if ((~(A) & CI)) (B +=> CO)=(0, 0);
if ((A & ~(CI))) (B +=> CO)=(0, 0);
if ((~(B) & CI)) (A +=> CO)=(0, 0);
if ((B & ~(CI))) (A +=> CO)=(0, 0);
if ((~(A) & ~(B))) (CI +=> S)=(0, 0);
if ((~(A) & B)) (CI -=> S)=(0, 0);
if ((A & ~(B))) (CI -=> S)=(0, 0);
if ((A & B)) (CI +=> S)=(0, 0);
if ((~(A) & ~(CI))) (B +=> S)=(0, 0);
if ((~(A) & CI)) (B -=> S)=(0, 0);
if ((A & ~(CI))) (B -=> S)=(0, 0);
if ((A & CI)) (B +=> S)=(0, 0);
if ((~(B) & ~(CI))) (A +=> S)=(0, 0);
if ((~(B) & CI)) (A -=> S)=(0, 0);
if ((B & ~(CI))) (A -=> S)=(0, 0);
if ((B & CI)) (A +=> S)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ADDF_DL50_1

//%BEGIN SEH_ADDF_DL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ADDF_DL50_2 (S, CO, A, B, CI, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, CI, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDF_DL50_2 (S, CO, A, B, CI, VDD, VSS);
   output S, CO;
   input A, B, CI, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A_org, B_org);
   and (int_res_1, A_org, CI_org);
   and (int_res_2, B_org, CI_org);
   `ifdef VIRL_functiononly
      xor #1 (S, A_org, B_org, CI_org);
      or #1 (CO, int_res_0, int_res_1, int_res_2);
   `else
      xor (S, A_org, B_org, CI_org);
      or (CO, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A) & B)) (CI +=> CO)=(0, 0);
if ((A & ~(B))) (CI +=> CO)=(0, 0);
if ((~(A) & CI)) (B +=> CO)=(0, 0);
if ((A & ~(CI))) (B +=> CO)=(0, 0);
if ((~(B) & CI)) (A +=> CO)=(0, 0);
if ((B & ~(CI))) (A +=> CO)=(0, 0);
if ((~(A) & ~(B))) (CI +=> S)=(0, 0);
if ((~(A) & B)) (CI -=> S)=(0, 0);
if ((A & ~(B))) (CI -=> S)=(0, 0);
if ((A & B)) (CI +=> S)=(0, 0);
if ((~(A) & ~(CI))) (B +=> S)=(0, 0);
if ((~(A) & CI)) (B -=> S)=(0, 0);
if ((A & ~(CI))) (B -=> S)=(0, 0);
if ((A & CI)) (B +=> S)=(0, 0);
if ((~(B) & ~(CI))) (A +=> S)=(0, 0);
if ((~(B) & CI)) (A -=> S)=(0, 0);
if ((B & ~(CI))) (A -=> S)=(0, 0);
if ((B & CI)) (A +=> S)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ADDF_DL50_2

//%BEGIN SEH_ADDF_DL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_ADDF_DL50_4 (S, CO, A, B, CI, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, CI, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDF_DL50_4 (S, CO, A, B, CI, VDD, VSS);
   output S, CO;
   input A, B, CI, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A_org, B_org);
   and (int_res_1, A_org, CI_org);
   and (int_res_2, B_org, CI_org);
   `ifdef VIRL_functiononly
      xor #1 (S, A_org, B_org, CI_org);
      or #1 (CO, int_res_0, int_res_1, int_res_2);
   `else
      xor (S, A_org, B_org, CI_org);
      or (CO, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A) & B)) (CI +=> CO)=(0, 0);
if ((A & ~(B))) (CI +=> CO)=(0, 0);
if ((~(A) & CI)) (B +=> CO)=(0, 0);
if ((A & ~(CI))) (B +=> CO)=(0, 0);
if ((~(B) & CI)) (A +=> CO)=(0, 0);
if ((B & ~(CI))) (A +=> CO)=(0, 0);
if ((~(A) & ~(B))) (CI +=> S)=(0, 0);
if ((~(A) & B)) (CI -=> S)=(0, 0);
if ((A & ~(B))) (CI -=> S)=(0, 0);
if ((A & B)) (CI +=> S)=(0, 0);
if ((~(A) & ~(CI))) (B +=> S)=(0, 0);
if ((~(A) & CI)) (B -=> S)=(0, 0);
if ((A & ~(CI))) (B -=> S)=(0, 0);
if ((A & CI)) (B +=> S)=(0, 0);
if ((~(B) & ~(CI))) (A +=> S)=(0, 0);
if ((~(B) & CI)) (A -=> S)=(0, 0);
if ((B & ~(CI))) (A -=> S)=(0, 0);
if ((B & CI)) (A +=> S)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ADDF_DL50_4

//%BEGIN SEH_ADDF_V1L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_ADDF_V1L50_0P5 (S, CO, A, B, CI, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, CI, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDF_V1L50_0P5 (S, CO, A, B, CI, VDD, VSS);
   output S, CO;
   input A, B, CI, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A_org, B_org);
   and (int_res_1, A_org, CI_org);
   and (int_res_2, B_org, CI_org);
   `ifdef VIRL_functiononly
      xor #1 (S, A_org, B_org, CI_org);
      or #1 (CO, int_res_0, int_res_1, int_res_2);
   `else
      xor (S, A_org, B_org, CI_org);
      or (CO, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A) & B)) (CI +=> CO)=(0, 0);
if ((A & ~(B))) (CI +=> CO)=(0, 0);
if ((~(A) & CI)) (B +=> CO)=(0, 0);
if ((A & ~(CI))) (B +=> CO)=(0, 0);
if ((~(B) & CI)) (A +=> CO)=(0, 0);
if ((B & ~(CI))) (A +=> CO)=(0, 0);
if ((~(A) & ~(B))) (CI +=> S)=(0, 0);
if ((~(A) & B)) (CI -=> S)=(0, 0);
if ((A & ~(B))) (CI -=> S)=(0, 0);
if ((A & B)) (CI +=> S)=(0, 0);
if ((~(A) & ~(CI))) (B +=> S)=(0, 0);
if ((~(A) & CI)) (B -=> S)=(0, 0);
if ((A & ~(CI))) (B -=> S)=(0, 0);
if ((A & CI)) (B +=> S)=(0, 0);
if ((~(B) & ~(CI))) (A +=> S)=(0, 0);
if ((~(B) & CI)) (A -=> S)=(0, 0);
if ((B & ~(CI))) (A -=> S)=(0, 0);
if ((B & CI)) (A +=> S)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ADDF_V1L50_0P5

//%BEGIN SEH_ADDF_V1L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ADDF_V1L50_1 (S, CO, A, B, CI, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, CI, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDF_V1L50_1 (S, CO, A, B, CI, VDD, VSS);
   output S, CO;
   input A, B, CI, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A_org, B_org);
   and (int_res_1, A_org, CI_org);
   and (int_res_2, B_org, CI_org);
   `ifdef VIRL_functiononly
      xor #1 (S, A_org, B_org, CI_org);
      or #1 (CO, int_res_0, int_res_1, int_res_2);
   `else
      xor (S, A_org, B_org, CI_org);
      or (CO, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A) & B)) (CI +=> CO)=(0, 0);
if ((A & ~(B))) (CI +=> CO)=(0, 0);
if ((~(A) & CI)) (B +=> CO)=(0, 0);
if ((A & ~(CI))) (B +=> CO)=(0, 0);
if ((~(B) & CI)) (A +=> CO)=(0, 0);
if ((B & ~(CI))) (A +=> CO)=(0, 0);
if ((~(A) & ~(B))) (CI +=> S)=(0, 0);
if ((~(A) & B)) (CI -=> S)=(0, 0);
if ((A & ~(B))) (CI -=> S)=(0, 0);
if ((A & B)) (CI +=> S)=(0, 0);
if ((~(A) & ~(CI))) (B +=> S)=(0, 0);
if ((~(A) & CI)) (B -=> S)=(0, 0);
if ((A & ~(CI))) (B -=> S)=(0, 0);
if ((A & CI)) (B +=> S)=(0, 0);
if ((~(B) & ~(CI))) (A +=> S)=(0, 0);
if ((~(B) & CI)) (A -=> S)=(0, 0);
if ((B & ~(CI))) (A -=> S)=(0, 0);
if ((B & CI)) (A +=> S)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ADDF_V1L50_1

//%BEGIN SEH_ADDF_V1L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ADDF_V1L50_2 (S, CO, A, B, CI, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, CI, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDF_V1L50_2 (S, CO, A, B, CI, VDD, VSS);
   output S, CO;
   input A, B, CI, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A_org, B_org);
   and (int_res_1, A_org, CI_org);
   and (int_res_2, B_org, CI_org);
   `ifdef VIRL_functiononly
      xor #1 (S, A_org, B_org, CI_org);
      or #1 (CO, int_res_0, int_res_1, int_res_2);
   `else
      xor (S, A_org, B_org, CI_org);
      or (CO, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A) & B)) (CI +=> CO)=(0, 0);
if ((A & ~(B))) (CI +=> CO)=(0, 0);
if ((~(A) & CI)) (B +=> CO)=(0, 0);
if ((A & ~(CI))) (B +=> CO)=(0, 0);
if ((~(B) & CI)) (A +=> CO)=(0, 0);
if ((B & ~(CI))) (A +=> CO)=(0, 0);
if ((~(A) & ~(B))) (CI +=> S)=(0, 0);
if ((~(A) & B)) (CI -=> S)=(0, 0);
if ((A & ~(B))) (CI -=> S)=(0, 0);
if ((A & B)) (CI +=> S)=(0, 0);
if ((~(A) & ~(CI))) (B +=> S)=(0, 0);
if ((~(A) & CI)) (B -=> S)=(0, 0);
if ((A & ~(CI))) (B -=> S)=(0, 0);
if ((A & CI)) (B +=> S)=(0, 0);
if ((~(B) & ~(CI))) (A +=> S)=(0, 0);
if ((~(B) & CI)) (A -=> S)=(0, 0);
if ((B & ~(CI))) (A -=> S)=(0, 0);
if ((B & CI)) (A +=> S)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ADDF_V1L50_2

//%BEGIN SEH_ADDF_V1L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_ADDF_V1L50_4 (S, CO, A, B, CI, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, CI, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDF_V1L50_4 (S, CO, A, B, CI, VDD, VSS);
   output S, CO;
   input A, B, CI, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A_org, B_org);
   and (int_res_1, A_org, CI_org);
   and (int_res_2, B_org, CI_org);
   `ifdef VIRL_functiononly
      xor #1 (S, A_org, B_org, CI_org);
      or #1 (CO, int_res_0, int_res_1, int_res_2);
   `else
      xor (S, A_org, B_org, CI_org);
      or (CO, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A) & B)) (CI +=> CO)=(0, 0);
if ((A & ~(B))) (CI +=> CO)=(0, 0);
if ((~(A) & CI)) (B +=> CO)=(0, 0);
if ((A & ~(CI))) (B +=> CO)=(0, 0);
if ((~(B) & CI)) (A +=> CO)=(0, 0);
if ((B & ~(CI))) (A +=> CO)=(0, 0);
if ((~(A) & ~(B))) (CI +=> S)=(0, 0);
if ((~(A) & B)) (CI -=> S)=(0, 0);
if ((A & ~(B))) (CI -=> S)=(0, 0);
if ((A & B)) (CI +=> S)=(0, 0);
if ((~(A) & ~(CI))) (B +=> S)=(0, 0);
if ((~(A) & CI)) (B -=> S)=(0, 0);
if ((A & ~(CI))) (B -=> S)=(0, 0);
if ((A & CI)) (B +=> S)=(0, 0);
if ((~(B) & ~(CI))) (A +=> S)=(0, 0);
if ((~(B) & CI)) (A -=> S)=(0, 0);
if ((B & ~(CI))) (A -=> S)=(0, 0);
if ((B & CI)) (A +=> S)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ADDF_V1L50_4

//%BEGIN SEH_ADDFCIB_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ADDFCIB_L50_1 (S, CO, A, B, CI, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, CI, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3, int_res_4, int_res_5;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDFCIB_L50_1 (S, CO, A, B, CI, VDD, VSS);
   output S, CO;
   input A, B, CI, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3, int_res_4, int_res_5;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, CI_org);
   and (int_res_1, A_org, B_org);
   not (int_res_2, CI_org);
   and (int_res_3, A_org, int_res_2);
   not (int_res_4, CI_org);
   and (int_res_5, B_org, int_res_4);


   `ifdef VIRL_functiononly
       xor #1 (S, A_org, B_org, int_res_0);
       or  #1 (CO, int_res_1, int_res_3, int_res_5);
   `else
       xor (S, A_org, B_org, int_res_0);
       or (CO, int_res_1, int_res_3, int_res_5);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A) & ~(CI))) (B +=> CO)=(0, 0);
if ((A & CI)) (B +=> CO)=(0, 0);
if ((~(A) & B)) (CI -=> CO)=(0, 0);
if ((A & ~(B))) (CI -=> CO)=(0, 0);
if ((~(B) & ~(CI))) (A +=> CO)=(0, 0);
if ((B & CI)) (A +=> CO)=(0, 0);
if ((~(A) & ~(CI))) (B -=> S)=(0, 0);
if ((~(A) & CI)) (B +=> S)=(0, 0);
if ((A & ~(CI))) (B +=> S)=(0, 0);
if ((A & CI)) (B -=> S)=(0, 0);
if ((~(A) & ~(B))) (CI -=> S)=(0, 0);
if ((~(A) & B)) (CI +=> S)=(0, 0);
if ((A & ~(B))) (CI +=> S)=(0, 0);
if ((A & B)) (CI -=> S)=(0, 0);
if ((~(B) & ~(CI))) (A -=> S)=(0, 0);
if ((~(B) & CI)) (A +=> S)=(0, 0);
if ((B & ~(CI))) (A +=> S)=(0, 0);
if ((B & CI)) (A -=> S)=(0, 0);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_ADDFCIB_L50_1

//%BEGIN SEH_ADDFCIB_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ADDFCIB_L50_2 (S, CO, A, B, CI, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, CI, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3, int_res_4, int_res_5;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDFCIB_L50_2 (S, CO, A, B, CI, VDD, VSS);
   output S, CO;
   input A, B, CI, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3, int_res_4, int_res_5;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, CI_org);
   and (int_res_1, A_org, B_org);
   not (int_res_2, CI_org);
   and (int_res_3, A_org, int_res_2);
   not (int_res_4, CI_org);
   and (int_res_5, B_org, int_res_4);


   `ifdef VIRL_functiononly
       xor #1 (S, A_org, B_org, int_res_0);
       or  #1 (CO, int_res_1, int_res_3, int_res_5);
   `else
       xor (S, A_org, B_org, int_res_0);
       or (CO, int_res_1, int_res_3, int_res_5);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A) & ~(CI))) (B +=> CO)=(0, 0);
if ((A & CI)) (B +=> CO)=(0, 0);
if ((~(A) & B)) (CI -=> CO)=(0, 0);
if ((A & ~(B))) (CI -=> CO)=(0, 0);
if ((~(B) & ~(CI))) (A +=> CO)=(0, 0);
if ((B & CI)) (A +=> CO)=(0, 0);
if ((~(A) & ~(CI))) (B -=> S)=(0, 0);
if ((~(A) & CI)) (B +=> S)=(0, 0);
if ((A & ~(CI))) (B +=> S)=(0, 0);
if ((A & CI)) (B -=> S)=(0, 0);
if ((~(A) & ~(B))) (CI -=> S)=(0, 0);
if ((~(A) & B)) (CI +=> S)=(0, 0);
if ((A & ~(B))) (CI +=> S)=(0, 0);
if ((A & B)) (CI -=> S)=(0, 0);
if ((~(B) & ~(CI))) (A -=> S)=(0, 0);
if ((~(B) & CI)) (A +=> S)=(0, 0);
if ((B & ~(CI))) (A +=> S)=(0, 0);
if ((B & CI)) (A -=> S)=(0, 0);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_ADDFCIB_L50_2

//%BEGIN SEH_ADDFCOB_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ADDFCOB_L50_1 (S, CO, A, B, CI, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, CI, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDFCOB_L50_1 (S, CO, A, B, CI, VDD, VSS);
   output S, CO;
   input A, B, CI, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   and (int_res_0, A_org, B_org);
   and (int_res_1, A_org, CI_org);
   and (int_res_2, B_org, CI_org);

   `ifdef VIRL_functiononly
       xor #1 (S, A_org, B_org, CI_org);
       nor #1 (CO, int_res_0, int_res_1, int_res_2);
   `else
       xor (S, A_org, B_org, CI_org);
       nor (CO, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
(CI -=> CO)=(0, 0);
if ((~(A) & CI)) (B -=> CO)=(0, 0);
if ((A & ~(CI))) (B -=> CO)=(0, 0);
if ((~(B) & CI)) (A -=> CO)=(0, 0);
if ((B & ~(CI))) (A -=> CO)=(0, 0);
if ((~(A) & ~(B))) (CI +=> S)=(0, 0);
if ((A & ~(B)) | (~(A) & B)) (CI -=> S)=(0, 0);
if ((A & B)) (CI +=> S)=(0, 0);
if ((~(A) & ~(CI))) (B +=> S)=(0, 0);
if ((~(A) & CI)) (B -=> S)=(0, 0);
if ((A & ~(CI))) (B -=> S)=(0, 0);
if ((A & CI)) (B +=> S)=(0, 0);
if ((~(B) & ~(CI))) (A +=> S)=(0, 0);
if ((~(B) & CI)) (A -=> S)=(0, 0);
if ((B & ~(CI))) (A -=> S)=(0, 0);
if ((B & CI)) (A +=> S)=(0, 0);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_ADDFCOB_L50_1

//%BEGIN SEH_ADDFCOB_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ADDFCOB_L50_2 (S, CO, A, B, CI, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, CI, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDFCOB_L50_2 (S, CO, A, B, CI, VDD, VSS);
   output S, CO;
   input A, B, CI, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   and (int_res_0, A_org, B_org);
   and (int_res_1, A_org, CI_org);
   and (int_res_2, B_org, CI_org);

   `ifdef VIRL_functiononly
       xor #1 (S, A_org, B_org, CI_org);
       nor #1 (CO, int_res_0, int_res_1, int_res_2);
   `else
       xor (S, A_org, B_org, CI_org);
       nor (CO, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
(CI -=> CO)=(0, 0);
if ((~(A) & CI)) (B -=> CO)=(0, 0);
if ((A & ~(CI))) (B -=> CO)=(0, 0);
if ((~(B) & CI)) (A -=> CO)=(0, 0);
if ((B & ~(CI))) (A -=> CO)=(0, 0);
if ((~(A) & ~(B))) (CI +=> S)=(0, 0);
if ((A & ~(B)) | (~(A) & B)) (CI -=> S)=(0, 0);
if ((A & B)) (CI +=> S)=(0, 0);
if ((~(A) & ~(CI))) (B +=> S)=(0, 0);
if ((~(A) & CI)) (B -=> S)=(0, 0);
if ((A & ~(CI))) (B -=> S)=(0, 0);
if ((A & CI)) (B +=> S)=(0, 0);
if ((~(B) & ~(CI))) (A +=> S)=(0, 0);
if ((~(B) & CI)) (A -=> S)=(0, 0);
if ((B & ~(CI))) (A -=> S)=(0, 0);
if ((B & CI)) (A +=> S)=(0, 0);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_ADDFCOB_L50_2

//%BEGIN SEH_ADDFCSCIB_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ADDFCSCIB_L50_1 (S, CO0, CO1, A, B, CI0, CI1, CS, VDD, VSS, VBP, VBN);
   output S, CO0, CO1;
   input A, B, CI0, CI1, CS, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3, int_res_4, int_res_5, int_res_6, 
      int_res_7, int_res_8, int_res_9, int_res_10, 
      int_res_11, int_res_12, int_res_13, int_res_14, 
      int_res_15, int_res_16;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI0_org, CI0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI1_org, CI1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CS_org, CS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDFCSCIB_L50_1 (S, CO0, CO1, A, B, CI0, CI1, CS, VDD, VSS);
   output S, CO0, CO1;
   input A, B, CI0, CI1, CS, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3, int_res_4, int_res_5, int_res_6, 
      int_res_7, int_res_8, int_res_9, int_res_10, 
      int_res_11, int_res_12, int_res_13, int_res_14, 
      int_res_15, int_res_16;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI0_org, CI0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI1_org, CI1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CS_org, CS, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, CI0_org);
   xor (int_res_1, A_org, B_org, int_res_0);
   not (int_res_2, CS_org);
   and (int_res_3, int_res_1, int_res_2);
   not (int_res_4, CI1_org);
   xor (int_res_5, A_org, B_org, int_res_4);
   and (int_res_6, int_res_5, CS_org);
   and (int_res_7, A_org, B_org);
   not (int_res_8, CI0_org);
   and (int_res_9, A_org, int_res_8);
   not (int_res_10, CI0_org);
   and (int_res_11, B_org, int_res_10);
   and (int_res_12, A_org, B_org);
   not (int_res_13, CI1_org);
   and (int_res_14, A_org, int_res_13);
   not (int_res_15, CI1_org);
   and (int_res_16, B_org, int_res_15);

   `ifdef VIRL_functiononly
       or #1 (S, int_res_3, int_res_6);
       or #1 (CO0, int_res_7, int_res_9, int_res_11);
       or #1 (CO1, int_res_12, int_res_14, int_res_16);
   `else
       or (S, int_res_3, int_res_6);
       or (CO0, int_res_7, int_res_9, int_res_11);
       or (CO1, int_res_12, int_res_14, int_res_16);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A) & ~(CI0) & ~(CI1))) (B +=> CO0)=(0, 0);
if ((~(A) & ~(CI0) & CI1 & ~(CS))) (B +=> CO0)=(0, 0);
if ((~(A) & ~(CI0) & CI1 & CS)) (B +=> CO0)=(0, 0);
if ((A & CI0 & ~(CI1) & ~(CS))) (B +=> CO0)=(0, 0);
if ((A & CI0 & ~(CI1) & CS)) (B +=> CO0)=(0, 0);
if ((A & CI0 & CI1)) (B +=> CO0)=(0, 0);
if ((~(A) & B & ~(CI1) & ~(CS))) (CI0 -=> CO0)=(0, 0);
if ((~(A) & B & ~(CI1) & CS)) (CI0 -=> CO0)=(0, 0);
if ((~(A) & B & CI1 & ~(CS))) (CI0 -=> CO0)=(0, 0);
if ((~(A) & B & CI1 & CS)) (CI0 -=> CO0)=(0, 0);
if ((A & ~(B) & ~(CI1) & ~(CS))) (CI0 -=> CO0)=(0, 0);
if ((A & ~(B) & ~(CI1) & CS)) (CI0 -=> CO0)=(0, 0);
if ((A & ~(B) & CI1 & ~(CS))) (CI0 -=> CO0)=(0, 0);
if ((A & ~(B) & CI1 & CS)) (CI0 -=> CO0)=(0, 0);
if ((~(B) & ~(CI0) & ~(CI1))) (A +=> CO0)=(0, 0);
if ((~(B) & ~(CI0) & CI1 & ~(CS))) (A +=> CO0)=(0, 0);
if ((~(B) & ~(CI0) & CI1 & CS)) (A +=> CO0)=(0, 0);
if ((B & CI0 & ~(CI1) & ~(CS))) (A +=> CO0)=(0, 0);
if ((B & CI0 & ~(CI1) & CS)) (A +=> CO0)=(0, 0);
if ((B & CI0 & CI1)) (A +=> CO0)=(0, 0);
if ((~(A) & ~(CI0) & ~(CI1))) (B +=> CO1)=(0, 0);
if ((~(A) & CI0 & ~(CI1) & ~(CS))) (B +=> CO1)=(0, 0);
if ((~(A) & CI0 & ~(CI1) & CS)) (B +=> CO1)=(0, 0);
if ((A & ~(CI0) & CI1 & ~(CS))) (B +=> CO1)=(0, 0);
if ((A & ~(CI0) & CI1 & CS)) (B +=> CO1)=(0, 0);
if ((A & CI0 & CI1)) (B +=> CO1)=(0, 0);
if ((~(B) & ~(CI0) & ~(CI1))) (A +=> CO1)=(0, 0);
if ((~(B) & CI0 & ~(CI1) & ~(CS))) (A +=> CO1)=(0, 0);
if ((~(B) & CI0 & ~(CI1) & CS)) (A +=> CO1)=(0, 0);
if ((B & ~(CI0) & CI1 & ~(CS))) (A +=> CO1)=(0, 0);
if ((B & ~(CI0) & CI1 & CS)) (A +=> CO1)=(0, 0);
if ((B & CI0 & CI1)) (A +=> CO1)=(0, 0);
if ((~(A) & B & ~(CI0) & ~(CS))) (CI1 -=> CO1)=(0, 0);
if ((~(A) & B & ~(CI0) & CS)) (CI1 -=> CO1)=(0, 0);
if ((~(A) & B & CI0 & ~(CS))) (CI1 -=> CO1)=(0, 0);
if ((~(A) & B & CI0 & CS)) (CI1 -=> CO1)=(0, 0);
if ((A & ~(B) & ~(CI0) & ~(CS))) (CI1 -=> CO1)=(0, 0);
if ((A & ~(B) & ~(CI0) & CS)) (CI1 -=> CO1)=(0, 0);
if ((A & ~(B) & CI0 & ~(CS))) (CI1 -=> CO1)=(0, 0);
if ((A & ~(B) & CI0 & CS)) (CI1 -=> CO1)=(0, 0);
if ((~(A) & ~(CI0) & ~(CI1))) (B -=> S)=(0, 0);
if ((~(A) & ~(CI0) & CI1 & ~(CS))) (B -=> S)=(0, 0);
if ((~(A) & ~(CI0) & CI1 & CS)) (B +=> S)=(0, 0);
if ((~(A) & CI0 & ~(CI1) & ~(CS))) (B +=> S)=(0, 0);
if ((~(A) & CI0 & ~(CI1) & CS)) (B -=> S)=(0, 0);
if ((~(A) & CI0 & CI1)) (B +=> S)=(0, 0);
if ((A & ~(CI0) & ~(CI1))) (B +=> S)=(0, 0);
if ((A & ~(CI0) & CI1 & ~(CS))) (B +=> S)=(0, 0);
if ((A & ~(CI0) & CI1 & CS)) (B -=> S)=(0, 0);
if ((A & CI0 & ~(CI1) & ~(CS))) (B -=> S)=(0, 0);
if ((A & CI0 & ~(CI1) & CS)) (B +=> S)=(0, 0);
if ((A & CI0 & CI1)) (B -=> S)=(0, 0);
if ((~(A) & ~(B) & ~(CI1) & ~(CS))) (CI0 -=> S)=(0, 0);
if ((~(A) & ~(B) & CI1 & ~(CS))) (CI0 -=> S)=(0, 0);
if ((~(A) & B & ~(CI1) & ~(CS))) (CI0 +=> S)=(0, 0);
if ((~(A) & B & CI1 & ~(CS))) (CI0 +=> S)=(0, 0);
if ((A & ~(B) & ~(CI1) & ~(CS))) (CI0 +=> S)=(0, 0);
if ((A & ~(B) & CI1 & ~(CS))) (CI0 +=> S)=(0, 0);
if ((A & B & ~(CI1) & ~(CS))) (CI0 -=> S)=(0, 0);
if ((A & B & CI1 & ~(CS))) (CI0 -=> S)=(0, 0);
if ((~(B) & ~(CI0) & ~(CI1))) (A -=> S)=(0, 0);
if ((~(B) & ~(CI0) & CI1 & ~(CS))) (A -=> S)=(0, 0);
if ((~(B) & ~(CI0) & CI1 & CS)) (A +=> S)=(0, 0);
if ((~(B) & CI0 & ~(CI1) & ~(CS))) (A +=> S)=(0, 0);
if ((~(B) & CI0 & ~(CI1) & CS)) (A -=> S)=(0, 0);
if ((~(B) & CI0 & CI1)) (A +=> S)=(0, 0);
if ((B & ~(CI0) & ~(CI1))) (A +=> S)=(0, 0);
if ((B & ~(CI0) & CI1 & ~(CS))) (A +=> S)=(0, 0);
if ((B & ~(CI0) & CI1 & CS)) (A -=> S)=(0, 0);
if ((B & CI0 & ~(CI1) & ~(CS))) (A -=> S)=(0, 0);
if ((B & CI0 & ~(CI1) & CS)) (A +=> S)=(0, 0);
if ((B & CI0 & CI1)) (A -=> S)=(0, 0);
if ((~(A) & ~(B) & ~(CI0) & CS)) (CI1 -=> S)=(0, 0);
if ((~(A) & ~(B) & CI0 & CS)) (CI1 -=> S)=(0, 0);
if ((~(A) & B & ~(CI0) & CS)) (CI1 +=> S)=(0, 0);
if ((~(A) & B & CI0 & CS)) (CI1 +=> S)=(0, 0);
if ((A & ~(B) & ~(CI0) & CS)) (CI1 +=> S)=(0, 0);
if ((A & ~(B) & CI0 & CS)) (CI1 +=> S)=(0, 0);
if ((A & B & ~(CI0) & CS)) (CI1 -=> S)=(0, 0);
if ((A & B & CI0 & CS)) (CI1 -=> S)=(0, 0);
if ((A & ~(B) & ~(CI0) & CI1) | (~(A) & B & ~(CI0) & CI1)) (CS +=> S)=(0, 0);
if ((A & ~(B) & CI0 & ~(CI1)) | (~(A) & B & CI0 & ~(CI1))) (CS -=> S)=(0, 0);
if ((A & B & ~(CI0) & CI1) | (~(A) & ~(B) & ~(CI0) & CI1)) (CS -=> S)=(0, 0);
if ((A & B & CI0 & ~(CI1)) | (~(A) & ~(B) & CI0 & ~(CI1))) (CS +=> S)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ADDFCSCIB_L50_1

//%BEGIN SEH_ADDFCSCIB_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ADDFCSCIB_L50_2 (S, CO0, CO1, A, B, CI0, CI1, CS, VDD, VSS, VBP, VBN);
   output S, CO0, CO1;
   input A, B, CI0, CI1, CS, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3, int_res_4, int_res_5, int_res_6, 
      int_res_7, int_res_8, int_res_9, int_res_10, 
      int_res_11, int_res_12, int_res_13, int_res_14, 
      int_res_15, int_res_16;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI0_org, CI0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI1_org, CI1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CS_org, CS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDFCSCIB_L50_2 (S, CO0, CO1, A, B, CI0, CI1, CS, VDD, VSS);
   output S, CO0, CO1;
   input A, B, CI0, CI1, CS, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3, int_res_4, int_res_5, int_res_6, 
      int_res_7, int_res_8, int_res_9, int_res_10, 
      int_res_11, int_res_12, int_res_13, int_res_14, 
      int_res_15, int_res_16;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI0_org, CI0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI1_org, CI1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CS_org, CS, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, CI0_org);
   xor (int_res_1, A_org, B_org, int_res_0);
   not (int_res_2, CS_org);
   and (int_res_3, int_res_1, int_res_2);
   not (int_res_4, CI1_org);
   xor (int_res_5, A_org, B_org, int_res_4);
   and (int_res_6, int_res_5, CS_org);
   and (int_res_7, A_org, B_org);
   not (int_res_8, CI0_org);
   and (int_res_9, A_org, int_res_8);
   not (int_res_10, CI0_org);
   and (int_res_11, B_org, int_res_10);
   and (int_res_12, A_org, B_org);
   not (int_res_13, CI1_org);
   and (int_res_14, A_org, int_res_13);
   not (int_res_15, CI1_org);
   and (int_res_16, B_org, int_res_15);

   `ifdef VIRL_functiononly
       or #1 (S, int_res_3, int_res_6);
       or #1 (CO0, int_res_7, int_res_9, int_res_11);
       or #1 (CO1, int_res_12, int_res_14, int_res_16);
   `else
       or (S, int_res_3, int_res_6);
       or (CO0, int_res_7, int_res_9, int_res_11);
       or (CO1, int_res_12, int_res_14, int_res_16);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A) & ~(CI0) & ~(CI1) & ~(CS))) (B +=> CO0)=(0, 0);
if ((~(A) & ~(CI0) & ~(CI1) & CS)) (B +=> CO0)=(0, 0);
if ((~(A) & ~(CI0) & CI1 & ~(CS))) (B +=> CO0)=(0, 0);
if ((~(A) & ~(CI0) & CI1 & CS)) (B +=> CO0)=(0, 0);
if ((A & CI0 & ~(CI1) & ~(CS))) (B +=> CO0)=(0, 0);
if ((A & CI0 & ~(CI1) & CS)) (B +=> CO0)=(0, 0);
if ((A & CI0 & CI1)) (B +=> CO0)=(0, 0);
if ((~(A) & B & ~(CI1) & ~(CS))) (CI0 -=> CO0)=(0, 0);
if ((~(A) & B & ~(CI1) & CS)) (CI0 -=> CO0)=(0, 0);
if ((~(A) & B & CI1 & ~(CS))) (CI0 -=> CO0)=(0, 0);
if ((~(A) & B & CI1 & CS)) (CI0 -=> CO0)=(0, 0);
if ((A & ~(B) & ~(CI1) & ~(CS))) (CI0 -=> CO0)=(0, 0);
if ((A & ~(B) & ~(CI1) & CS)) (CI0 -=> CO0)=(0, 0);
if ((A & ~(B) & CI1 & ~(CS))) (CI0 -=> CO0)=(0, 0);
if ((A & ~(B) & CI1 & CS)) (CI0 -=> CO0)=(0, 0);
if ((~(B) & ~(CI0) & ~(CI1) & ~(CS))) (A +=> CO0)=(0, 0);
if ((~(B) & ~(CI0) & ~(CI1) & CS)) (A +=> CO0)=(0, 0);
if ((~(B) & ~(CI0) & CI1 & ~(CS))) (A +=> CO0)=(0, 0);
if ((~(B) & ~(CI0) & CI1 & CS)) (A +=> CO0)=(0, 0);
if ((B & CI0 & ~(CI1) & ~(CS))) (A +=> CO0)=(0, 0);
if ((B & CI0 & ~(CI1) & CS)) (A +=> CO0)=(0, 0);
if ((B & CI0 & CI1)) (A +=> CO0)=(0, 0);
if ((~(A) & ~(CI0) & ~(CI1) & ~(CS))) (B +=> CO1)=(0, 0);
if ((~(A) & ~(CI0) & ~(CI1) & CS)) (B +=> CO1)=(0, 0);
if ((~(A) & CI0 & ~(CI1) & ~(CS))) (B +=> CO1)=(0, 0);
if ((~(A) & CI0 & ~(CI1) & CS)) (B +=> CO1)=(0, 0);
if ((A & ~(CI0) & CI1 & ~(CS))) (B +=> CO1)=(0, 0);
if ((A & ~(CI0) & CI1 & CS)) (B +=> CO1)=(0, 0);
if ((A & CI0 & CI1)) (B +=> CO1)=(0, 0);
if ((~(B) & ~(CI0) & ~(CI1) & ~(CS))) (A +=> CO1)=(0, 0);
if ((~(B) & ~(CI0) & ~(CI1) & CS)) (A +=> CO1)=(0, 0);
if ((~(B) & CI0 & ~(CI1) & ~(CS))) (A +=> CO1)=(0, 0);
if ((~(B) & CI0 & ~(CI1) & CS)) (A +=> CO1)=(0, 0);
if ((B & ~(CI0) & CI1 & ~(CS))) (A +=> CO1)=(0, 0);
if ((B & ~(CI0) & CI1 & CS)) (A +=> CO1)=(0, 0);
if ((B & CI0 & CI1)) (A +=> CO1)=(0, 0);
if ((~(A) & B & ~(CI0) & ~(CS))) (CI1 -=> CO1)=(0, 0);
if ((~(A) & B & ~(CI0) & CS)) (CI1 -=> CO1)=(0, 0);
if ((~(A) & B & CI0 & ~(CS))) (CI1 -=> CO1)=(0, 0);
if ((~(A) & B & CI0 & CS)) (CI1 -=> CO1)=(0, 0);
if ((A & ~(B) & ~(CI0) & ~(CS))) (CI1 -=> CO1)=(0, 0);
if ((A & ~(B) & ~(CI0) & CS)) (CI1 -=> CO1)=(0, 0);
if ((A & ~(B) & CI0 & ~(CS))) (CI1 -=> CO1)=(0, 0);
if ((A & ~(B) & CI0 & CS)) (CI1 -=> CO1)=(0, 0);
if ((~(A) & ~(CI0) & ~(CI1) & ~(CS))) (B -=> S)=(0, 0);
if ((~(A) & ~(CI0) & ~(CI1) & CS)) (B -=> S)=(0, 0);
if ((~(A) & ~(CI0) & CI1 & ~(CS))) (B -=> S)=(0, 0);
if ((~(A) & ~(CI0) & CI1 & CS)) (B +=> S)=(0, 0);
if ((~(A) & CI0 & ~(CI1) & ~(CS))) (B +=> S)=(0, 0);
if ((~(A) & CI0 & ~(CI1) & CS)) (B -=> S)=(0, 0);
if ((~(A) & CI0 & CI1)) (B +=> S)=(0, 0);
if ((A & ~(CI0) & ~(CI1) & ~(CS))) (B +=> S)=(0, 0);
if ((A & ~(CI0) & ~(CI1) & CS)) (B +=> S)=(0, 0);
if ((A & ~(CI0) & CI1 & ~(CS))) (B +=> S)=(0, 0);
if ((A & ~(CI0) & CI1 & CS)) (B -=> S)=(0, 0);
if ((A & CI0 & ~(CI1) & ~(CS))) (B -=> S)=(0, 0);
if ((A & CI0 & ~(CI1) & CS)) (B +=> S)=(0, 0);
if ((A & CI0 & CI1)) (B -=> S)=(0, 0);
if ((~(A) & ~(B) & ~(CI1) & ~(CS))) (CI0 -=> S)=(0, 0);
if ((~(A) & ~(B) & CI1 & ~(CS))) (CI0 -=> S)=(0, 0);
if ((~(A) & B & ~(CI1) & ~(CS))) (CI0 +=> S)=(0, 0);
if ((~(A) & B & CI1 & ~(CS))) (CI0 +=> S)=(0, 0);
if ((A & ~(B) & ~(CI1) & ~(CS))) (CI0 +=> S)=(0, 0);
if ((A & ~(B) & CI1 & ~(CS))) (CI0 +=> S)=(0, 0);
if ((A & B & ~(CI1) & ~(CS))) (CI0 -=> S)=(0, 0);
if ((A & B & CI1 & ~(CS))) (CI0 -=> S)=(0, 0);
if ((~(B) & ~(CI0) & ~(CI1) & ~(CS))) (A -=> S)=(0, 0);
if ((~(B) & ~(CI0) & ~(CI1) & CS)) (A -=> S)=(0, 0);
if ((~(B) & ~(CI0) & CI1 & ~(CS))) (A -=> S)=(0, 0);
if ((~(B) & ~(CI0) & CI1 & CS)) (A +=> S)=(0, 0);
if ((~(B) & CI0 & ~(CI1) & ~(CS))) (A +=> S)=(0, 0);
if ((~(B) & CI0 & ~(CI1) & CS)) (A -=> S)=(0, 0);
if ((~(B) & CI0 & CI1)) (A +=> S)=(0, 0);
if ((B & ~(CI0) & ~(CI1) & ~(CS))) (A +=> S)=(0, 0);
if ((B & ~(CI0) & ~(CI1) & CS)) (A +=> S)=(0, 0);
if ((B & ~(CI0) & CI1 & ~(CS))) (A +=> S)=(0, 0);
if ((B & ~(CI0) & CI1 & CS)) (A -=> S)=(0, 0);
if ((B & CI0 & ~(CI1) & ~(CS))) (A -=> S)=(0, 0);
if ((B & CI0 & ~(CI1) & CS)) (A +=> S)=(0, 0);
if ((B & CI0 & CI1)) (A -=> S)=(0, 0);
if ((~(A) & ~(B) & ~(CI0) & CS)) (CI1 -=> S)=(0, 0);
if ((~(A) & ~(B) & CI0 & CS)) (CI1 -=> S)=(0, 0);
if ((~(A) & B & ~(CI0) & CS)) (CI1 +=> S)=(0, 0);
if ((~(A) & B & CI0 & CS)) (CI1 +=> S)=(0, 0);
if ((A & ~(B) & ~(CI0) & CS)) (CI1 +=> S)=(0, 0);
if ((A & ~(B) & CI0 & CS)) (CI1 +=> S)=(0, 0);
if ((A & B & ~(CI0) & CS)) (CI1 -=> S)=(0, 0);
if ((A & B & CI0 & CS)) (CI1 -=> S)=(0, 0);
if ((A & ~(B) & ~(CI0) & CI1) | (~(A) & B & ~(CI0) & CI1)) (CS +=> S)=(0, 0);
if ((A & ~(B) & CI0 & ~(CI1)) | (~(A) & B & CI0 & ~(CI1))) (CS -=> S)=(0, 0);
if ((A & B & ~(CI0) & CI1) | (~(A) & ~(B) & ~(CI0) & CI1)) (CS -=> S)=(0, 0);
if ((A & B & CI0 & ~(CI1)) | (~(A) & ~(B) & CI0 & ~(CI1))) (CS +=> S)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ADDFCSCIB_L50_2

//%BEGIN SEH_ADDFCSCOB_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ADDFCSCOB_L50_1 (S, CO0, CO1, A, B, CI0, CI1, CS, VDD, VSS, VBP, VBN);
   output S, CO0, CO1;
   input A, B, CI0, CI1, CS, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3, int_res_4, int_res_5, int_res_6, 
      int_res_7, int_res_8, int_res_9, int_res_10;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI0_org, CI0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI1_org, CI1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CS_org, CS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDFCSCOB_L50_1 (S, CO0, CO1, A, B, CI0, CI1, CS, VDD, VSS);
   output S, CO0, CO1;
   input A, B, CI0, CI1, CS, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3, int_res_4, int_res_5, int_res_6, 
      int_res_7, int_res_8, int_res_9, int_res_10;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI0_org, CI0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI1_org, CI1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CS_org, CS, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   xor (int_res_0, A_org, B_org, CI0_org);
   not (int_res_1, CS_org);
   and (int_res_2, int_res_0, int_res_1);
   xor (int_res_3, A_org, B_org, CI1_org);
   and (int_res_4, int_res_3, CS_org);
   and (int_res_5, A_org, B_org);
   and (int_res_6, A_org, CI0_org);
   and (int_res_7, B_org, CI0_org);
   and (int_res_8, A_org, B_org);
   and (int_res_9, A_org, CI1_org);
   and (int_res_10, B_org, CI1_org);

   `ifdef VIRL_functiononly
       or  #1 (S, int_res_2, int_res_4);
       nor #1 (CO0, int_res_5, int_res_6, int_res_7);
       nor #1 (CO1, int_res_8, int_res_9, int_res_10);
   `else
       or (S, int_res_2, int_res_4);
       nor (CO0, int_res_5, int_res_6, int_res_7);
       nor (CO1, int_res_8, int_res_9, int_res_10);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A) & CI0 & ~(CI1) & ~(CS))) (B -=> CO0)=(0, 0);
if ((~(A) & CI0 & ~(CI1) & CS)) (B -=> CO0)=(0, 0);
if ((~(A) & CI0 & CI1)) (B -=> CO0)=(0, 0);
if ((A & ~(CI0) & ~(CI1))) (B -=> CO0)=(0, 0);
if ((A & ~(CI0) & CI1 & ~(CS))) (B -=> CO0)=(0, 0);
if ((A & ~(CI0) & CI1 & CS)) (B -=> CO0)=(0, 0);
if ((~(B) & CI0 & ~(CI1) & ~(CS))) (A -=> CO0)=(0, 0);
if ((~(B) & CI0 & ~(CI1) & CS)) (A -=> CO0)=(0, 0);
if ((~(B) & CI0 & CI1)) (A -=> CO0)=(0, 0);
if ((B & ~(CI0) & ~(CI1))) (A -=> CO0)=(0, 0);
if ((B & ~(CI0) & CI1 & ~(CS))) (A -=> CO0)=(0, 0);
if ((B & ~(CI0) & CI1 & CS)) (A -=> CO0)=(0, 0);
if ((A & ~(B) & ~(CI1) & ~(CS)) | (~(A) & B & ~(CI1) & ~(CS))) (CI0 -=> CO0)=(0, 0);
if ((A & ~(B) & ~(CI1) & CS) | (~(A) & B & ~(CI1) & CS)) (CI0 -=> CO0)=(0, 0);
if ((A & ~(B) & CI1 & ~(CS)) | (~(A) & B & CI1 & ~(CS))) (CI0 -=> CO0)=(0, 0);
if ((A & ~(B) & CI1 & CS) | (~(A) & B & CI1 & CS)) (CI0 -=> CO0)=(0, 0);
if ((~(A) & ~(CI0) & CI1 & ~(CS))) (B -=> CO1)=(0, 0);
if ((~(A) & ~(CI0) & CI1 & CS)) (B -=> CO1)=(0, 0);
if ((~(A) & CI0 & CI1)) (B -=> CO1)=(0, 0);
if ((A & ~(CI0) & ~(CI1))) (B -=> CO1)=(0, 0);
if ((A & CI0 & ~(CI1) & ~(CS))) (B -=> CO1)=(0, 0);
if ((A & CI0 & ~(CI1) & CS)) (B -=> CO1)=(0, 0);
if ((~(B) & ~(CI0) & CI1 & ~(CS))) (A -=> CO1)=(0, 0);
if ((~(B) & ~(CI0) & CI1 & CS)) (A -=> CO1)=(0, 0);
if ((~(B) & CI0 & CI1)) (A -=> CO1)=(0, 0);
if ((B & ~(CI0) & ~(CI1))) (A -=> CO1)=(0, 0);
if ((B & CI0 & ~(CI1) & ~(CS))) (A -=> CO1)=(0, 0);
if ((B & CI0 & ~(CI1) & CS)) (A -=> CO1)=(0, 0);
if ((A & ~(B) & ~(CI0) & ~(CS)) | (~(A) & B & ~(CI0) & ~(CS))) (CI1 -=> CO1)=(0, 0);
if ((A & ~(B) & ~(CI0) & CS) | (~(A) & B & ~(CI0) & CS)) (CI1 -=> CO1)=(0, 0);
if ((A & ~(B) & CI0 & ~(CS)) | (~(A) & B & CI0 & ~(CS))) (CI1 -=> CO1)=(0, 0);
if ((A & ~(B) & CI0 & CS) | (~(A) & B & CI0 & CS)) (CI1 -=> CO1)=(0, 0);
if ((~(A) & ~(CI0) & ~(CI1))) (B +=> S)=(0, 0);
if ((~(A) & ~(CI0) & CI1 & ~(CS))) (B +=> S)=(0, 0);
if ((~(A) & ~(CI0) & CI1 & CS)) (B -=> S)=(0, 0);
if ((~(A) & CI0 & ~(CI1) & ~(CS))) (B -=> S)=(0, 0);
if ((~(A) & CI0 & ~(CI1) & CS)) (B +=> S)=(0, 0);
if ((~(A) & CI0 & CI1)) (B -=> S)=(0, 0);
if ((A & ~(CI0) & ~(CI1))) (B -=> S)=(0, 0);
if ((A & ~(CI0) & CI1 & ~(CS))) (B -=> S)=(0, 0);
if ((A & ~(CI0) & CI1 & CS)) (B +=> S)=(0, 0);
if ((A & CI0 & ~(CI1) & ~(CS))) (B +=> S)=(0, 0);
if ((A & CI0 & ~(CI1) & CS)) (B -=> S)=(0, 0);
if ((A & CI0 & CI1)) (B +=> S)=(0, 0);
if ((~(B) & ~(CI0) & ~(CI1))) (A +=> S)=(0, 0);
if ((~(B) & ~(CI0) & CI1 & ~(CS))) (A +=> S)=(0, 0);
if ((~(B) & ~(CI0) & CI1 & CS)) (A -=> S)=(0, 0);
if ((~(B) & CI0 & ~(CI1) & ~(CS))) (A -=> S)=(0, 0);
if ((~(B) & CI0 & ~(CI1) & CS)) (A +=> S)=(0, 0);
if ((~(B) & CI0 & CI1)) (A -=> S)=(0, 0);
if ((B & ~(CI0) & ~(CI1))) (A -=> S)=(0, 0);
if ((B & ~(CI0) & CI1 & ~(CS))) (A -=> S)=(0, 0);
if ((B & ~(CI0) & CI1 & CS)) (A +=> S)=(0, 0);
if ((B & CI0 & ~(CI1) & ~(CS))) (A +=> S)=(0, 0);
if ((B & CI0 & ~(CI1) & CS)) (A -=> S)=(0, 0);
if ((B & CI0 & CI1)) (A +=> S)=(0, 0);
if ((~(A) & ~(B) & ~(CI1) & ~(CS))) (CI0 +=> S)=(0, 0);
if ((~(A) & ~(B) & CI1 & ~(CS))) (CI0 +=> S)=(0, 0);
if ((A & ~(B) & ~(CI1) & ~(CS)) | (~(A) & B & ~(CI1) & ~(CS))) (CI0 -=> S)=(0, 0);
if ((A & ~(B) & CI1 & ~(CS)) | (~(A) & B & CI1 & ~(CS))) (CI0 -=> S)=(0, 0);
if ((A & B & ~(CI1) & ~(CS))) (CI0 +=> S)=(0, 0);
if ((A & B & CI1 & ~(CS))) (CI0 +=> S)=(0, 0);
if ((~(A) & ~(B) & ~(CI0) & CS)) (CI1 +=> S)=(0, 0);
if ((~(A) & ~(B) & CI0 & CS)) (CI1 +=> S)=(0, 0);
if ((A & ~(B) & ~(CI0) & CS) | (~(A) & B & ~(CI0) & CS)) (CI1 -=> S)=(0, 0);
if ((A & ~(B) & CI0 & CS) | (~(A) & B & CI0 & CS)) (CI1 -=> S)=(0, 0);
if ((A & B & ~(CI0) & CS)) (CI1 +=> S)=(0, 0);
if ((A & B & CI0 & CS)) (CI1 +=> S)=(0, 0);
if ((A & ~(B) & ~(CI0) & CI1) | (~(A) & B & ~(CI0) & CI1)) (CS -=> S)=(0, 0);
if ((A & ~(B) & CI0 & ~(CI1)) | (~(A) & B & CI0 & ~(CI1))) (CS +=> S)=(0, 0);
if ((A & B & ~(CI0) & CI1) | (~(A) & ~(B) & ~(CI0) & CI1)) (CS +=> S)=(0, 0);
if ((A & B & CI0 & ~(CI1)) | (~(A) & ~(B) & CI0 & ~(CI1))) (CS -=> S)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ADDFCSCOB_L50_1

//%BEGIN SEH_ADDFCSCOB_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ADDFCSCOB_L50_2 (S, CO0, CO1, A, B, CI0, CI1, CS, VDD, VSS, VBP, VBN);
   output S, CO0, CO1;
   input A, B, CI0, CI1, CS, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3, int_res_4, int_res_5, int_res_6, 
      int_res_7, int_res_8, int_res_9, int_res_10;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI0_org, CI0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI1_org, CI1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CS_org, CS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDFCSCOB_L50_2 (S, CO0, CO1, A, B, CI0, CI1, CS, VDD, VSS);
   output S, CO0, CO1;
   input A, B, CI0, CI1, CS, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3, int_res_4, int_res_5, int_res_6, 
      int_res_7, int_res_8, int_res_9, int_res_10;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI0_org, CI0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI1_org, CI1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CS_org, CS, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   xor (int_res_0, A_org, B_org, CI0_org);
   not (int_res_1, CS_org);
   and (int_res_2, int_res_0, int_res_1);
   xor (int_res_3, A_org, B_org, CI1_org);
   and (int_res_4, int_res_3, CS_org);
   and (int_res_5, A_org, B_org);
   and (int_res_6, A_org, CI0_org);
   and (int_res_7, B_org, CI0_org);
   and (int_res_8, A_org, B_org);
   and (int_res_9, A_org, CI1_org);
   and (int_res_10, B_org, CI1_org);

   `ifdef VIRL_functiononly
       or  #1 (S, int_res_2, int_res_4);
       nor #1 (CO0, int_res_5, int_res_6, int_res_7);
       nor #1 (CO1, int_res_8, int_res_9, int_res_10);
   `else
       or (S, int_res_2, int_res_4);
       nor (CO0, int_res_5, int_res_6, int_res_7);
       nor (CO1, int_res_8, int_res_9, int_res_10);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A) & CI0 & ~(CI1) & ~(CS))) (B -=> CO0)=(0, 0);
if ((~(A) & CI0 & ~(CI1) & CS)) (B -=> CO0)=(0, 0);
if ((~(A) & CI0 & CI1)) (B -=> CO0)=(0, 0);
if ((A & ~(CI0) & ~(CI1))) (B -=> CO0)=(0, 0);
if ((A & ~(CI0) & CI1 & ~(CS))) (B -=> CO0)=(0, 0);
if ((A & ~(CI0) & CI1 & CS)) (B -=> CO0)=(0, 0);
if ((~(B) & CI0 & ~(CI1) & ~(CS))) (A -=> CO0)=(0, 0);
if ((~(B) & CI0 & ~(CI1) & CS)) (A -=> CO0)=(0, 0);
if ((~(B) & CI0 & CI1)) (A -=> CO0)=(0, 0);
if ((B & ~(CI0) & ~(CI1))) (A -=> CO0)=(0, 0);
if ((B & ~(CI0) & CI1 & ~(CS))) (A -=> CO0)=(0, 0);
if ((B & ~(CI0) & CI1 & CS)) (A -=> CO0)=(0, 0);
if ((A & ~(B) & ~(CI1) & ~(CS)) | (~(A) & B & ~(CI1) & ~(CS))) (CI0 -=> CO0)=(0, 0);
if ((A & ~(B) & ~(CI1) & CS) | (~(A) & B & ~(CI1) & CS)) (CI0 -=> CO0)=(0, 0);
if ((A & ~(B) & CI1 & ~(CS)) | (~(A) & B & CI1 & ~(CS))) (CI0 -=> CO0)=(0, 0);
if ((A & ~(B) & CI1 & CS) | (~(A) & B & CI1 & CS)) (CI0 -=> CO0)=(0, 0);
if ((~(A) & ~(CI0) & CI1 & ~(CS))) (B -=> CO1)=(0, 0);
if ((~(A) & ~(CI0) & CI1 & CS)) (B -=> CO1)=(0, 0);
if ((~(A) & CI0 & CI1)) (B -=> CO1)=(0, 0);
if ((A & ~(CI0) & ~(CI1))) (B -=> CO1)=(0, 0);
if ((A & CI0 & ~(CI1) & ~(CS))) (B -=> CO1)=(0, 0);
if ((A & CI0 & ~(CI1) & CS)) (B -=> CO1)=(0, 0);
if ((~(B) & ~(CI0) & CI1 & ~(CS))) (A -=> CO1)=(0, 0);
if ((~(B) & ~(CI0) & CI1 & CS)) (A -=> CO1)=(0, 0);
if ((~(B) & CI0 & CI1)) (A -=> CO1)=(0, 0);
if ((B & ~(CI0) & ~(CI1))) (A -=> CO1)=(0, 0);
if ((B & CI0 & ~(CI1) & ~(CS))) (A -=> CO1)=(0, 0);
if ((B & CI0 & ~(CI1) & CS)) (A -=> CO1)=(0, 0);
if ((A & ~(B) & ~(CI0) & ~(CS)) | (~(A) & B & ~(CI0) & ~(CS))) (CI1 -=> CO1)=(0, 0);
if ((A & ~(B) & ~(CI0) & CS) | (~(A) & B & ~(CI0) & CS)) (CI1 -=> CO1)=(0, 0);
if ((A & ~(B) & CI0 & ~(CS)) | (~(A) & B & CI0 & ~(CS))) (CI1 -=> CO1)=(0, 0);
if ((A & ~(B) & CI0 & CS) | (~(A) & B & CI0 & CS)) (CI1 -=> CO1)=(0, 0);
if ((~(A) & ~(CI0) & ~(CI1))) (B +=> S)=(0, 0);
if ((~(A) & ~(CI0) & CI1 & ~(CS))) (B +=> S)=(0, 0);
if ((~(A) & ~(CI0) & CI1 & CS)) (B -=> S)=(0, 0);
if ((~(A) & CI0 & ~(CI1) & ~(CS))) (B -=> S)=(0, 0);
if ((~(A) & CI0 & ~(CI1) & CS)) (B +=> S)=(0, 0);
if ((~(A) & CI0 & CI1)) (B -=> S)=(0, 0);
if ((A & ~(CI0) & ~(CI1))) (B -=> S)=(0, 0);
if ((A & ~(CI0) & CI1 & ~(CS))) (B -=> S)=(0, 0);
if ((A & ~(CI0) & CI1 & CS)) (B +=> S)=(0, 0);
if ((A & CI0 & ~(CI1) & ~(CS))) (B +=> S)=(0, 0);
if ((A & CI0 & ~(CI1) & CS)) (B -=> S)=(0, 0);
if ((A & CI0 & CI1)) (B +=> S)=(0, 0);
if ((~(B) & ~(CI0) & ~(CI1))) (A +=> S)=(0, 0);
if ((~(B) & ~(CI0) & CI1 & ~(CS))) (A +=> S)=(0, 0);
if ((~(B) & ~(CI0) & CI1 & CS)) (A -=> S)=(0, 0);
if ((~(B) & CI0 & ~(CI1) & ~(CS))) (A -=> S)=(0, 0);
if ((~(B) & CI0 & ~(CI1) & CS)) (A +=> S)=(0, 0);
if ((~(B) & CI0 & CI1)) (A -=> S)=(0, 0);
if ((B & ~(CI0) & ~(CI1))) (A -=> S)=(0, 0);
if ((B & ~(CI0) & CI1 & ~(CS))) (A -=> S)=(0, 0);
if ((B & ~(CI0) & CI1 & CS)) (A +=> S)=(0, 0);
if ((B & CI0 & ~(CI1) & ~(CS))) (A +=> S)=(0, 0);
if ((B & CI0 & ~(CI1) & CS)) (A -=> S)=(0, 0);
if ((B & CI0 & CI1)) (A +=> S)=(0, 0);
if ((~(A) & ~(B) & ~(CI1) & ~(CS))) (CI0 +=> S)=(0, 0);
if ((~(A) & ~(B) & CI1 & ~(CS))) (CI0 +=> S)=(0, 0);
if ((A & ~(B) & ~(CI1) & ~(CS)) | (~(A) & B & ~(CI1) & ~(CS))) (CI0 -=> S)=(0, 0);
if ((A & ~(B) & CI1 & ~(CS)) | (~(A) & B & CI1 & ~(CS))) (CI0 -=> S)=(0, 0);
if ((A & B & ~(CI1) & ~(CS))) (CI0 +=> S)=(0, 0);
if ((A & B & CI1 & ~(CS))) (CI0 +=> S)=(0, 0);
if ((~(A) & ~(B) & ~(CI0) & CS)) (CI1 +=> S)=(0, 0);
if ((~(A) & ~(B) & CI0 & CS)) (CI1 +=> S)=(0, 0);
if ((A & ~(B) & ~(CI0) & CS) | (~(A) & B & ~(CI0) & CS)) (CI1 -=> S)=(0, 0);
if ((A & ~(B) & CI0 & CS) | (~(A) & B & CI0 & CS)) (CI1 -=> S)=(0, 0);
if ((A & B & ~(CI0) & CS)) (CI1 +=> S)=(0, 0);
if ((A & B & CI0 & CS)) (CI1 +=> S)=(0, 0);
if ((A & ~(B) & ~(CI0) & CI1) | (~(A) & B & ~(CI0) & CI1)) (CS -=> S)=(0, 0);
if ((A & ~(B) & CI0 & ~(CI1)) | (~(A) & B & CI0 & ~(CI1))) (CS +=> S)=(0, 0);
if ((A & B & ~(CI0) & CI1) | (~(A) & ~(B) & ~(CI0) & CI1)) (CS +=> S)=(0, 0);
if ((A & B & CI0 & ~(CI1)) | (~(A) & ~(B) & CI0 & ~(CI1))) (CS -=> S)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ADDFCSCOB_L50_2

//%BEGIN SEH_ADDH_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ADDH_L50_1 (S, CO, A, B, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDH_L50_1 (S, CO, A, B, VDD, VSS);
   output S, CO;
   input A, B, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     xor #1 (S, A_org, B_org);
     and #1 (CO, A_org, B_org);

   `else
     xor (S, A_org, B_org);
     and (CO, A_org, B_org);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> CO)=(0, 0);
(B +=> CO)=(0, 0);
if (~(B)) (A +=> S)=(0, 0);
if (B) (A -=> S)=(0, 0);
if (~(A)) (B +=> S)=(0, 0);
if (A) (B -=> S)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_ADDH_L50_1

//%BEGIN SEH_ADDH_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ADDH_L50_2 (S, CO, A, B, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDH_L50_2 (S, CO, A, B, VDD, VSS);
   output S, CO;
   input A, B, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     xor #1 (S, A_org, B_org);
     and #1 (CO, A_org, B_org);

   `else
     xor (S, A_org, B_org);
     and (CO, A_org, B_org);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> CO)=(0, 0);
(B +=> CO)=(0, 0);
if (~(B)) (A +=> S)=(0, 0);
if (B) (A -=> S)=(0, 0);
if (~(A)) (B +=> S)=(0, 0);
if (A) (B -=> S)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_ADDH_L50_2

//%BEGIN SEH_ADDH_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_ADDH_L50_4 (S, CO, A, B, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDH_L50_4 (S, CO, A, B, VDD, VSS);
   output S, CO;
   input A, B, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     xor #1 (S, A_org, B_org);
     and #1 (CO, A_org, B_org);

   `else
     xor (S, A_org, B_org);
     and (CO, A_org, B_org);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> CO)=(0, 0);
(B +=> CO)=(0, 0);
if (~(B)) (A +=> S)=(0, 0);
if (B) (A -=> S)=(0, 0);
if (~(A)) (B +=> S)=(0, 0);
if (A) (B -=> S)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_ADDH_L50_4

//%BEGIN SEH_ADDH_DL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ADDH_DL50_1 (S, CO, A, B, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDH_DL50_1 (S, CO, A, B, VDD, VSS);
   output S, CO;
   input A, B, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     xor #1 (S, A_org, B_org);
     and #1 (CO, A_org, B_org);

   `else
     xor (S, A_org, B_org);
     and (CO, A_org, B_org);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> CO)=(0, 0);
(B +=> CO)=(0, 0);
if (~(B)) (A +=> S)=(0, 0);
if (B) (A -=> S)=(0, 0);
if (~(A)) (B +=> S)=(0, 0);
if (A) (B -=> S)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_ADDH_DL50_1

//%BEGIN SEH_ADDH_DL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ADDH_DL50_2 (S, CO, A, B, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDH_DL50_2 (S, CO, A, B, VDD, VSS);
   output S, CO;
   input A, B, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     xor #1 (S, A_org, B_org);
     and #1 (CO, A_org, B_org);

   `else
     xor (S, A_org, B_org);
     and (CO, A_org, B_org);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> CO)=(0, 0);
(B +=> CO)=(0, 0);
if (~(B)) (A +=> S)=(0, 0);
if (B) (A -=> S)=(0, 0);
if (~(A)) (B +=> S)=(0, 0);
if (A) (B -=> S)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_ADDH_DL50_2

//%BEGIN SEH_ADDHCOB_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ADDHCOB_L50_1 (S, CO, A, B, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDHCOB_L50_1 (S, CO, A, B, VDD, VSS);
   output S, CO;
   input A, B, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       xor #1 (S, A_org, B_org);
       nand #1 (CO, A_org, B_org);
   `else
       xor (S, A_org, B_org);
       nand (CO, A_org, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
(A -=> CO)=(0, 0);
(B -=> CO)=(0, 0);
if (~(B)) (A +=> S)=(0, 0);
if (B) (A -=> S)=(0, 0);
if (~(A)) (B +=> S)=(0, 0);
if (A) (B -=> S)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ADDHCOB_L50_1

//%BEGIN SEH_ADDHCOB_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ADDHCOB_L50_2 (S, CO, A, B, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDHCOB_L50_2 (S, CO, A, B, VDD, VSS);
   output S, CO;
   input A, B, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       xor #1 (S, A_org, B_org);
       nand #1 (CO, A_org, B_org);
   `else
       xor (S, A_org, B_org);
       nand (CO, A_org, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
(A -=> CO)=(0, 0);
(B -=> CO)=(0, 0);
if (~(B)) (A +=> S)=(0, 0);
if (B) (A -=> S)=(0, 0);
if (~(A)) (B +=> S)=(0, 0);
if (A) (B -=> S)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ADDHCOB_L50_2

//%BEGIN SEH_ADDHCSCOB_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ADDHCSCOB_L50_1 (S, CO0, CO1, A, B, CI, VDD, VSS, VBP, VBN);
   output S, CO0, CO1;
   input A, B, CI, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDHCSCOB_L50_1 (S, CO0, CO1, A, B, CI, VDD, VSS);
   output S, CO0, CO1;
   input A, B, CI, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////



   `ifdef VIRL_functiononly
       xor #1 (S, A_org, B_org, CI_org);
       nand #1 (CO0, A_org, B_org);
       nor #1 (CO1, A_org, B_org);
   `else
       xor (S, A_org, B_org, CI_org);
       nand (CO0, A_org, B_org);
       nor (CO1, A_org, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((A & ~(CI))) (B -=> CO0)=(0, 0);
if ((A & CI)) (B -=> CO0)=(0, 0);
if ((B & ~(CI))) (A -=> CO0)=(0, 0);
if ((B & CI)) (A -=> CO0)=(0, 0);
if ((~(A) & ~(CI))) (B -=> CO1)=(0, 0);
if ((~(A) & CI)) (B -=> CO1)=(0, 0);
if ((~(B) & ~(CI))) (A -=> CO1)=(0, 0);
if ((~(B) & CI)) (A -=> CO1)=(0, 0);
if ((~(A) & ~(CI))) (B +=> S)=(0, 0);
if ((~(A) & CI)) (B -=> S)=(0, 0);
if ((A & ~(CI))) (B -=> S)=(0, 0);
if ((A & CI)) (B +=> S)=(0, 0);
if ((~(B) & ~(CI))) (A +=> S)=(0, 0);
if ((~(B) & CI)) (A -=> S)=(0, 0);
if ((B & ~(CI))) (A -=> S)=(0, 0);
if ((B & CI)) (A +=> S)=(0, 0);
if ((~(A) & ~(B))) (CI +=> S)=(0, 0);
if ((~(A) & B)) (CI -=> S)=(0, 0);
if ((A & ~(B))) (CI -=> S)=(0, 0);
if ((A & B)) (CI +=> S)=(0, 0);
endspecify
   `endif 
endmodule
`endcelldefine

//%END SEH_ADDHCSCOB_L50_1

//%BEGIN SEH_ADDHCSCOB_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ADDHCSCOB_L50_2 (S, CO0, CO1, A, B, CI, VDD, VSS, VBP, VBN);
   output S, CO0, CO1;
   input A, B, CI, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ADDHCSCOB_L50_2 (S, CO0, CO1, A, B, CI, VDD, VSS);
   output S, CO0, CO1;
   input A, B, CI, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CI_org, CI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////



   `ifdef VIRL_functiononly
       xor #1 (S, A_org, B_org, CI_org);
       nand #1 (CO0, A_org, B_org);
       nor #1 (CO1, A_org, B_org);
   `else
       xor (S, A_org, B_org, CI_org);
       nand (CO0, A_org, B_org);
       nor (CO1, A_org, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((A & ~(CI))) (B -=> CO0)=(0, 0);
if ((A & CI)) (B -=> CO0)=(0, 0);
if ((B & ~(CI))) (A -=> CO0)=(0, 0);
if ((B & CI)) (A -=> CO0)=(0, 0);
if ((~(A) & ~(CI))) (B -=> CO1)=(0, 0);
if ((~(A) & CI)) (B -=> CO1)=(0, 0);
if ((~(B) & ~(CI))) (A -=> CO1)=(0, 0);
if ((~(B) & CI)) (A -=> CO1)=(0, 0);
if ((~(A) & ~(CI))) (B +=> S)=(0, 0);
if ((~(A) & CI)) (B -=> S)=(0, 0);
if ((A & ~(CI))) (B -=> S)=(0, 0);
if ((A & CI)) (B +=> S)=(0, 0);
if ((~(B) & ~(CI))) (A +=> S)=(0, 0);
if ((~(B) & CI)) (A -=> S)=(0, 0);
if ((B & ~(CI))) (A -=> S)=(0, 0);
if ((B & CI)) (A +=> S)=(0, 0);
if ((~(A) & ~(B))) (CI +=> S)=(0, 0);
if ((~(A) & B)) (CI -=> S)=(0, 0);
if ((A & ~(B))) (CI -=> S)=(0, 0);
if ((A & B)) (CI +=> S)=(0, 0);
endspecify
   `endif 
endmodule
`endcelldefine

//%END SEH_ADDHCSCOB_L50_2

//%BEGIN SEH_AN2_DGL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AN2_DGL50_1 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN2_DGL50_1 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     and #1 (X, A1_org, A2_org);
   `else
     and  (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN2_DGL50_1

//%BEGIN SEH_AN2_DGL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AN2_DGL50_2 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN2_DGL50_2 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     and #1 (X, A1_org, A2_org);
   `else
     and  (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN2_DGL50_2

//%BEGIN SEH_AN2_SL50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_AN2_SL50_0P5 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN2_SL50_0P5 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     and #1 (X, A1_org, A2_org);
   `else
     and  (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN2_SL50_0P5

//%BEGIN SEH_AN2_SL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AN2_SL50_1 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN2_SL50_1 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     and #1 (X, A1_org, A2_org);
   `else
     and  (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN2_SL50_1

//%BEGIN SEH_AN2_SL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AN2_SL50_2 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN2_SL50_2 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     and #1 (X, A1_org, A2_org);
   `else
     and  (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN2_SL50_2

//%BEGIN SEH_AN2_SL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AN2_SL50_4 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN2_SL50_4 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     and #1 (X, A1_org, A2_org);
   `else
     and  (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN2_SL50_4

//%BEGIN SEH_AN2_SL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_AN2_SL50_8 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN2_SL50_8 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     and #1 (X, A1_org, A2_org);
   `else
     and  (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN2_SL50_8

//%BEGIN SEH_AN2_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AN2_L50_1 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN2_L50_1 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     and #1 (X, A1_org, A2_org);
   `else
     and  (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN2_L50_1

//%BEGIN SEH_AN2_L50_1P5

`celldefine
`ifdef BIAS_PINS
module SEH_AN2_L50_1P5 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN2_L50_1P5 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     and #1 (X, A1_org, A2_org);
   `else
     and  (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN2_L50_1P5

//%BEGIN SEH_AN2_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AN2_L50_2 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN2_L50_2 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     and #1 (X, A1_org, A2_org);
   `else
     and  (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN2_L50_2

//%BEGIN SEH_AN2_L50_3

`celldefine
`ifdef BIAS_PINS
module SEH_AN2_L50_3 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN2_L50_3 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     and #1 (X, A1_org, A2_org);
   `else
     and  (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN2_L50_3

//%BEGIN SEH_AN2_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AN2_L50_4 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN2_L50_4 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     and #1 (X, A1_org, A2_org);
   `else
     and  (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN2_L50_4

//%BEGIN SEH_AN2_L50_5

`celldefine
`ifdef BIAS_PINS
module SEH_AN2_L50_5 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN2_L50_5 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     and #1 (X, A1_org, A2_org);
   `else
     and  (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN2_L50_5

//%BEGIN SEH_AN2_L50_6

`celldefine
`ifdef BIAS_PINS
module SEH_AN2_L50_6 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN2_L50_6 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     and #1 (X, A1_org, A2_org);
   `else
     and  (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN2_L50_6

//%BEGIN SEH_AN2_L50_8

`celldefine
`ifdef BIAS_PINS
module SEH_AN2_L50_8 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN2_L50_8 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     and #1 (X, A1_org, A2_org);
   `else
     and  (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN2_L50_8

//%BEGIN SEH_AN3_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AN3_L50_1 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN3_L50_1 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      and #1 (X, A1_org, A2_org, A3_org);
   `else
      and (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN3_L50_1

//%BEGIN SEH_AN3_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AN3_L50_2 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN3_L50_2 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      and #1 (X, A1_org, A2_org, A3_org);
   `else
      and (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN3_L50_2

//%BEGIN SEH_AN3_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AN3_L50_4 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN3_L50_4 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      and #1 (X, A1_org, A2_org, A3_org);
   `else
      and (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN3_L50_4

//%BEGIN SEH_AN3_L50_8

`celldefine
`ifdef BIAS_PINS
module SEH_AN3_L50_8 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN3_L50_8 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      and #1 (X, A1_org, A2_org, A3_org);
   `else
      and (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN3_L50_8

//%BEGIN SEH_AN3B_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_AN3B_L50_0P5 (X, A, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN3B_L50_0P5 (X, A, B1, B2, VDD, VSS);
   output X;
   input A, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      and #1 (X, int_res_0, B1_org, B2_org);
   `else
      and (X, int_res_0, B1_org, B2_org);
   `endif

  `ifdef VIRL_functiononly

  `else


specify
(A -=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_AN3B_L50_0P5

//%BEGIN SEH_AN3B_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AN3B_L50_1 (X, A, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN3B_L50_1 (X, A, B1, B2, VDD, VSS);
   output X;
   input A, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      and #1 (X, int_res_0, B1_org, B2_org);
   `else
      and (X, int_res_0, B1_org, B2_org);
   `endif

  `ifdef VIRL_functiononly

  `else


specify
(A -=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_AN3B_L50_1

//%BEGIN SEH_AN3B_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AN3B_L50_2 (X, A, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN3B_L50_2 (X, A, B1, B2, VDD, VSS);
   output X;
   input A, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      and #1 (X, int_res_0, B1_org, B2_org);
   `else
      and (X, int_res_0, B1_org, B2_org);
   `endif

  `ifdef VIRL_functiononly

  `else


specify
(A -=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_AN3B_L50_2

//%BEGIN SEH_AN3B_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AN3B_L50_4 (X, A, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN3B_L50_4 (X, A, B1, B2, VDD, VSS);
   output X;
   input A, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      and #1 (X, int_res_0, B1_org, B2_org);
   `else
      and (X, int_res_0, B1_org, B2_org);
   `endif

  `ifdef VIRL_functiononly

  `else


specify
(A -=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_AN3B_L50_4

//%BEGIN SEH_AN4_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AN4_L50_1 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN4_L50_1 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      and #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
      and (X, A1_org, A2_org, A3_org, A4_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
(A4 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN4_L50_1

//%BEGIN SEH_AN4_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AN4_L50_2 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN4_L50_2 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      and #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
      and (X, A1_org, A2_org, A3_org, A4_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
(A4 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN4_L50_2

//%BEGIN SEH_AN4_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AN4_L50_4 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN4_L50_4 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      and #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
      and (X, A1_org, A2_org, A3_org, A4_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
(A4 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN4_L50_4

//%BEGIN SEH_AN4B_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_AN4B_L50_0P5 (X, A, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN4B_L50_0P5 (X, A, B1, B2, B3, VDD, VSS);
   output X;
   input A, B1, B2, B3, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      and #1 (X, int_res_0, B1_org, B2_org, B3_org);
   `else
      and (X, int_res_0, B1_org, B2_org, B3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A -=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
(B3 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN4B_L50_0P5

//%BEGIN SEH_AN4B_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AN4B_L50_1 (X, A, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN4B_L50_1 (X, A, B1, B2, B3, VDD, VSS);
   output X;
   input A, B1, B2, B3, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      and #1 (X, int_res_0, B1_org, B2_org, B3_org);
   `else
      and (X, int_res_0, B1_org, B2_org, B3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A -=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
(B3 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN4B_L50_1

//%BEGIN SEH_AN4B_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AN4B_L50_2 (X, A, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN4B_L50_2 (X, A, B1, B2, B3, VDD, VSS);
   output X;
   input A, B1, B2, B3, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      and #1 (X, int_res_0, B1_org, B2_org, B3_org);
   `else
      and (X, int_res_0, B1_org, B2_org, B3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A -=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
(B3 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN4B_L50_2

//%BEGIN SEH_AN4B_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AN4B_L50_4 (X, A, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN4B_L50_4 (X, A, B1, B2, B3, VDD, VSS);
   output X;
   input A, B1, B2, B3, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      and #1 (X, int_res_0, B1_org, B2_org, B3_org);
   `else
      and (X, int_res_0, B1_org, B2_org, B3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A -=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
(B3 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN4B_L50_4

//%BEGIN SEH_AN6_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AN6_L50_1 (X, A1, A2, A3, A4, A5, A6, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, A5, A6, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A5_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A5_org, A5, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A6_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A6_org, A6, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN6_L50_1 (X, A1, A2, A3, A4, A5, A6, VDD, VSS);
   output X;
   input A1, A2, A3, A4, A5, A6, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A5_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A5_org, A5, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A6_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A6_org, A6, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      and #1 (X, A1_org, A2_org, A3_org, A4_org, A5_org, A6_org);
   `else
      and (X, A1_org, A2_org, A3_org, A4_org, A5_org, A6_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
(A4 +=> X)=(0, 0);
(A5 +=> X)=(0, 0);
(A6 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN6_L50_1

//%BEGIN SEH_AN6_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AN6_L50_2 (X, A1, A2, A3, A4, A5, A6, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, A5, A6, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A5_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A5_org, A5, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A6_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A6_org, A6, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AN6_L50_2 (X, A1, A2, A3, A4, A5, A6, VDD, VSS);
   output X;
   input A1, A2, A3, A4, A5, A6, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A5_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A5_org, A5, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A6_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A6_org, A6, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      and #1 (X, A1_org, A2_org, A3_org, A4_org, A5_org, A6_org);
   `else
      and (X, A1_org, A2_org, A3_org, A4_org, A5_org, A6_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
(A4 +=> X)=(0, 0);
(A5 +=> X)=(0, 0);
(A6 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AN6_L50_2

//%BEGIN SEH_AO211_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AO211_L50_1 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO211_L50_1 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, B1_org, B2_org);
   `else
      or (X, int_res_0, B1_org, B2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO211_L50_1

//%BEGIN SEH_AO211_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AO211_L50_2 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO211_L50_2 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, B1_org, B2_org);
   `else
      or (X, int_res_0, B1_org, B2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO211_L50_2

//%BEGIN SEH_AO211_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AO211_L50_4 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO211_L50_4 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, B1_org, B2_org);
   `else
      or (X, int_res_0, B1_org, B2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO211_L50_4

//%BEGIN SEH_AO21_DGL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AO21_DGL50_1 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO21_DGL50_1 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, B_org);
   `else
      or (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B +=> X)=(0, 0);
if ((~(A1) & A2)) (B +=> X)=(0, 0);
if ((A1 & ~(A2))) (B +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO21_DGL50_1

//%BEGIN SEH_AO21_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AO21_L50_1 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO21_L50_1 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, B_org);
   `else
      or (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B +=> X)=(0, 0);
if ((~(A1) & A2)) (B +=> X)=(0, 0);
if ((A1 & ~(A2))) (B +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO21_L50_1

//%BEGIN SEH_AO21_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AO21_L50_2 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO21_L50_2 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, B_org);
   `else
      or (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B +=> X)=(0, 0);
if ((~(A1) & A2)) (B +=> X)=(0, 0);
if ((A1 & ~(A2))) (B +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO21_L50_2

//%BEGIN SEH_AO21_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AO21_L50_4 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO21_L50_4 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, B_org);
   `else
      or (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B +=> X)=(0, 0);
if ((~(A1) & A2)) (B +=> X)=(0, 0);
if ((A1 & ~(A2))) (B +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO21_L50_4

//%BEGIN SEH_AO21B_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AO21B_L50_1 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO21B_L50_1 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   not (int_res_1, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     or #1 (X, int_res_0, int_res_1);
   `else
     or (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO21B_L50_1

//%BEGIN SEH_AO21B_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AO21B_L50_2 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO21B_L50_2 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   not (int_res_1, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     or #1 (X, int_res_0, int_res_1);
   `else
     or (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO21B_L50_2

//%BEGIN SEH_AO21B_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AO21B_L50_4 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO21B_L50_4 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   not (int_res_1, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     or #1 (X, int_res_0, int_res_1);
   `else
     or (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO21B_L50_4

//%BEGIN SEH_AO221_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_AO221_L50_0P5 (X, A1, A2, B1, B2, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO221_L50_0P5 (X, A1, A2, B1, B2, C, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, int_res_1, C_org);
   `else
      or (X, int_res_0, int_res_1, C_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & ~(B1) & ~(B2))) (C +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2))) (C +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & ~(B2)) | (~(A1) & ~(A2) & ~(B1) & B2)) (C +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2)) (C +=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2))) (C +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & ~(B2))) (C +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2)) (C +=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2))) (C +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(C))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(C))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(C))) (B2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2 & ~(C))) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & B2 & ~(C))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & ~(C))) (B1 +=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2) & ~(C))) (A2 +=> X)=(0, 0);
if ((A1 & ~(B1) & B2 & ~(C))) (A2 +=> X)=(0, 0);
if ((A1 & B1 & ~(B2) & ~(C))) (A2 +=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2) & ~(C))) (A1 +=> X)=(0, 0);
if ((A2 & ~(B1) & B2 & ~(C))) (A1 +=> X)=(0, 0);
if ((A2 & B1 & ~(B2) & ~(C))) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO221_L50_0P5

//%BEGIN SEH_AO221_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AO221_L50_1 (X, A1, A2, B1, B2, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO221_L50_1 (X, A1, A2, B1, B2, C, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, int_res_1, C_org);
   `else
      or (X, int_res_0, int_res_1, C_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & ~(B1) & ~(B2))) (C +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2))) (C +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & ~(B2)) | (~(A1) & ~(A2) & ~(B1) & B2)) (C +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2)) (C +=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2))) (C +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & ~(B2))) (C +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2)) (C +=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2))) (C +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(C))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(C))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(C))) (B2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2 & ~(C))) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & B2 & ~(C))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & ~(C))) (B1 +=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2) & ~(C))) (A2 +=> X)=(0, 0);
if ((A1 & ~(B1) & B2 & ~(C))) (A2 +=> X)=(0, 0);
if ((A1 & B1 & ~(B2) & ~(C))) (A2 +=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2) & ~(C))) (A1 +=> X)=(0, 0);
if ((A2 & ~(B1) & B2 & ~(C))) (A1 +=> X)=(0, 0);
if ((A2 & B1 & ~(B2) & ~(C))) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO221_L50_1

//%BEGIN SEH_AO221_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AO221_L50_2 (X, A1, A2, B1, B2, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO221_L50_2 (X, A1, A2, B1, B2, C, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, int_res_1, C_org);
   `else
      or (X, int_res_0, int_res_1, C_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & ~(B1) & ~(B2))) (C +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2))) (C +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & ~(B2)) | (~(A1) & ~(A2) & ~(B1) & B2)) (C +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2)) (C +=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2))) (C +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & ~(B2))) (C +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2)) (C +=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2))) (C +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(C))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(C))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(C))) (B2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2 & ~(C))) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & B2 & ~(C))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & ~(C))) (B1 +=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2) & ~(C))) (A2 +=> X)=(0, 0);
if ((A1 & ~(B1) & B2 & ~(C))) (A2 +=> X)=(0, 0);
if ((A1 & B1 & ~(B2) & ~(C))) (A2 +=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2) & ~(C))) (A1 +=> X)=(0, 0);
if ((A2 & ~(B1) & B2 & ~(C))) (A1 +=> X)=(0, 0);
if ((A2 & B1 & ~(B2) & ~(C))) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO221_L50_2

//%BEGIN SEH_AO2222_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AO2222_L50_1 (X, A1, A2, B1, B2, C1, C2, D1, D2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C1, C2, D1, D2, VDD, VSS, VBP, VBN;
   wire int_res_0, int_res_1, int_res_2, int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D2_org, D2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO2222_L50_1 (X, A1, A2, B1, B2, C1, C2, D1, D2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C1, C2, D1, D2, VDD, VSS;
   wire int_res_0, int_res_1, int_res_2, int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D2_org, D2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);
   and (int_res_2, C1_org, C2_org);
   and (int_res_3, D1_org, D2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, int_res_1, int_res_2, int_res_3);

   `else
      or  (X, int_res_0, int_res_1, int_res_2, int_res_3);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
(C1 +=> X)=(0, 0);
(C2 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
(D2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO2222_L50_1

//%BEGIN SEH_AO2222_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AO2222_L50_2 (X, A1, A2, B1, B2, C1, C2, D1, D2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C1, C2, D1, D2, VDD, VSS, VBP, VBN;
   wire int_res_0, int_res_1, int_res_2, int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D2_org, D2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO2222_L50_2 (X, A1, A2, B1, B2, C1, C2, D1, D2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C1, C2, D1, D2, VDD, VSS;
   wire int_res_0, int_res_1, int_res_2, int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D2_org, D2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);
   and (int_res_2, C1_org, C2_org);
   and (int_res_3, D1_org, D2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, int_res_1, int_res_2, int_res_3);

   `else
      or  (X, int_res_0, int_res_1, int_res_2, int_res_3);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
(C1 +=> X)=(0, 0);
(C2 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
(D2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO2222_L50_2

//%BEGIN SEH_AO2222_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AO2222_L50_4 (X, A1, A2, B1, B2, C1, C2, D1, D2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C1, C2, D1, D2, VDD, VSS, VBP, VBN;
   wire int_res_0, int_res_1, int_res_2, int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D2_org, D2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO2222_L50_4 (X, A1, A2, B1, B2, C1, C2, D1, D2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C1, C2, D1, D2, VDD, VSS;
   wire int_res_0, int_res_1, int_res_2, int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D2_org, D2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);
   and (int_res_2, C1_org, C2_org);
   and (int_res_3, D1_org, D2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, int_res_1, int_res_2, int_res_3);

   `else
      or  (X, int_res_0, int_res_1, int_res_2, int_res_3);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
(C1 +=> X)=(0, 0);
(C2 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
(D2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO2222_L50_4

//%BEGIN SEH_AO222_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AO222_L50_1 (X, A1, A2, B1, B2, C1, C2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C1, C2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO222_L50_1 (X, A1, A2, B1, B2, C1, C2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C1, C2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);
   and (int_res_2, C1_org, C2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, int_res_1, int_res_2);
   `else
      or  (X, int_res_0, int_res_1, int_res_2);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
(C1 +=> X)=(0, 0);
(C2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO222_L50_1

//%BEGIN SEH_AO222_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AO222_L50_2 (X, A1, A2, B1, B2, C1, C2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C1, C2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO222_L50_2 (X, A1, A2, B1, B2, C1, C2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C1, C2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);
   and (int_res_2, C1_org, C2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, int_res_1, int_res_2);
   `else
      or  (X, int_res_0, int_res_1, int_res_2);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
(C1 +=> X)=(0, 0);
(C2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO222_L50_2

//%BEGIN SEH_AO22_DGL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AO22_DGL50_1 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO22_DGL50_1 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, int_res_1);
   `else
      or  (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & B1)) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2)) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 +=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2))) (A2 +=> X)=(0, 0);
if ((A1 & ~(B1) & B2)) (A2 +=> X)=(0, 0);
if ((A1 & B1 & ~(B2))) (A2 +=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2))) (A1 +=> X)=(0, 0);
if ((A2 & ~(B1) & B2)) (A1 +=> X)=(0, 0);
if ((A2 & B1 & ~(B2))) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO22_DGL50_1

//%BEGIN SEH_AO22_DGL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AO22_DGL50_2 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO22_DGL50_2 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, int_res_1);
   `else
      or  (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & B1)) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2)) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 +=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2))) (A2 +=> X)=(0, 0);
if ((A1 & ~(B1) & B2)) (A2 +=> X)=(0, 0);
if ((A1 & B1 & ~(B2))) (A2 +=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2))) (A1 +=> X)=(0, 0);
if ((A2 & ~(B1) & B2)) (A1 +=> X)=(0, 0);
if ((A2 & B1 & ~(B2))) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO22_DGL50_2

//%BEGIN SEH_AO22_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AO22_L50_1 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO22_L50_1 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, int_res_1);
   `else
      or  (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO22_L50_1

//%BEGIN SEH_AO22_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AO22_L50_2 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO22_L50_2 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, int_res_1);
   `else
      or  (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO22_L50_2

//%BEGIN SEH_AO22_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AO22_L50_4 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO22_L50_4 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, int_res_1);
   `else
      or  (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AO22_L50_4

//%BEGIN SEH_AO2BB2_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AO2BB2_L50_1 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO2BB2_L50_1 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A1_org);
   not (int_res_1, A2_org);
   and (int_res_2, int_res_0, int_res_1);
   and (int_res_3, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_2, int_res_3);
   `else
      or (X, int_res_2, int_res_3);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 +=> X)=(0, 0);
if ((A1 & A2 & B1)) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 +=> X)=(0, 0);
if ((A1 & A2 & B2)) (B1 +=> X)=(0, 0);
endspecify
   `endif
 
endmodule
`endcelldefine

//%END SEH_AO2BB2_L50_1

//%BEGIN SEH_AO2BB2_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AO2BB2_L50_2 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO2BB2_L50_2 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A1_org);
   not (int_res_1, A2_org);
   and (int_res_2, int_res_0, int_res_1);
   and (int_res_3, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_2, int_res_3);
   `else
      or (X, int_res_2, int_res_3);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 +=> X)=(0, 0);
if ((A1 & A2 & B1)) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 +=> X)=(0, 0);
if ((A1 & A2 & B2)) (B1 +=> X)=(0, 0);
endspecify
   `endif
 
endmodule
`endcelldefine

//%END SEH_AO2BB2_L50_2

//%BEGIN SEH_AO2BB2_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AO2BB2_L50_4 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO2BB2_L50_4 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A1_org);
   not (int_res_1, A2_org);
   and (int_res_2, int_res_0, int_res_1);
   and (int_res_3, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_2, int_res_3);
   `else
      or (X, int_res_2, int_res_3);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 +=> X)=(0, 0);
if ((A1 & A2 & B1)) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 +=> X)=(0, 0);
if ((A1 & A2 & B2)) (B1 +=> X)=(0, 0);
endspecify
   `endif
 
endmodule
`endcelldefine

//%END SEH_AO2BB2_L50_4

//%BEGIN SEH_AO2BB2_DGL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AO2BB2_DGL50_1 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO2BB2_DGL50_1 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A1_org);
   not (int_res_1, A2_org);
   and (int_res_2, int_res_0, int_res_1);
   and (int_res_3, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_2, int_res_3);
   `else
      or (X, int_res_2, int_res_3);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 +=> X)=(0, 0);
if ((A1 & A2 & B1)) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 +=> X)=(0, 0);
if ((A1 & A2 & B2)) (B1 +=> X)=(0, 0);
endspecify
   `endif
 
endmodule
`endcelldefine

//%END SEH_AO2BB2_DGL50_1

//%BEGIN SEH_AO2BB2_DGL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AO2BB2_DGL50_2 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO2BB2_DGL50_2 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A1_org);
   not (int_res_1, A2_org);
   and (int_res_2, int_res_0, int_res_1);
   and (int_res_3, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_2, int_res_3);
   `else
      or (X, int_res_2, int_res_3);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 +=> X)=(0, 0);
if ((A1 & A2 & B1)) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 +=> X)=(0, 0);
if ((A1 & A2 & B2)) (B1 +=> X)=(0, 0);
endspecify
   `endif
 
endmodule
`endcelldefine

//%END SEH_AO2BB2_DGL50_2

//%BEGIN SEH_AO31_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AO31_L50_1 (X, A1, A2, A3, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO31_L50_1 (X, A1, A2, A3, B, VDD, VSS);
   output X;
   input A1, A2, A3, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, B_org);
   `else
      or (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(A3))) (B +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3)) | (~(A1) & ~(A2) & A3)) (B +=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (B +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (B +=> X)=(0, 0);
if ((A1 & ~(A2) & A3)) (B +=> X)=(0, 0);
if ((A1 & A2 & ~(A3))) (B +=> X)=(0, 0);
endspecify
   `endif
 
endmodule
`endcelldefine

//%END SEH_AO31_L50_1

//%BEGIN SEH_AO31_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AO31_L50_2 (X, A1, A2, A3, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO31_L50_2 (X, A1, A2, A3, B, VDD, VSS);
   output X;
   input A1, A2, A3, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, B_org);
   `else
      or (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(A3))) (B +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3)) | (~(A1) & ~(A2) & A3)) (B +=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (B +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (B +=> X)=(0, 0);
if ((A1 & ~(A2) & A3)) (B +=> X)=(0, 0);
if ((A1 & A2 & ~(A3))) (B +=> X)=(0, 0);
endspecify
   `endif
 
endmodule
`endcelldefine

//%END SEH_AO31_L50_2

//%BEGIN SEH_AO31_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AO31_L50_4 (X, A1, A2, A3, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO31_L50_4 (X, A1, A2, A3, B, VDD, VSS);
   output X;
   input A1, A2, A3, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, B_org);
   `else
      or (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(A3))) (B +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3)) | (~(A1) & ~(A2) & A3)) (B +=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (B +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (B +=> X)=(0, 0);
if ((A1 & ~(A2) & A3)) (B +=> X)=(0, 0);
if ((A1 & A2 & ~(A3))) (B +=> X)=(0, 0);
endspecify
   `endif
 
endmodule
`endcelldefine

//%END SEH_AO31_L50_4

//%BEGIN SEH_AO32_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_AO32_L50_0P5 (X, A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO32_L50_0P5 (X, A1, A2, A3, B1, B2, VDD, VSS);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org, A3_org);
   and (int_res_1, B1_org, B2_org);
   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, int_res_1);     
   `else
      or (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A1) & ~(A2) & ~(A3) & B1)) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B1) | (~(A1) & ~(A2) & A3 & B1)) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B1)) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B1)) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B1)) (B2 +=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B1)) (B2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(A3) & B2)) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B2) | (~(A1) & ~(A2) & A3 & B2)) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B2)) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B2)) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B2)) (B1 +=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B2)) (B1 +=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & ~(B2))) (A3 +=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2)) (A3 +=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2))) (A3 +=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & ~(B2))) (A2 +=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & B2)) (A2 +=> X)=(0, 0);
if ((A1 & A3 & B1 & ~(B2))) (A2 +=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & ~(B2))) (A1 +=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & B2)) (A1 +=> X)=(0, 0);
if ((A2 & A3 & B1 & ~(B2))) (A1 +=> X)=(0, 0);
endspecify
   `endif 
endmodule
`endcelldefine

//%END SEH_AO32_L50_0P5

//%BEGIN SEH_AO32_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AO32_L50_1 (X, A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO32_L50_1 (X, A1, A2, A3, B1, B2, VDD, VSS);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org, A3_org);
   and (int_res_1, B1_org, B2_org);
   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, int_res_1);     
   `else
      or (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A1) & ~(A2) & ~(A3) & B1)) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B1) | (~(A1) & ~(A2) & A3 & B1)) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B1)) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B1)) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B1)) (B2 +=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B1)) (B2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(A3) & B2)) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B2) | (~(A1) & ~(A2) & A3 & B2)) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B2)) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B2)) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B2)) (B1 +=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B2)) (B1 +=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & ~(B2))) (A3 +=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2)) (A3 +=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2))) (A3 +=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & ~(B2))) (A2 +=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & B2)) (A2 +=> X)=(0, 0);
if ((A1 & A3 & B1 & ~(B2))) (A2 +=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & ~(B2))) (A1 +=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & B2)) (A1 +=> X)=(0, 0);
if ((A2 & A3 & B1 & ~(B2))) (A1 +=> X)=(0, 0);
endspecify
   `endif 
endmodule
`endcelldefine

//%END SEH_AO32_L50_1

//%BEGIN SEH_AO32_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AO32_L50_2 (X, A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AO32_L50_2 (X, A1, A2, A3, B1, B2, VDD, VSS);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org, A3_org);
   and (int_res_1, B1_org, B2_org);
   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, int_res_1);     
   `else
      or (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A1) & ~(A2) & ~(A3) & B1)) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B1) | (~(A1) & ~(A2) & A3 & B1)) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B1)) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B1)) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B1)) (B2 +=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B1)) (B2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(A3) & B2)) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B2) | (~(A1) & ~(A2) & A3 & B2)) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B2)) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B2)) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B2)) (B1 +=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B2)) (B1 +=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & ~(B2))) (A3 +=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2)) (A3 +=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2))) (A3 +=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & ~(B2))) (A2 +=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & B2)) (A2 +=> X)=(0, 0);
if ((A1 & A3 & B1 & ~(B2))) (A2 +=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & ~(B2))) (A1 +=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & B2)) (A1 +=> X)=(0, 0);
if ((A2 & A3 & B1 & ~(B2))) (A1 +=> X)=(0, 0);
endspecify
   `endif 
endmodule
`endcelldefine

//%END SEH_AO32_L50_2

//%BEGIN SEH_AOA211_DGL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AOA211_DGL50_1 (X, A1, A2, B, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOA211_DGL50_1 (X, A1, A2, B, C, VDD, VSS);
   output X;
   input A1, A2, B, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   or (int_res_1, int_res_0, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       and #1 (X, int_res_1, C_org);
   `else
       and (X, int_res_1, C_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & C)) (B +=> X)=(0, 0);
if ((~(A1) & A2 & C)) (B +=> X)=(0, 0);
if ((A1 & ~(A2) & C)) (B +=> X)=(0, 0);
if ((~(A1) & B)) (C +=> X)=(0, 0);
if ((A1 & ~(A2) & B)) (C +=> X)=(0, 0);
if ((A1 & A2 & ~(B))) (C +=> X)=(0, 0);
if ((A1 & A2 & B)) (C +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOA211_DGL50_1

//%BEGIN SEH_AOA211_DGL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AOA211_DGL50_2 (X, A1, A2, B, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOA211_DGL50_2 (X, A1, A2, B, C, VDD, VSS);
   output X;
   input A1, A2, B, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   or (int_res_1, int_res_0, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       and #1 (X, int_res_1, C_org);
   `else
       and (X, int_res_1, C_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & C)) (B +=> X)=(0, 0);
if ((~(A1) & A2 & C)) (B +=> X)=(0, 0);
if ((A1 & ~(A2) & C)) (B +=> X)=(0, 0);
if ((~(A1) & B)) (C +=> X)=(0, 0);
if ((A1 & ~(A2) & B)) (C +=> X)=(0, 0);
if ((A1 & A2 & ~(B))) (C +=> X)=(0, 0);
if ((A1 & A2 & B)) (C +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOA211_DGL50_2

//%BEGIN SEH_AOA211_DGL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AOA211_DGL50_4 (X, A1, A2, B, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOA211_DGL50_4 (X, A1, A2, B, C, VDD, VSS);
   output X;
   input A1, A2, B, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   or (int_res_1, int_res_0, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       and #1 (X, int_res_1, C_org);
   `else
       and (X, int_res_1, C_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & C)) (B +=> X)=(0, 0);
if ((~(A1) & A2 & C)) (B +=> X)=(0, 0);
if ((A1 & ~(A2) & C)) (B +=> X)=(0, 0);
if ((~(A1) & B)) (C +=> X)=(0, 0);
if ((A1 & ~(A2) & B)) (C +=> X)=(0, 0);
if ((A1 & A2 & ~(B))) (C +=> X)=(0, 0);
if ((A1 & A2 & B)) (C +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOA211_DGL50_4

//%BEGIN SEH_AOAI211_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_AOAI211_L50_0P5 (X, A1, A2, B, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOAI211_L50_0P5 (X, A1, A2, B, C, VDD, VSS);
   output X;
   input A1, A2, B, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   or (int_res_1, int_res_0, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      nand #1 (X, int_res_1, C_org);
   `else
      nand (X, int_res_1, C_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & C)) (B -=> X)=(0, 0);
if ((~(A1) & A2 & C)) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & C)) (B -=> X)=(0, 0);
if ((~(A1) & B)) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & B)) (C -=> X)=(0, 0);
if ((A1 & A2 & ~(B))) (C -=> X)=(0, 0);
if ((A1 & A2 & B)) (C -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOAI211_L50_0P5

//%BEGIN SEH_AOAI211_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AOAI211_L50_1 (X, A1, A2, B, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOAI211_L50_1 (X, A1, A2, B, C, VDD, VSS);
   output X;
   input A1, A2, B, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   or (int_res_1, int_res_0, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      nand #1 (X, int_res_1, C_org);
   `else
      nand (X, int_res_1, C_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & C)) (B -=> X)=(0, 0);
if ((~(A1) & A2 & C)) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & C)) (B -=> X)=(0, 0);
if ((~(A1) & B)) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & B)) (C -=> X)=(0, 0);
if ((A1 & A2 & ~(B))) (C -=> X)=(0, 0);
if ((A1 & A2 & B)) (C -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOAI211_L50_1

//%BEGIN SEH_AOAI211_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AOAI211_L50_2 (X, A1, A2, B, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOAI211_L50_2 (X, A1, A2, B, C, VDD, VSS);
   output X;
   input A1, A2, B, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   or (int_res_1, int_res_0, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      nand #1 (X, int_res_1, C_org);
   `else
      nand (X, int_res_1, C_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & C)) (B -=> X)=(0, 0);
if ((~(A1) & A2 & C)) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & C)) (B -=> X)=(0, 0);
if ((~(A1) & B)) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & B)) (C -=> X)=(0, 0);
if ((A1 & A2 & ~(B))) (C -=> X)=(0, 0);
if ((A1 & A2 & B)) (C -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOAI211_L50_2

//%BEGIN SEH_AOAI211_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AOAI211_L50_4 (X, A1, A2, B, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOAI211_L50_4 (X, A1, A2, B, C, VDD, VSS);
   output X;
   input A1, A2, B, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   or (int_res_1, int_res_0, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      nand #1 (X, int_res_1, C_org);
   `else
      nand (X, int_res_1, C_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & C)) (B -=> X)=(0, 0);
if ((~(A1) & A2 & C)) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & C)) (B -=> X)=(0, 0);
if ((~(A1) & B)) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & B)) (C -=> X)=(0, 0);
if ((A1 & A2 & ~(B))) (C -=> X)=(0, 0);
if ((A1 & A2 & B)) (C -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOAI211_L50_4

//%BEGIN SEH_AOAI211_GL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AOAI211_GL50_1 (X, A1, A2, B, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOAI211_GL50_1 (X, A1, A2, B, C, VDD, VSS);
   output X;
   input A1, A2, B, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   or (int_res_1, int_res_0, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      nand #1 (X, int_res_1, C_org);
   `else
      nand (X, int_res_1, C_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & C)) (B -=> X)=(0, 0);
if ((~(A1) & A2 & C)) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & C)) (B -=> X)=(0, 0);
if ((~(A1) & B)) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & B)) (C -=> X)=(0, 0);
if ((A1 & A2 & ~(B))) (C -=> X)=(0, 0);
if ((A1 & A2 & B)) (C -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOAI211_GL50_1

//%BEGIN SEH_AOAI211_GL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AOAI211_GL50_2 (X, A1, A2, B, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOAI211_GL50_2 (X, A1, A2, B, C, VDD, VSS);
   output X;
   input A1, A2, B, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   or (int_res_1, int_res_0, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      nand #1 (X, int_res_1, C_org);
   `else
      nand (X, int_res_1, C_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & C)) (B -=> X)=(0, 0);
if ((~(A1) & A2 & C)) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & C)) (B -=> X)=(0, 0);
if ((~(A1) & B)) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & B)) (C -=> X)=(0, 0);
if ((A1 & A2 & ~(B))) (C -=> X)=(0, 0);
if ((A1 & A2 & B)) (C -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOAI211_GL50_2

//%BEGIN SEH_AOI211_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_AOI211_L50_0P5 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI211_L50_0P5 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

  `ifdef VIRL_functiononly
     nor #1 (X, int_res_0, B1_org, B2_org);
  `else
     nor (X, int_res_0, B1_org, B2_org);
  `endif

  `ifdef VIRL_functiononly

  `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_AOI211_L50_0P5

//%BEGIN SEH_AOI211_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AOI211_L50_1 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI211_L50_1 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

  `ifdef VIRL_functiononly
     nor #1 (X, int_res_0, B1_org, B2_org);
  `else
     nor (X, int_res_0, B1_org, B2_org);
  `endif

  `ifdef VIRL_functiononly

  `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_AOI211_L50_1

//%BEGIN SEH_AOI211_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AOI211_L50_2 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI211_L50_2 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

  `ifdef VIRL_functiononly
     nor #1 (X, int_res_0, B1_org, B2_org);
  `else
     nor (X, int_res_0, B1_org, B2_org);
  `endif

  `ifdef VIRL_functiononly

  `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_AOI211_L50_2

//%BEGIN SEH_AOI211_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AOI211_L50_4 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI211_L50_4 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

  `ifdef VIRL_functiononly
     nor #1 (X, int_res_0, B1_org, B2_org);
  `else
     nor (X, int_res_0, B1_org, B2_org);
  `endif

  `ifdef VIRL_functiononly

  `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_AOI211_L50_4

//%BEGIN SEH_AOI211_GL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AOI211_GL50_1 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI211_GL50_1 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

  `ifdef VIRL_functiononly
     nor #1 (X, int_res_0, B1_org, B2_org);
  `else
     nor (X, int_res_0, B1_org, B2_org);
  `endif

  `ifdef VIRL_functiononly

  `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_AOI211_GL50_1

//%BEGIN SEH_AOI211_GL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AOI211_GL50_2 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI211_GL50_2 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

  `ifdef VIRL_functiononly
     nor #1 (X, int_res_0, B1_org, B2_org);
  `else
     nor (X, int_res_0, B1_org, B2_org);
  `endif

  `ifdef VIRL_functiononly

  `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_AOI211_GL50_2

//%BEGIN SEH_AOI211_GL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AOI211_GL50_4 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI211_GL50_4 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

  `ifdef VIRL_functiononly
     nor #1 (X, int_res_0, B1_org, B2_org);
  `else
     nor (X, int_res_0, B1_org, B2_org);
  `endif

  `ifdef VIRL_functiononly

  `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_AOI211_GL50_4

//%BEGIN SEH_AOI21_L50_8

`celldefine
`ifdef BIAS_PINS
module SEH_AOI21_L50_8 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI21_L50_8 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     nor #1  (X, int_res_0, B_org);
   `else
     nor (X, int_res_0, B_org);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI21_L50_8

//%BEGIN SEH_AOI21_SL50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_AOI21_SL50_0P5 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI21_SL50_0P5 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     nor #1  (X, int_res_0, B_org);
   `else
     nor (X, int_res_0, B_org);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI21_SL50_0P5

//%BEGIN SEH_AOI21_SL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AOI21_SL50_1 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI21_SL50_1 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     nor #1  (X, int_res_0, B_org);
   `else
     nor (X, int_res_0, B_org);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI21_SL50_1

//%BEGIN SEH_AOI21_SL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AOI21_SL50_2 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI21_SL50_2 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     nor #1  (X, int_res_0, B_org);
   `else
     nor (X, int_res_0, B_org);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI21_SL50_2

//%BEGIN SEH_AOI21_SL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AOI21_SL50_4 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI21_SL50_4 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     nor #1  (X, int_res_0, B_org);
   `else
     nor (X, int_res_0, B_org);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI21_SL50_4

//%BEGIN SEH_AOI21_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_AOI21_L50_0P5 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI21_L50_0P5 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     nor #1  (X, int_res_0, B_org);
   `else
     nor (X, int_res_0, B_org);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI21_L50_0P5

//%BEGIN SEH_AOI21_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AOI21_L50_1 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI21_L50_1 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     nor #1  (X, int_res_0, B_org);
   `else
     nor (X, int_res_0, B_org);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI21_L50_1

//%BEGIN SEH_AOI21_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AOI21_L50_2 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI21_L50_2 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     nor #1  (X, int_res_0, B_org);
   `else
     nor (X, int_res_0, B_org);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI21_L50_2

//%BEGIN SEH_AOI21_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AOI21_L50_4 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI21_L50_4 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     nor #1  (X, int_res_0, B_org);
   `else
     nor (X, int_res_0, B_org);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI21_L50_4

//%BEGIN SEH_AOI21_TL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AOI21_TL50_1 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI21_TL50_1 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     nor #1  (X, int_res_0, B_org);
   `else
     nor (X, int_res_0, B_org);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI21_TL50_1

//%BEGIN SEH_AOI21_TL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AOI21_TL50_2 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI21_TL50_2 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     nor #1  (X, int_res_0, B_org);
   `else
     nor (X, int_res_0, B_org);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI21_TL50_2

//%BEGIN SEH_AOI21_TL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AOI21_TL50_4 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI21_TL50_4 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     nor #1  (X, int_res_0, B_org);
   `else
     nor (X, int_res_0, B_org);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI21_TL50_4

//%BEGIN SEH_AOI21_GL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AOI21_GL50_1 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI21_GL50_1 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     nor #1  (X, int_res_0, B_org);
   `else
     nor (X, int_res_0, B_org);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI21_GL50_1

//%BEGIN SEH_AOI21_GL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AOI21_GL50_2 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI21_GL50_2 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     nor #1  (X, int_res_0, B_org);
   `else
     nor (X, int_res_0, B_org);

   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI21_GL50_2

//%BEGIN SEH_AOI21B_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AOI21B_L50_1 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI21B_L50_1 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   not (int_res_1, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       nor #1 (X, int_res_0, int_res_1);
   `else
       nor (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B +=> X)=(0, 0);
if ((~(A1) & A2)) (B +=> X)=(0, 0);
if ((A1 & ~(A2))) (B +=> X)=(0, 0);
endspecify
   `endif
 
endmodule
`endcelldefine

//%END SEH_AOI21B_L50_1

//%BEGIN SEH_AOI21B_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AOI21B_L50_2 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI21B_L50_2 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   not (int_res_1, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       nor #1 (X, int_res_0, int_res_1);
   `else
       nor (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B +=> X)=(0, 0);
if ((~(A1) & A2)) (B +=> X)=(0, 0);
if ((A1 & ~(A2))) (B +=> X)=(0, 0);
endspecify
   `endif
 
endmodule
`endcelldefine

//%END SEH_AOI21B_L50_2

//%BEGIN SEH_AOI21B_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AOI21B_L50_4 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI21B_L50_4 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   not (int_res_1, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       nor #1 (X, int_res_0, int_res_1);
   `else
       nor (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2))) (B +=> X)=(0, 0);
if ((~(A1) & A2)) (B +=> X)=(0, 0);
if ((A1 & ~(A2))) (B +=> X)=(0, 0);
endspecify
   `endif
 
endmodule
`endcelldefine

//%END SEH_AOI21B_L50_4

//%BEGIN SEH_AOI221_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_AOI221_L50_0P5 (X, A1, A2, B1, B2, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI221_L50_0P5 (X, A1, A2, B1, B2, C, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1, C_org);
  `else
      nor (X, int_res_0, int_res_1, C_org);
  `endif

  `ifdef VIRL_functiononly

  `else

specify
if ((~(A1) & ~(A2) & ~(B1) & ~(B2))) (C -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2))) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & ~(B2)) | (~(A1) & ~(A2) & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2))) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & ~(B2))) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2))) (C -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(C))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(C))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(C))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2 & ~(C))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2 & ~(C))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & ~(C))) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2) & ~(C))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2 & ~(C))) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2) & ~(C))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2) & ~(C))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2 & ~(C))) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2) & ~(C))) (A1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_AOI221_L50_0P5

//%BEGIN SEH_AOI221_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AOI221_L50_1 (X, A1, A2, B1, B2, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI221_L50_1 (X, A1, A2, B1, B2, C, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1, C_org);
  `else
      nor (X, int_res_0, int_res_1, C_org);
  `endif

  `ifdef VIRL_functiononly

  `else

specify
if ((~(A1) & ~(A2) & ~(B1) & ~(B2))) (C -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2))) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & ~(B2)) | (~(A1) & ~(A2) & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2))) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & ~(B2))) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2))) (C -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(C))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(C))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(C))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2 & ~(C))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2 & ~(C))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & ~(C))) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2) & ~(C))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2 & ~(C))) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2) & ~(C))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2) & ~(C))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2 & ~(C))) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2) & ~(C))) (A1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_AOI221_L50_1

//%BEGIN SEH_AOI221_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AOI221_L50_2 (X, A1, A2, B1, B2, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI221_L50_2 (X, A1, A2, B1, B2, C, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1, C_org);
  `else
      nor (X, int_res_0, int_res_1, C_org);
  `endif

  `ifdef VIRL_functiononly

  `else

specify
if ((~(A1) & ~(A2) & ~(B1) & ~(B2))) (C -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2))) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & ~(B2)) | (~(A1) & ~(A2) & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2))) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & ~(B2))) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2))) (C -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(C))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(C))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(C))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2 & ~(C))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2 & ~(C))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & ~(C))) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2) & ~(C))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2 & ~(C))) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2) & ~(C))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2) & ~(C))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2 & ~(C))) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2) & ~(C))) (A1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_AOI221_L50_2

//%BEGIN SEH_AOI221_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AOI221_L50_4 (X, A1, A2, B1, B2, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI221_L50_4 (X, A1, A2, B1, B2, C, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1, C_org);
  `else
      nor (X, int_res_0, int_res_1, C_org);
  `endif

  `ifdef VIRL_functiononly

  `else

specify
if ((~(A1) & ~(A2) & ~(B1) & ~(B2))) (C -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2))) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & ~(B2)) | (~(A1) & ~(A2) & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2))) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & ~(B2))) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2))) (C -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(C))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(C))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(C))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2 & ~(C))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2 & ~(C))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & ~(C))) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2) & ~(C))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2 & ~(C))) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2) & ~(C))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2) & ~(C))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2 & ~(C))) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2) & ~(C))) (A1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_AOI221_L50_4

//%BEGIN SEH_AOI222_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_AOI222_L50_0P5 (X, A1, A2, B1, B2, C1, C2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C1, C2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI222_L50_0P5 (X, A1, A2, B1, B2, C1, C2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C1, C2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);
   and (int_res_2, C1_org, C2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       nor #1 (X, int_res_0, int_res_1, int_res_2);
   `else
       nor (X, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2) & ~(B1) & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1) & B2 & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2 & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2 & C1)) (C2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1) & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1) & B2 & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2 & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2 & C2)) (C1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(C1) & ~(C2))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(C1) & ~(C2))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(C1) & ~(C2))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2 & ~(C1) & ~(C2))) (B1 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2 & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2 & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2 & ~(C1) & ~(C2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2 & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2 & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & ~(C1) & ~(C2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2) & ~(C1) & ~(C2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2) & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2 & ~(C1) & ~(C2)) | (A1 & ~(B1) & ~(B2) & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2 & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2 & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2) & ~(C1) & ~(C2))) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2) & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2) & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2) & ~(C1) & ~(C2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2) & C1 & ~(C2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2 & ~(C1) & ~(C2)) | (A2 & ~(B1) & ~(B2) & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2 & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2 & C1 & ~(C2))) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2) & ~(C1) & ~(C2))) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2) & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2) & C1 & ~(C2))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI222_L50_0P5

//%BEGIN SEH_AOI222_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AOI222_L50_1 (X, A1, A2, B1, B2, C1, C2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C1, C2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI222_L50_1 (X, A1, A2, B1, B2, C1, C2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C1, C2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);
   and (int_res_2, C1_org, C2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       nor #1 (X, int_res_0, int_res_1, int_res_2);
   `else
       nor (X, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2) & ~(B1) & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1) & B2 & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2 & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2 & C1)) (C2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1) & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1) & B2 & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2 & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2 & C2)) (C1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(C1) & ~(C2))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(C1) & ~(C2))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(C1) & ~(C2))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2 & ~(C1) & ~(C2))) (B1 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2 & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2 & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2 & ~(C1) & ~(C2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2 & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2 & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & ~(C1) & ~(C2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2) & ~(C1) & ~(C2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2) & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2 & ~(C1) & ~(C2)) | (A1 & ~(B1) & ~(B2) & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2 & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2 & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2) & ~(C1) & ~(C2))) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2) & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2) & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2) & ~(C1) & ~(C2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2) & C1 & ~(C2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2 & ~(C1) & ~(C2)) | (A2 & ~(B1) & ~(B2) & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2 & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2 & C1 & ~(C2))) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2) & ~(C1) & ~(C2))) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2) & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2) & C1 & ~(C2))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI222_L50_1

//%BEGIN SEH_AOI222_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AOI222_L50_2 (X, A1, A2, B1, B2, C1, C2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C1, C2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI222_L50_2 (X, A1, A2, B1, B2, C1, C2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C1, C2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);
   and (int_res_2, C1_org, C2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       nor #1 (X, int_res_0, int_res_1, int_res_2);
   `else
       nor (X, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2) & ~(B1) & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1) & B2 & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2 & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2 & C1)) (C2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1) & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1) & B2 & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2 & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2 & C2)) (C1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(C1) & ~(C2))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(C1) & ~(C2))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(C1) & ~(C2))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2 & ~(C1) & ~(C2))) (B1 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2 & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2 & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2 & ~(C1) & ~(C2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2 & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2 & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & ~(C1) & ~(C2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2) & ~(C1) & ~(C2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2) & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2 & ~(C1) & ~(C2)) | (A1 & ~(B1) & ~(B2) & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2 & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2 & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2) & ~(C1) & ~(C2))) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2) & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2) & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2) & ~(C1) & ~(C2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2) & C1 & ~(C2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2 & ~(C1) & ~(C2)) | (A2 & ~(B1) & ~(B2) & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2 & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2 & C1 & ~(C2))) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2) & ~(C1) & ~(C2))) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2) & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2) & C1 & ~(C2))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI222_L50_2

//%BEGIN SEH_AOI222_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AOI222_L50_4 (X, A1, A2, B1, B2, C1, C2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C1, C2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI222_L50_4 (X, A1, A2, B1, B2, C1, C2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C1, C2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);
   and (int_res_2, C1_org, C2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       nor #1 (X, int_res_0, int_res_1, int_res_2);
   `else
       nor (X, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2) & ~(B1) & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1) & B2 & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2 & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2 & C1)) (C2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2) & C1)) (C2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1) & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1) & B2 & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2 & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2 & C2)) (C1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2) & C2)) (C1 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(C1) & ~(C2))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(C1) & ~(C2))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(C1) & ~(C2))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2 & ~(C1) & ~(C2))) (B1 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2 & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2 & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2 & ~(C1) & ~(C2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2 & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2 & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & ~(C1) & ~(C2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2) & ~(C1) & ~(C2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2) & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2 & ~(C1) & ~(C2)) | (A1 & ~(B1) & ~(B2) & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2 & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2 & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2) & ~(C1) & ~(C2))) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2) & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2) & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2) & ~(C1) & ~(C2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2) & C1 & ~(C2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2 & ~(C1) & ~(C2)) | (A2 & ~(B1) & ~(B2) & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2 & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2 & C1 & ~(C2))) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2) & ~(C1) & ~(C2))) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2) & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2) & C1 & ~(C2))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI222_L50_4

//%BEGIN SEH_AOI22_L50_6

`celldefine
`ifdef BIAS_PINS
module SEH_AOI22_L50_6 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI22_L50_6 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1);
   `else
      nor (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI22_L50_6

//%BEGIN SEH_AOI22_L50_8

`celldefine
`ifdef BIAS_PINS
module SEH_AOI22_L50_8 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI22_L50_8 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1);
   `else
      nor (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI22_L50_8

//%BEGIN SEH_AOI22_SL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AOI22_SL50_1 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI22_SL50_1 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1);
   `else
      nor (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI22_SL50_1

//%BEGIN SEH_AOI22_SL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AOI22_SL50_2 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI22_SL50_2 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1);
   `else
      nor (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI22_SL50_2

//%BEGIN SEH_AOI22_SL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AOI22_SL50_4 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI22_SL50_4 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1);
   `else
      nor (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI22_SL50_4

//%BEGIN SEH_AOI22_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_AOI22_L50_0P5 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI22_L50_0P5 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1);
   `else
      nor (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI22_L50_0P5

//%BEGIN SEH_AOI22_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AOI22_L50_1 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI22_L50_1 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1);
   `else
      nor (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI22_L50_1

//%BEGIN SEH_AOI22_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AOI22_L50_2 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI22_L50_2 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1);
   `else
      nor (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI22_L50_2

//%BEGIN SEH_AOI22_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AOI22_L50_4 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI22_L50_4 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1);
   `else
      nor (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI22_L50_4

//%BEGIN SEH_AOI22_TL50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_AOI22_TL50_0P5 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI22_TL50_0P5 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1);
   `else
      nor (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI22_TL50_0P5

//%BEGIN SEH_AOI22_TL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AOI22_TL50_1 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI22_TL50_1 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1);
   `else
      nor (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI22_TL50_1

//%BEGIN SEH_AOI22_TL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AOI22_TL50_2 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI22_TL50_2 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1);
   `else
      nor (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI22_TL50_2

//%BEGIN SEH_AOI22_TL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AOI22_TL50_4 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI22_TL50_4 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1);
   `else
      nor (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(B1) & ~(B2))) (A2 -=> X)=(0, 0);
if ((A1 & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((A1 & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((A2 & ~(B1) & ~(B2))) (A1 -=> X)=(0, 0);
if ((A2 & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((A2 & B1 & ~(B2))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI22_TL50_4

//%BEGIN SEH_AOI31_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AOI31_L50_1 (X, A1, A2, A3, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI31_L50_1 (X, A1, A2, A3, B, VDD, VSS);
   output X;
   input A1, A2, A3, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, B_org);
   `else
        nor (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(A3))) (B -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3)) | (~(A1) & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((A1 & A2 & ~(A3))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI31_L50_1

//%BEGIN SEH_AOI31_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AOI31_L50_2 (X, A1, A2, A3, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI31_L50_2 (X, A1, A2, A3, B, VDD, VSS);
   output X;
   input A1, A2, A3, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, B_org);
   `else
        nor (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(A3))) (B -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3)) | (~(A1) & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((A1 & A2 & ~(A3))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI31_L50_2

//%BEGIN SEH_AOI31_L50_3

`celldefine
`ifdef BIAS_PINS
module SEH_AOI31_L50_3 (X, A1, A2, A3, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI31_L50_3 (X, A1, A2, A3, B, VDD, VSS);
   output X;
   input A1, A2, A3, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, B_org);
   `else
        nor (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(A3))) (B -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3)) | (~(A1) & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((A1 & A2 & ~(A3))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI31_L50_3

//%BEGIN SEH_AOI31_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AOI31_L50_4 (X, A1, A2, A3, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI31_L50_4 (X, A1, A2, A3, B, VDD, VSS);
   output X;
   input A1, A2, A3, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, B_org);
   `else
        nor (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(A3))) (B -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3)) | (~(A1) & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((A1 & A2 & ~(A3))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI31_L50_4

//%BEGIN SEH_AOI31_GL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AOI31_GL50_1 (X, A1, A2, A3, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI31_GL50_1 (X, A1, A2, A3, B, VDD, VSS);
   output X;
   input A1, A2, A3, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, B_org);
   `else
        nor (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(A3))) (B -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3)) | (~(A1) & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((A1 & A2 & ~(A3))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI31_GL50_1

//%BEGIN SEH_AOI32_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AOI32_L50_1 (X, A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI32_L50_1 (X, A1, A2, A3, B1, B2, VDD, VSS);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org, A3_org);
   and (int_res_1, B1_org, B2_org);
   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1);      
   `else
      nor (X, int_res_0, int_res_1);     
   `endif

   `ifdef VIRL_functiononly
   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A1) & ~(A2) & ~(A3) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B1) | (~(A1) & ~(A2) & A3 & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(A3) & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B2) | (~(A1) & ~(A2) & A3 & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & ~(B2))) (A3 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2)) (A3 -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2))) (A3 -=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & ~(B2))) (A2 -=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((A1 & A3 & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & ~(B2))) (A1 -=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((A2 & A3 & B1 & ~(B2))) (A1 -=> X)=(0, 0);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_AOI32_L50_1

//%BEGIN SEH_AOI32_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AOI32_L50_2 (X, A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI32_L50_2 (X, A1, A2, A3, B1, B2, VDD, VSS);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org, A3_org);
   and (int_res_1, B1_org, B2_org);
   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1);      
   `else
      nor (X, int_res_0, int_res_1);     
   `endif

   `ifdef VIRL_functiononly
   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A1) & ~(A2) & ~(A3) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B1) | (~(A1) & ~(A2) & A3 & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(A3) & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B2) | (~(A1) & ~(A2) & A3 & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & ~(B2))) (A3 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2)) (A3 -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2))) (A3 -=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & ~(B2))) (A2 -=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((A1 & A3 & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & ~(B2))) (A1 -=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((A2 & A3 & B1 & ~(B2))) (A1 -=> X)=(0, 0);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_AOI32_L50_2

//%BEGIN SEH_AOI32_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AOI32_L50_4 (X, A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI32_L50_4 (X, A1, A2, A3, B1, B2, VDD, VSS);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org, A3_org);
   and (int_res_1, B1_org, B2_org);
   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1);      
   `else
      nor (X, int_res_0, int_res_1);     
   `endif

   `ifdef VIRL_functiononly
   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A1) & ~(A2) & ~(A3) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B1) | (~(A1) & ~(A2) & A3 & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(A3) & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B2) | (~(A1) & ~(A2) & A3 & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & ~(B2))) (A3 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2)) (A3 -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2))) (A3 -=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & ~(B2))) (A2 -=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((A1 & A3 & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & ~(B2))) (A1 -=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((A2 & A3 & B1 & ~(B2))) (A1 -=> X)=(0, 0);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_AOI32_L50_4

//%BEGIN SEH_AOI33_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_AOI33_L50_1 (X, A1, A2, A3, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI33_L50_1 (X, A1, A2, A3, B1, B2, B3, VDD, VSS);
   output X;
   input A1, A2, A3, B1, B2, B3, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org, A3_org);
   and (int_res_1, B1_org, B2_org, B3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1);
   `else
      nor (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & ~(A3) & B1 & B2)) (B3 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B1 & B2) | (~(A1) & ~(A2) & A3 & B1 & B2)) (B3 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B1 & B2)) (B3 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B1 & B2)) (B3 -=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B1 & B2)) (B3 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B1 & B2)) (B3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(A3) & B1 & B3)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B1 & B3) | (~(A1) & ~(A2) & A3 & B1 & B3)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B1 & B3)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B1 & B3)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B1 & B3)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B1 & B3)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(A3) & B2 & B3)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B2 & B3) | (~(A1) & ~(A2) & A3 & B2 & B3)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B2 & B3)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B2 & B3)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B2 & B3)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B2 & B3)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & ~(B2) & ~(B3))) (A3 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2 & ~(B3)) | (A1 & A2 & ~(B1) & ~(B2) & B3)) (A3 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2 & B3)) (A3 -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2) & ~(B3))) (A3 -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2) & B3)) (A3 -=> X)=(0, 0);
if ((A1 & A2 & B1 & B2 & ~(B3))) (A3 -=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & ~(B2) & ~(B3))) (A2 -=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & B2 & ~(B3)) | (A1 & A3 & ~(B1) & ~(B2) & B3)) (A2 -=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & B2 & B3)) (A2 -=> X)=(0, 0);
if ((A1 & A3 & B1 & ~(B2) & ~(B3))) (A2 -=> X)=(0, 0);
if ((A1 & A3 & B1 & ~(B2) & B3)) (A2 -=> X)=(0, 0);
if ((A1 & A3 & B1 & B2 & ~(B3))) (A2 -=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & ~(B2) & ~(B3))) (A1 -=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & B2 & ~(B3)) | (A2 & A3 & ~(B1) & ~(B2) & B3)) (A1 -=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & B2 & B3)) (A1 -=> X)=(0, 0);
if ((A2 & A3 & B1 & ~(B2) & ~(B3))) (A1 -=> X)=(0, 0);
if ((A2 & A3 & B1 & ~(B2) & B3)) (A1 -=> X)=(0, 0);
if ((A2 & A3 & B1 & B2 & ~(B3))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI33_L50_1

//%BEGIN SEH_AOI33_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_AOI33_L50_2 (X, A1, A2, A3, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI33_L50_2 (X, A1, A2, A3, B1, B2, B3, VDD, VSS);
   output X;
   input A1, A2, A3, B1, B2, B3, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org, A3_org);
   and (int_res_1, B1_org, B2_org, B3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1);
   `else
      nor (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & ~(A3) & B1 & B2)) (B3 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B1 & B2) | (~(A1) & ~(A2) & A3 & B1 & B2)) (B3 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B1 & B2)) (B3 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B1 & B2)) (B3 -=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B1 & B2)) (B3 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B1 & B2)) (B3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(A3) & B1 & B3)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B1 & B3) | (~(A1) & ~(A2) & A3 & B1 & B3)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B1 & B3)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B1 & B3)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B1 & B3)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B1 & B3)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(A3) & B2 & B3)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B2 & B3) | (~(A1) & ~(A2) & A3 & B2 & B3)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B2 & B3)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B2 & B3)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B2 & B3)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B2 & B3)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & ~(B2) & ~(B3))) (A3 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2 & ~(B3)) | (A1 & A2 & ~(B1) & ~(B2) & B3)) (A3 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2 & B3)) (A3 -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2) & ~(B3))) (A3 -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2) & B3)) (A3 -=> X)=(0, 0);
if ((A1 & A2 & B1 & B2 & ~(B3))) (A3 -=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & ~(B2) & ~(B3))) (A2 -=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & B2 & ~(B3)) | (A1 & A3 & ~(B1) & ~(B2) & B3)) (A2 -=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & B2 & B3)) (A2 -=> X)=(0, 0);
if ((A1 & A3 & B1 & ~(B2) & ~(B3))) (A2 -=> X)=(0, 0);
if ((A1 & A3 & B1 & ~(B2) & B3)) (A2 -=> X)=(0, 0);
if ((A1 & A3 & B1 & B2 & ~(B3))) (A2 -=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & ~(B2) & ~(B3))) (A1 -=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & B2 & ~(B3)) | (A2 & A3 & ~(B1) & ~(B2) & B3)) (A1 -=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & B2 & B3)) (A1 -=> X)=(0, 0);
if ((A2 & A3 & B1 & ~(B2) & ~(B3))) (A1 -=> X)=(0, 0);
if ((A2 & A3 & B1 & ~(B2) & B3)) (A1 -=> X)=(0, 0);
if ((A2 & A3 & B1 & B2 & ~(B3))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI33_L50_2

//%BEGIN SEH_AOI33_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_AOI33_L50_4 (X, A1, A2, A3, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_AOI33_L50_4 (X, A1, A2, A3, B1, B2, B3, VDD, VSS);
   output X;
   input A1, A2, A3, B1, B2, B3, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org, A3_org);
   and (int_res_1, B1_org, B2_org, B3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_0, int_res_1);
   `else
      nor (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
if ((~(A1) & ~(A2) & ~(A3) & B1 & B2)) (B3 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B1 & B2) | (~(A1) & ~(A2) & A3 & B1 & B2)) (B3 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B1 & B2)) (B3 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B1 & B2)) (B3 -=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B1 & B2)) (B3 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B1 & B2)) (B3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(A3) & B1 & B3)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B1 & B3) | (~(A1) & ~(A2) & A3 & B1 & B3)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B1 & B3)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B1 & B3)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B1 & B3)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B1 & B3)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(A3) & B2 & B3)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B2 & B3) | (~(A1) & ~(A2) & A3 & B2 & B3)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B2 & B3)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B2 & B3)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & B2 & B3)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B2 & B3)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & ~(B2) & ~(B3))) (A3 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2 & ~(B3)) | (A1 & A2 & ~(B1) & ~(B2) & B3)) (A3 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2 & B3)) (A3 -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2) & ~(B3))) (A3 -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2) & B3)) (A3 -=> X)=(0, 0);
if ((A1 & A2 & B1 & B2 & ~(B3))) (A3 -=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & ~(B2) & ~(B3))) (A2 -=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & B2 & ~(B3)) | (A1 & A3 & ~(B1) & ~(B2) & B3)) (A2 -=> X)=(0, 0);
if ((A1 & A3 & ~(B1) & B2 & B3)) (A2 -=> X)=(0, 0);
if ((A1 & A3 & B1 & ~(B2) & ~(B3))) (A2 -=> X)=(0, 0);
if ((A1 & A3 & B1 & ~(B2) & B3)) (A2 -=> X)=(0, 0);
if ((A1 & A3 & B1 & B2 & ~(B3))) (A2 -=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & ~(B2) & ~(B3))) (A1 -=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & B2 & ~(B3)) | (A2 & A3 & ~(B1) & ~(B2) & B3)) (A1 -=> X)=(0, 0);
if ((A2 & A3 & ~(B1) & B2 & B3)) (A1 -=> X)=(0, 0);
if ((A2 & A3 & B1 & ~(B2) & ~(B3))) (A1 -=> X)=(0, 0);
if ((A2 & A3 & B1 & ~(B2) & B3)) (A1 -=> X)=(0, 0);
if ((A2 & A3 & B1 & B2 & ~(B3))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_AOI33_L50_4

//%BEGIN SEH_BENC_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_BENC_L50_4 (S, A, X, M0, M1, M2, VDD, VSS, VBP, VBN);
   output S, A, X;
   input M0, M1, M2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3, int_res_4;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (M0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (M0_org, M0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (M1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (M1_org, M1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (M2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (M2_org, M2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BENC_L50_4 (S, A, X, M0, M1, M2, VDD, VSS);
   output S, A, X;
   input M0, M1, M2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3, int_res_4;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (M0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (M0_org, M0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (M1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (M1_org, M1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (M2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (M2_org, M2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, M2_org);
   or (int_res_1, M1_org, M0_org);
   not (int_res_2, M1_org);
   not (int_res_3, M0_org);
   or (int_res_4, int_res_2, int_res_3);

   `ifdef VIRL_functiononly
       and #1 (S, int_res_0, int_res_1);
       and #1 (A, M2_org, int_res_4);
       xnor #1 (X, M1_org, M0_org);        
   `else
       and (S, int_res_0, int_res_1);
       and (A, M2_org, int_res_4);
       xnor (X, M1_org, M0_org);        
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
(M0 -=> A)=(0, 0);
(M1 -=> A)=(0, 0);
if ((~(M0) & ~(M1))) (M2 +=> A)=(0, 0);
if ((~(M0) & M1)) (M2 +=> A)=(0, 0);
if ((M0 & ~(M1))) (M2 +=> A)=(0, 0);
(M0 +=> S)=(0, 0);
(M1 +=> S)=(0, 0);
if ((~(M0) & M1)) (M2 -=> S)=(0, 0);
if ((M0 & ~(M1))) (M2 -=> S)=(0, 0);
if ((M0 & M1)) (M2 -=> S)=(0, 0);
if ((~(M1) & ~(M2))) (M0 -=> X)=(0, 0);
if ((~(M1) & M2)) (M0 -=> X)=(0, 0);
if ((M1 & ~(M2))) (M0 +=> X)=(0, 0);
if ((M1 & M2)) (M0 +=> X)=(0, 0);
if ((~(M0) & ~(M2))) (M1 -=> X)=(0, 0);
if ((~(M0) & M2)) (M1 -=> X)=(0, 0);
if ((M0 & ~(M2))) (M1 +=> X)=(0, 0);
if ((M0 & M2)) (M1 +=> X)=(0, 0);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_BENC_L50_4

//%BEGIN SEH_BENC_L50_8

`celldefine
`ifdef BIAS_PINS
module SEH_BENC_L50_8 (S, A, X, M0, M1, M2, VDD, VSS, VBP, VBN);
   output S, A, X;
   input M0, M1, M2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3, int_res_4;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (M0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (M0_org, M0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (M1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (M1_org, M1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (M2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (M2_org, M2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BENC_L50_8 (S, A, X, M0, M1, M2, VDD, VSS);
   output S, A, X;
   input M0, M1, M2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3, int_res_4;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (M0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (M0_org, M0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (M1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (M1_org, M1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (M2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (M2_org, M2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, M2_org);
   or (int_res_1, M1_org, M0_org);
   not (int_res_2, M1_org);
   not (int_res_3, M0_org);
   or (int_res_4, int_res_2, int_res_3);

   `ifdef VIRL_functiononly
       and #1 (S, int_res_0, int_res_1);
       and #1 (A, M2_org, int_res_4);
       xnor #1 (X, M1_org, M0_org);        
   `else
       and (S, int_res_0, int_res_1);
       and (A, M2_org, int_res_4);
       xnor (X, M1_org, M0_org);        
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
(M0 -=> A)=(0, 0);
(M1 -=> A)=(0, 0);
if ((~(M0) & ~(M1))) (M2 +=> A)=(0, 0);
if ((~(M0) & M1)) (M2 +=> A)=(0, 0);
if ((M0 & ~(M1))) (M2 +=> A)=(0, 0);
(M0 +=> S)=(0, 0);
(M1 +=> S)=(0, 0);
if ((~(M0) & M1)) (M2 -=> S)=(0, 0);
if ((M0 & ~(M1))) (M2 -=> S)=(0, 0);
if ((M0 & M1)) (M2 -=> S)=(0, 0);
if ((~(M1) & ~(M2))) (M0 -=> X)=(0, 0);
if ((~(M1) & M2)) (M0 -=> X)=(0, 0);
if ((M1 & ~(M2))) (M0 +=> X)=(0, 0);
if ((M1 & M2)) (M0 +=> X)=(0, 0);
if ((~(M0) & ~(M2))) (M1 -=> X)=(0, 0);
if ((~(M0) & M2)) (M1 -=> X)=(0, 0);
if ((M0 & ~(M2))) (M1 +=> X)=(0, 0);
if ((M0 & M2)) (M1 +=> X)=(0, 0);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_BENC_L50_8

//%BEGIN SEH_BMUX_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_BMUX_L50_1 (PP, S, A, X, M0, M1, VDD, VSS, VBP, VBN);
   output PP;
   input S, A, X, M0, M1, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res__M1,
	int_res_2, int_res_3, int_res__M0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (M0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (M0_org, M0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (M1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (M1_org, M1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (X_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (X_org, X, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BMUX_L50_1 (PP, S, A, X, M0, M1, VDD, VSS);
   output PP;
   input S, A, X, M0, M1, VDD, VSS;

   wire int_res_0, int_res_1, int_res__M1,
	int_res_2, int_res_3, int_res__M0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (M0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (M0_org, M0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (M1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (M1_org, M1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (X_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (X_org, X, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, S_org);
   not (int_res_1, A_org);
   scl40_htc50_mux2 (int_res__M1, int_res_1, int_res_0, M1_org);
   not (int_res_2, S_org);
   not (int_res_3, A_org);
   scl40_htc50_mux2 (int_res__M0, int_res_3, int_res_2, M0_org);

   `ifdef VIRL_functiononly
       scl40_htc50_mux2 #1 (PP, int_res__M0, int_res__M1, X_org);
   `else
       scl40_htc50_mux2 (PP, int_res__M0, int_res__M1, X_org);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A) & ~(M0) & M1 & S)) (X -=> PP)=(0, 0);
if ((~(A) & M0 & ~(M1) & S)) (X +=> PP)=(0, 0);
if ((A & ~(M0) & M1 & ~(S))) (X +=> PP)=(0, 0);
if ((A & M0 & ~(M1) & ~(S))) (X -=> PP)=(0, 0);
if ((~(A) & ~(M0) & S & ~(X))) (M1 +=> PP)=(0, 0);
if ((~(A) & M0 & S & ~(X))) (M1 +=> PP)=(0, 0);
if ((A & ~(M0) & ~(S) & ~(X))) (M1 -=> PP)=(0, 0);
if ((A & M0 & ~(S) & ~(X))) (M1 -=> PP)=(0, 0);
if ((~(A) & ~(M1) & S & X)) (M0 +=> PP)=(0, 0);
if ((~(A) & M1 & S & X)) (M0 +=> PP)=(0, 0);
if ((A & ~(M1) & ~(S) & X)) (M0 -=> PP)=(0, 0);
if ((A & M1 & ~(S) & X)) (M0 -=> PP)=(0, 0);
if ((~(M0) & ~(M1))) (S -=> PP)=(0, 0);
if ((~(M0) & M1 & X)) (S -=> PP)=(0, 0);
if ((M0 & ~(M1) & ~(X))) (S -=> PP)=(0, 0);
if ((~(M0) & M1 & ~(X))) (A -=> PP)=(0, 0);
if ((M0 & ~(M1) & X)) (A -=> PP)=(0, 0);
if ((M0 & M1 & ~(X))) (A -=> PP)=(0, 0);
if ((M0 & M1 & X)) (A -=> PP)=(0, 0);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_BMUX_L50_1

//%BEGIN SEH_BMUX_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_BMUX_L50_2 (PP, S, A, X, M0, M1, VDD, VSS, VBP, VBN);
   output PP;
   input S, A, X, M0, M1, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res__M1,
	int_res_2, int_res_3, int_res__M0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (M0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (M0_org, M0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (M1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (M1_org, M1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (X_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (X_org, X, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BMUX_L50_2 (PP, S, A, X, M0, M1, VDD, VSS);
   output PP;
   input S, A, X, M0, M1, VDD, VSS;

   wire int_res_0, int_res_1, int_res__M1,
	int_res_2, int_res_3, int_res__M0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (M0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (M0_org, M0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (M1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (M1_org, M1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (X_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (X_org, X, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, S_org);
   not (int_res_1, A_org);
   scl40_htc50_mux2 (int_res__M1, int_res_1, int_res_0, M1_org);
   not (int_res_2, S_org);
   not (int_res_3, A_org);
   scl40_htc50_mux2 (int_res__M0, int_res_3, int_res_2, M0_org);

   `ifdef VIRL_functiononly
       scl40_htc50_mux2 #1 (PP, int_res__M0, int_res__M1, X_org);
   `else
       scl40_htc50_mux2 (PP, int_res__M0, int_res__M1, X_org);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A) & ~(M0) & M1 & S)) (X -=> PP)=(0, 0);
if ((~(A) & M0 & ~(M1) & S)) (X +=> PP)=(0, 0);
if ((A & ~(M0) & M1 & ~(S))) (X +=> PP)=(0, 0);
if ((A & M0 & ~(M1) & ~(S))) (X -=> PP)=(0, 0);
if ((~(A) & ~(M0) & S & ~(X))) (M1 +=> PP)=(0, 0);
if ((~(A) & M0 & S & ~(X))) (M1 +=> PP)=(0, 0);
if ((A & ~(M0) & ~(S) & ~(X))) (M1 -=> PP)=(0, 0);
if ((A & M0 & ~(S) & ~(X))) (M1 -=> PP)=(0, 0);
if ((~(A) & ~(M1) & S & X)) (M0 +=> PP)=(0, 0);
if ((~(A) & M1 & S & X)) (M0 +=> PP)=(0, 0);
if ((A & ~(M1) & ~(S) & X)) (M0 -=> PP)=(0, 0);
if ((A & M1 & ~(S) & X)) (M0 -=> PP)=(0, 0);
if ((~(M0) & ~(M1))) (S -=> PP)=(0, 0);
if ((~(M0) & M1 & X)) (S -=> PP)=(0, 0);
if ((M0 & ~(M1) & ~(X))) (S -=> PP)=(0, 0);
if ((~(M0) & M1 & ~(X))) (A -=> PP)=(0, 0);
if ((M0 & ~(M1) & X)) (A -=> PP)=(0, 0);
if ((M0 & M1 & ~(X))) (A -=> PP)=(0, 0);
if ((M0 & M1 & X)) (A -=> PP)=(0, 0);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_BMUX_L50_2

//%BEGIN SEH_BMUXI_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_BMUXI_L50_1 (PP, S, A, X, M0, M1, VDD, VSS, VBP, VBN);
   output PP;
   input S, A, X, M0, M1, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res__M1,
      int_res_2, int_res_3, int_res__M0, int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (M0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (M0_org, M0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (M1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (M1_org, M1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (X_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (X_org, X, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BMUXI_L50_1 (PP, S, A, X, M0, M1, VDD, VSS);
   output PP;
   input S, A, X, M0, M1, VDD, VSS;

   wire int_res_0, int_res_1, int_res__M1,
      int_res_2, int_res_3, int_res__M0, int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (M0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (M0_org, M0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (M1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (M1_org, M1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (X_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (X_org, X, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, S_org);
   not (int_res_1, A_org);
   scl40_htc50_mux2 (int_res__M1, int_res_1, int_res_0, M1_org);
   not (int_res_2, S_org);
   not (int_res_3, A_org);
   scl40_htc50_mux2 (int_res__M0, int_res_3, int_res_2, M0_org);
   scl40_htc50_mux2 (int_res_mux1, int_res__M0, int_res__M1, X_org);

   `ifdef VIRL_functiononly
       not #1 (PP, int_res_mux1);        
   `else
       not (PP, int_res_mux1);        
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A) & ~(M0) & M1 & S)) (X +=> PP)=(0, 0);
if ((~(A) & M0 & ~(M1) & S)) (X -=> PP)=(0, 0);
if ((A & ~(M0) & M1 & ~(S))) (X -=> PP)=(0, 0);
if ((A & M0 & ~(M1) & ~(S))) (X +=> PP)=(0, 0);
if ((~(A) & ~(M0) & S & ~(X))) (M1 -=> PP)=(0, 0);
if ((~(A) & M0 & S & ~(X))) (M1 -=> PP)=(0, 0);
if ((A & ~(M0) & ~(S) & ~(X))) (M1 +=> PP)=(0, 0);
if ((A & M0 & ~(S) & ~(X))) (M1 +=> PP)=(0, 0);
if ((~(A) & ~(M1) & S & X)) (M0 -=> PP)=(0, 0);
if ((~(A) & M1 & S & X)) (M0 -=> PP)=(0, 0);
if ((A & ~(M1) & ~(S) & X)) (M0 +=> PP)=(0, 0);
if ((A & M1 & ~(S) & X)) (M0 +=> PP)=(0, 0);
if ((~(M0) & ~(M1))) (S +=> PP)=(0, 0);
if ((~(M0) & M1 & X)) (S +=> PP)=(0, 0);
if ((M0 & ~(M1) & ~(X))) (S +=> PP)=(0, 0);
if ((~(M0) & M1 & ~(X))) (A +=> PP)=(0, 0);
if ((M0 & ~(M1) & X)) (A +=> PP)=(0, 0);
if ((M0 & M1 & ~(X))) (A +=> PP)=(0, 0);
if ((M0 & M1 & X)) (A +=> PP)=(0, 0);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_BMUXI_L50_1

//%BEGIN SEH_BMUXI_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_BMUXI_L50_2 (PP, S, A, X, M0, M1, VDD, VSS, VBP, VBN);
   output PP;
   input S, A, X, M0, M1, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res__M1,
      int_res_2, int_res_3, int_res__M0, int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (M0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (M0_org, M0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (M1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (M1_org, M1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (X_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (X_org, X, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BMUXI_L50_2 (PP, S, A, X, M0, M1, VDD, VSS);
   output PP;
   input S, A, X, M0, M1, VDD, VSS;

   wire int_res_0, int_res_1, int_res__M1,
      int_res_2, int_res_3, int_res__M0, int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (M0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (M0_org, M0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (M1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (M1_org, M1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (X_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (X_org, X, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, S_org);
   not (int_res_1, A_org);
   scl40_htc50_mux2 (int_res__M1, int_res_1, int_res_0, M1_org);
   not (int_res_2, S_org);
   not (int_res_3, A_org);
   scl40_htc50_mux2 (int_res__M0, int_res_3, int_res_2, M0_org);
   scl40_htc50_mux2 (int_res_mux1, int_res__M0, int_res__M1, X_org);

   `ifdef VIRL_functiononly
       not #1 (PP, int_res_mux1);        
   `else
       not (PP, int_res_mux1);        
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
if ((~(A) & ~(M0) & M1 & S)) (X +=> PP)=(0, 0);
if ((~(A) & M0 & ~(M1) & S)) (X -=> PP)=(0, 0);
if ((A & ~(M0) & M1 & ~(S))) (X -=> PP)=(0, 0);
if ((A & M0 & ~(M1) & ~(S))) (X +=> PP)=(0, 0);
if ((~(A) & ~(M0) & S & ~(X))) (M1 -=> PP)=(0, 0);
if ((~(A) & M0 & S & ~(X))) (M1 -=> PP)=(0, 0);
if ((A & ~(M0) & ~(S) & ~(X))) (M1 +=> PP)=(0, 0);
if ((A & M0 & ~(S) & ~(X))) (M1 +=> PP)=(0, 0);
if ((~(A) & ~(M1) & S & X)) (M0 -=> PP)=(0, 0);
if ((~(A) & M1 & S & X)) (M0 -=> PP)=(0, 0);
if ((A & ~(M1) & ~(S) & X)) (M0 +=> PP)=(0, 0);
if ((A & M1 & ~(S) & X)) (M0 +=> PP)=(0, 0);
if ((~(M0) & ~(M1) & ~(X))) (S +=> PP)=(0, 0);
if ((~(M0) & ~(M1) & X)) (S +=> PP)=(0, 0);
if ((~(M0) & M1 & X)) (S +=> PP)=(0, 0);
if ((M0 & ~(M1) & ~(X))) (S +=> PP)=(0, 0);
if ((~(M0) & M1 & ~(X))) (A +=> PP)=(0, 0);
if ((M0 & ~(M1) & X)) (A +=> PP)=(0, 0);
if ((M0 & M1 & ~(X))) (A +=> PP)=(0, 0);
if ((M0 & M1 & X)) (A +=> PP)=(0, 0);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_BMUXI_L50_2

//%BEGIN scl40_htc50_bufdlyl24_1
`celldefine
`ifdef BIAS_PINS
module scl40_htc50_bufdlyl24_1 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;

   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////
   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
`else
module scl40_htc50_bufdlyl24_1 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;

   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////
   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
      // CDT 248005
      `ifdef SCL40_HTC50_BUFDLYL24_ENABLE_DELAY
          buf #100 (X, A_org);
      `else
          buf (X, A_org);
      `endif
   `endif

   `ifdef VIRL_functiononly

   `else
// SDF annotation
specify
(A +=> X)=(0, 0);
endspecify
   `endif
endmodule
`endcelldefine

//%END scl40_htc50_bufdlyl24_1

//%BEGIN SEH_BUF_DL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_DL50_1 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_DL50_1 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_DL50_1

//%BEGIN SEH_BUF_DL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_DL50_2 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_DL50_2 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_DL50_2

//%BEGIN SEH_BUF_DL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_DL50_4 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_DL50_4 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_DL50_4

//%BEGIN SEH_BUF_SL50_20

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_SL50_20 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_SL50_20 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_SL50_20

//%BEGIN SEH_BUF_SL50_2P5

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_SL50_2P5 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_SL50_2P5 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_SL50_2P5

//%BEGIN SEH_BUF_SL50_5

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_SL50_5 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_SL50_5 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_SL50_5

//%BEGIN SEH_BUF_SL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_SL50_1 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_SL50_1 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_SL50_1

//%BEGIN SEH_BUF_SL50_12

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_SL50_12 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_SL50_12 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_SL50_12

//%BEGIN SEH_BUF_SL50_16

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_SL50_16 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_SL50_16 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_SL50_16

//%BEGIN SEH_BUF_SL50_1P25

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_SL50_1P25 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_SL50_1P25 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_SL50_1P25

//%BEGIN SEH_BUF_SL50_1P5

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_SL50_1P5 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_SL50_1P5 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_SL50_1P5

//%BEGIN SEH_BUF_SL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_SL50_2 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_SL50_2 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_SL50_2

//%BEGIN SEH_BUF_SL50_24

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_SL50_24 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_SL50_24 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_SL50_24

//%BEGIN SEH_BUF_SL50_3

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_SL50_3 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_SL50_3 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_SL50_3

//%BEGIN SEH_BUF_SL50_32

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_SL50_32 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_SL50_32 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_SL50_32

//%BEGIN SEH_BUF_SL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_SL50_4 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_SL50_4 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_SL50_4

//%BEGIN SEH_BUF_SL50_6

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_SL50_6 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_SL50_6 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_SL50_6

//%BEGIN SEH_BUF_SL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_SL50_8 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_SL50_8 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_SL50_8

//%BEGIN SEH_BUF_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_L50_1 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_L50_1 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_L50_1

//%BEGIN SEH_BUF_L50_12

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_L50_12 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_L50_12 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_L50_12

//%BEGIN SEH_BUF_L50_16

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_L50_16 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_L50_16 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_L50_16

//%BEGIN SEH_BUF_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_L50_2 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_L50_2 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_L50_2

//%BEGIN SEH_BUF_L50_3

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_L50_3 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_L50_3 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_L50_3

//%BEGIN SEH_BUF_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_L50_4 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_L50_4 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_L50_4

//%BEGIN SEH_BUF_L50_6

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_L50_6 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_L50_6 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_L50_6

//%BEGIN SEH_BUF_L50_8

`celldefine
`ifdef BIAS_PINS
module SEH_BUF_L50_8 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_BUF_L50_8 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (X, A_org);
   `else
       buf (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_BUF_L50_8

//%BEGIN SEH_CKGTNLT_V7L50_1

`celldefine
module SEH_CKGTNLT_V7L50_1 (Q, CK, EN, SE, VDD,  VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__prectrl, int_res_iq, iq_y;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
   buf (delayed_SE, SE_org);
`endif

   or (int_res__prectrl, delayed_EN, delayed_SE);
   scl40_htc50_latch (int_res_iq, viol_0, delayed_CK, int_res__prectrl);
   not (iq_y, int_res_iq);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       or #1 (Q, iq_y, delayed_CK);
   `else
       or (Q, iq_y, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else
not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond1, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (_net_3, SE, _net_2);
or U5 (cond0, _net_3, EN);

specify
if ((~(EN) & ~(SE))) (posedge CK => (Q +: 1'b1))=(0, 0);
if ((EN) | (~(EN) & SE)) (CK +=> Q)=(0, 0);
$width(posedge CK &&& cond1 , 0 ,0, viol_0);
$width(posedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(negedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(negedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(negedge CK &&& ~EN , posedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& ~EN , negedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_CKGTNLT_V7L50_1

//%BEGIN SEH_CKGTNLT_V7L50_12

`celldefine
module SEH_CKGTNLT_V7L50_12 (Q, CK, EN, SE, VDD,  VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__prectrl, int_res_iq, iq_y;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
   buf (delayed_SE, SE_org);
`endif

   or (int_res__prectrl, delayed_EN, delayed_SE);
   scl40_htc50_latch (int_res_iq, viol_0, delayed_CK, int_res__prectrl);
   not (iq_y, int_res_iq);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       or #1 (Q, iq_y, delayed_CK);
   `else
       or (Q, iq_y, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else
not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond1, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (_net_3, SE, _net_2);
or U5 (cond0, _net_3, EN);

specify
if ((~(EN) & ~(SE))) (posedge CK => (Q +: 1'b1))=(0, 0);
if ((EN) | (~(EN) & SE)) (CK +=> Q)=(0, 0);
$width(posedge CK &&& cond1 , 0 ,0, viol_0);
$width(posedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(negedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(negedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(negedge CK &&& ~EN , posedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& ~EN , negedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_CKGTNLT_V7L50_12

//%BEGIN SEH_CKGTNLT_V7L50_16

`celldefine
module SEH_CKGTNLT_V7L50_16 (Q, CK, EN, SE, VDD,  VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__prectrl, int_res_iq, iq_y;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
   buf (delayed_SE, SE_org);
`endif

   or (int_res__prectrl, delayed_EN, delayed_SE);
   scl40_htc50_latch (int_res_iq, viol_0, delayed_CK, int_res__prectrl);
   not (iq_y, int_res_iq);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       or #1 (Q, iq_y, delayed_CK);
   `else
       or (Q, iq_y, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else
not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond1, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (_net_3, SE, _net_2);
or U5 (cond0, _net_3, EN);

specify
if ((~(EN) & ~(SE))) (posedge CK => (Q +: 1'b1))=(0, 0);
if ((EN) | (~(EN) & SE)) (CK +=> Q)=(0, 0);
$width(posedge CK &&& cond1 , 0 ,0, viol_0);
$width(posedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(negedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(negedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(negedge CK &&& ~EN , posedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& ~EN , negedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_CKGTNLT_V7L50_16

//%BEGIN SEH_CKGTNLT_V7L50_2

`celldefine
module SEH_CKGTNLT_V7L50_2 (Q, CK, EN, SE, VDD,  VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__prectrl, int_res_iq, iq_y;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
   buf (delayed_SE, SE_org);
`endif

   or (int_res__prectrl, delayed_EN, delayed_SE);
   scl40_htc50_latch (int_res_iq, viol_0, delayed_CK, int_res__prectrl);
   not (iq_y, int_res_iq);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       or #1 (Q, iq_y, delayed_CK);
   `else
       or (Q, iq_y, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else
not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond1, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (_net_3, SE, _net_2);
or U5 (cond0, _net_3, EN);

specify
if ((~(EN) & ~(SE))) (posedge CK => (Q +: 1'b1))=(0, 0);
if ((EN) | (~(EN) & SE)) (CK +=> Q)=(0, 0);
$width(posedge CK &&& cond1 , 0 ,0, viol_0);
$width(posedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(negedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(negedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(negedge CK &&& ~EN , posedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& ~EN , negedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_CKGTNLT_V7L50_2

//%BEGIN SEH_CKGTNLT_V7L50_3

`celldefine
module SEH_CKGTNLT_V7L50_3 (Q, CK, EN, SE, VDD,  VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__prectrl, int_res_iq, iq_y;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
   buf (delayed_SE, SE_org);
`endif

   or (int_res__prectrl, delayed_EN, delayed_SE);
   scl40_htc50_latch (int_res_iq, viol_0, delayed_CK, int_res__prectrl);
   not (iq_y, int_res_iq);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       or #1 (Q, iq_y, delayed_CK);
   `else
       or (Q, iq_y, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else
not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond1, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (_net_3, SE, _net_2);
or U5 (cond0, _net_3, EN);

specify
if ((~(EN) & ~(SE))) (posedge CK => (Q +: 1'b1))=(0, 0);
if ((EN) | (~(EN) & SE)) (CK +=> Q)=(0, 0);
$width(posedge CK &&& cond1 , 0 ,0, viol_0);
$width(posedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(negedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(negedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(negedge CK &&& ~EN , posedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& ~EN , negedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_CKGTNLT_V7L50_3

//%BEGIN SEH_CKGTNLT_V7L50_4

`celldefine
module SEH_CKGTNLT_V7L50_4 (Q, CK, EN, SE, VDD,  VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__prectrl, int_res_iq, iq_y;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
   buf (delayed_SE, SE_org);
`endif

   or (int_res__prectrl, delayed_EN, delayed_SE);
   scl40_htc50_latch (int_res_iq, viol_0, delayed_CK, int_res__prectrl);
   not (iq_y, int_res_iq);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       or #1 (Q, iq_y, delayed_CK);
   `else
       or (Q, iq_y, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else
not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond1, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (_net_3, SE, _net_2);
or U5 (cond0, _net_3, EN);

specify
if ((~(EN) & ~(SE))) (posedge CK => (Q +: 1'b1))=(0, 0);
if ((EN) | (~(EN) & SE)) (CK +=> Q)=(0, 0);
$width(posedge CK &&& cond1 , 0 ,0, viol_0);
$width(posedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(negedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(negedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(negedge CK &&& ~EN , posedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& ~EN , negedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_CKGTNLT_V7L50_4

//%BEGIN SEH_CKGTNLT_V7L50_6

`celldefine
module SEH_CKGTNLT_V7L50_6 (Q, CK, EN, SE, VDD,  VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__prectrl, int_res_iq, iq_y;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
   buf (delayed_SE, SE_org);
`endif

   or (int_res__prectrl, delayed_EN, delayed_SE);
   scl40_htc50_latch (int_res_iq, viol_0, delayed_CK, int_res__prectrl);
   not (iq_y, int_res_iq);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       or #1 (Q, iq_y, delayed_CK);
   `else
       or (Q, iq_y, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else
not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond1, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (_net_3, SE, _net_2);
or U5 (cond0, _net_3, EN);

specify
if ((~(EN) & ~(SE))) (posedge CK => (Q +: 1'b1))=(0, 0);
if ((EN) | (~(EN) & SE)) (CK +=> Q)=(0, 0);
$width(posedge CK &&& cond1 , 0 ,0, viol_0);
$width(posedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(negedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(negedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(negedge CK &&& ~EN , posedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& ~EN , negedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_CKGTNLT_V7L50_6

//%BEGIN SEH_CKGTNLT_V7L50_8

`celldefine
module SEH_CKGTNLT_V7L50_8 (Q, CK, EN, SE, VDD,  VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__prectrl, int_res_iq, iq_y;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
   buf (delayed_SE, SE_org);
`endif

   or (int_res__prectrl, delayed_EN, delayed_SE);
   scl40_htc50_latch (int_res_iq, viol_0, delayed_CK, int_res__prectrl);
   not (iq_y, int_res_iq);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       or #1 (Q, iq_y, delayed_CK);
   `else
       or (Q, iq_y, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else
not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond1, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (_net_3, SE, _net_2);
or U5 (cond0, _net_3, EN);

specify
if ((~(EN) & ~(SE))) (posedge CK => (Q +: 1'b1))=(0, 0);
if ((EN) | (~(EN) & SE)) (CK +=> Q)=(0, 0);
$width(posedge CK &&& cond1 , 0 ,0, viol_0);
$width(posedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(negedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(negedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(negedge CK &&& ~EN , posedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& ~EN , negedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_CKGTNLT_V7L50_8

//%BEGIN SEH_CKGTPLS_V3L50_1

`celldefine
module SEH_CKGTPLS_V3L50_1 (Q, CK, EN, SE, VDD, VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__CK, int_res_postctrl, int_res_iq;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
`endif
   buf (delayed_SE, SE_org);

   not (int_res__CK, delayed_CK);
   scl40_htc50_latch (int_res_iq, viol_0, int_res__CK, delayed_EN);
   or (int_res_postctrl, int_res_iq, delayed_SE);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      and #1 (Q, int_res_postctrl, delayed_CK);
   `else
      and (Q, int_res_postctrl, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond3, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (cond2, SE, _net_2);
not U5 (_net_3, SE);
and U6 (cond0, _net_3, EN);
and U7 (cond1, SE, EN);

specify
if ((~(EN) & ~(SE))) (negedge CK => (Q +: 1'b0))=(0, 0);
if ((~(EN) & SE)) (CK +=> Q)=(0, 0);
if ((EN & ~(SE))) (CK +=> Q)=(0, 0);
if ((EN & SE)) (CK +=> Q)=(0, 0);
(SE +=> Q)=(0, 0);
$width(negedge CK &&& cond3 , 0 ,0, viol_0);
$width(negedge CK &&& cond2 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& SE , posedge EN &&& SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& SE , negedge EN &&& SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$recovery(negedge SE &&& ~EN , posedge CK &&& ~EN , 0 , viol_0);
$removal(posedge SE &&& ~EN , negedge CK &&& ~EN , 0 , viol_0);
$removal(posedge SE &&& EN , negedge CK &&& EN , 0 , viol_0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_CKGTPLS_V3L50_1

//%BEGIN SEH_CKGTPLS_V3L50_12

`celldefine
module SEH_CKGTPLS_V3L50_12 (Q, CK, EN, SE, VDD, VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__CK, int_res_postctrl, int_res_iq;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
`endif
   buf (delayed_SE, SE_org);

   not (int_res__CK, delayed_CK);
   scl40_htc50_latch (int_res_iq, viol_0, int_res__CK, delayed_EN);
   or (int_res_postctrl, int_res_iq, delayed_SE);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      and #1 (Q, int_res_postctrl, delayed_CK);
   `else
      and (Q, int_res_postctrl, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond3, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (cond2, SE, _net_2);
not U5 (_net_3, SE);
and U6 (cond0, _net_3, EN);
and U7 (cond1, SE, EN);

specify
if ((~(EN) & ~(SE))) (negedge CK => (Q +: 1'b0))=(0, 0);
if ((~(EN) & SE)) (CK +=> Q)=(0, 0);
if ((EN & ~(SE))) (CK +=> Q)=(0, 0);
if ((EN & SE)) (CK +=> Q)=(0, 0);
(SE +=> Q)=(0, 0);
$width(negedge CK &&& cond3 , 0 ,0, viol_0);
$width(negedge CK &&& cond2 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& SE , posedge EN &&& SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& SE , negedge EN &&& SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$recovery(negedge SE &&& ~EN , posedge CK &&& ~EN , 0 , viol_0);
$removal(posedge SE &&& ~EN , negedge CK &&& ~EN , 0 , viol_0);
$removal(posedge SE &&& EN , negedge CK &&& EN , 0 , viol_0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_CKGTPLS_V3L50_12

//%BEGIN SEH_CKGTPLS_V3L50_16

`celldefine
module SEH_CKGTPLS_V3L50_16 (Q, CK, EN, SE, VDD, VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__CK, int_res_postctrl, int_res_iq;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
`endif
   buf (delayed_SE, SE_org);

   not (int_res__CK, delayed_CK);
   scl40_htc50_latch (int_res_iq, viol_0, int_res__CK, delayed_EN);
   or (int_res_postctrl, int_res_iq, delayed_SE);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      and #1 (Q, int_res_postctrl, delayed_CK);
   `else
      and (Q, int_res_postctrl, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond3, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (cond2, SE, _net_2);
not U5 (_net_3, SE);
and U6 (cond0, _net_3, EN);
and U7 (cond1, SE, EN);

specify
if ((~(EN) & ~(SE))) (negedge CK => (Q +: 1'b0))=(0, 0);
if ((~(EN) & SE)) (CK +=> Q)=(0, 0);
if ((EN & ~(SE))) (CK +=> Q)=(0, 0);
if ((EN & SE)) (CK +=> Q)=(0, 0);
(SE +=> Q)=(0, 0);
$width(negedge CK &&& cond3 , 0 ,0, viol_0);
$width(negedge CK &&& cond2 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& SE , posedge EN &&& SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& SE , negedge EN &&& SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$recovery(negedge SE &&& ~EN , posedge CK &&& ~EN , 0 , viol_0);
$removal(posedge SE &&& ~EN , negedge CK &&& ~EN , 0 , viol_0);
$removal(posedge SE &&& EN , negedge CK &&& EN , 0 , viol_0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_CKGTPLS_V3L50_16

//%BEGIN SEH_CKGTPLS_V3L50_2

`celldefine
module SEH_CKGTPLS_V3L50_2 (Q, CK, EN, SE, VDD, VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__CK, int_res_postctrl, int_res_iq;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
`endif
   buf (delayed_SE, SE_org);

   not (int_res__CK, delayed_CK);
   scl40_htc50_latch (int_res_iq, viol_0, int_res__CK, delayed_EN);
   or (int_res_postctrl, int_res_iq, delayed_SE);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      and #1 (Q, int_res_postctrl, delayed_CK);
   `else
      and (Q, int_res_postctrl, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond3, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (cond2, SE, _net_2);
not U5 (_net_3, SE);
and U6 (cond0, _net_3, EN);
and U7 (cond1, SE, EN);

specify
if ((~(EN) & ~(SE))) (negedge CK => (Q +: 1'b0))=(0, 0);
if ((~(EN) & SE)) (CK +=> Q)=(0, 0);
if ((EN & ~(SE))) (CK +=> Q)=(0, 0);
if ((EN & SE)) (CK +=> Q)=(0, 0);
(SE +=> Q)=(0, 0);
$width(negedge CK &&& cond3 , 0 ,0, viol_0);
$width(negedge CK &&& cond2 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& SE , posedge EN &&& SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& SE , negedge EN &&& SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$recovery(negedge SE &&& ~EN , posedge CK &&& ~EN , 0 , viol_0);
$removal(posedge SE &&& ~EN , negedge CK &&& ~EN , 0 , viol_0);
$removal(posedge SE &&& EN , negedge CK &&& EN , 0 , viol_0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_CKGTPLS_V3L50_2

//%BEGIN SEH_CKGTPLS_V3L50_3

`celldefine
module SEH_CKGTPLS_V3L50_3 (Q, CK, EN, SE, VDD, VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__CK, int_res_postctrl, int_res_iq;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
`endif
   buf (delayed_SE, SE_org);

   not (int_res__CK, delayed_CK);
   scl40_htc50_latch (int_res_iq, viol_0, int_res__CK, delayed_EN);
   or (int_res_postctrl, int_res_iq, delayed_SE);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      and #1 (Q, int_res_postctrl, delayed_CK);
   `else
      and (Q, int_res_postctrl, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond3, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (cond2, SE, _net_2);
not U5 (_net_3, SE);
and U6 (cond0, _net_3, EN);
and U7 (cond1, SE, EN);

specify
if ((~(EN) & ~(SE))) (negedge CK => (Q +: 1'b0))=(0, 0);
if ((~(EN) & SE)) (CK +=> Q)=(0, 0);
if ((EN & ~(SE))) (CK +=> Q)=(0, 0);
if ((EN & SE)) (CK +=> Q)=(0, 0);
(SE +=> Q)=(0, 0);
$width(negedge CK &&& cond3 , 0 ,0, viol_0);
$width(negedge CK &&& cond2 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& SE , posedge EN &&& SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& SE , negedge EN &&& SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$recovery(negedge SE &&& ~EN , posedge CK &&& ~EN , 0 , viol_0);
$removal(posedge SE &&& ~EN , negedge CK &&& ~EN , 0 , viol_0);
$removal(posedge SE &&& EN , negedge CK &&& EN , 0 , viol_0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_CKGTPLS_V3L50_3

//%BEGIN SEH_CKGTPLS_V3L50_4

`celldefine
module SEH_CKGTPLS_V3L50_4 (Q, CK, EN, SE, VDD, VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__CK, int_res_postctrl, int_res_iq;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
`endif
   buf (delayed_SE, SE_org);

   not (int_res__CK, delayed_CK);
   scl40_htc50_latch (int_res_iq, viol_0, int_res__CK, delayed_EN);
   or (int_res_postctrl, int_res_iq, delayed_SE);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      and #1 (Q, int_res_postctrl, delayed_CK);
   `else
      and (Q, int_res_postctrl, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond3, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (cond2, SE, _net_2);
not U5 (_net_3, SE);
and U6 (cond0, _net_3, EN);
and U7 (cond1, SE, EN);

specify
if ((~(EN) & ~(SE))) (negedge CK => (Q +: 1'b0))=(0, 0);
if ((~(EN) & SE)) (CK +=> Q)=(0, 0);
if ((EN & ~(SE))) (CK +=> Q)=(0, 0);
if ((EN & SE)) (CK +=> Q)=(0, 0);
(SE +=> Q)=(0, 0);
$width(negedge CK &&& cond3 , 0 ,0, viol_0);
$width(negedge CK &&& cond2 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& SE , posedge EN &&& SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& SE , negedge EN &&& SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$recovery(negedge SE &&& ~EN , posedge CK &&& ~EN , 0 , viol_0);
$removal(posedge SE &&& ~EN , negedge CK &&& ~EN , 0 , viol_0);
$removal(posedge SE &&& EN , negedge CK &&& EN , 0 , viol_0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_CKGTPLS_V3L50_4

//%BEGIN SEH_CKGTPLS_V3L50_6

`celldefine
module SEH_CKGTPLS_V3L50_6 (Q, CK, EN, SE, VDD, VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__CK, int_res_postctrl, int_res_iq;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
`endif
   buf (delayed_SE, SE_org);

   not (int_res__CK, delayed_CK);
   scl40_htc50_latch (int_res_iq, viol_0, int_res__CK, delayed_EN);
   or (int_res_postctrl, int_res_iq, delayed_SE);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      and #1 (Q, int_res_postctrl, delayed_CK);
   `else
      and (Q, int_res_postctrl, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond3, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (cond2, SE, _net_2);
not U5 (_net_3, SE);
and U6 (cond0, _net_3, EN);
and U7 (cond1, SE, EN);

specify
if ((~(EN) & ~(SE))) (negedge CK => (Q +: 1'b0))=(0, 0);
if ((~(EN) & SE)) (CK +=> Q)=(0, 0);
if ((EN & ~(SE))) (CK +=> Q)=(0, 0);
if ((EN & SE)) (CK +=> Q)=(0, 0);
(SE +=> Q)=(0, 0);
$width(negedge CK &&& cond3 , 0 ,0, viol_0);
$width(negedge CK &&& cond2 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& SE , posedge EN &&& SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& SE , negedge EN &&& SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$recovery(negedge SE &&& ~EN , posedge CK &&& ~EN , 0 , viol_0);
$removal(posedge SE &&& ~EN , negedge CK &&& ~EN , 0 , viol_0);
$removal(posedge SE &&& EN , negedge CK &&& EN , 0 , viol_0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_CKGTPLS_V3L50_6

//%BEGIN SEH_CKGTPLS_V3L50_8

`celldefine
module SEH_CKGTPLS_V3L50_8 (Q, CK, EN, SE, VDD, VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__CK, int_res_postctrl, int_res_iq;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
`endif
   buf (delayed_SE, SE_org);

   not (int_res__CK, delayed_CK);
   scl40_htc50_latch (int_res_iq, viol_0, int_res__CK, delayed_EN);
   or (int_res_postctrl, int_res_iq, delayed_SE);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      and #1 (Q, int_res_postctrl, delayed_CK);
   `else
      and (Q, int_res_postctrl, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond3, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (cond2, SE, _net_2);
not U5 (_net_3, SE);
and U6 (cond0, _net_3, EN);
and U7 (cond1, SE, EN);

specify
if ((~(EN) & ~(SE))) (negedge CK => (Q +: 1'b0))=(0, 0);
if ((~(EN) & SE)) (CK +=> Q)=(0, 0);
if ((EN & ~(SE))) (CK +=> Q)=(0, 0);
if ((EN & SE)) (CK +=> Q)=(0, 0);
(SE +=> Q)=(0, 0);
$width(negedge CK &&& cond3 , 0 ,0, viol_0);
$width(negedge CK &&& cond2 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& SE , posedge EN &&& SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& SE , negedge EN &&& SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$recovery(negedge SE &&& ~EN , posedge CK &&& ~EN , 0 , viol_0);
$removal(posedge SE &&& ~EN , negedge CK &&& ~EN , 0 , viol_0);
$removal(posedge SE &&& EN , negedge CK &&& EN , 0 , viol_0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_CKGTPLS_V3L50_8

//%BEGIN SEH_CKGTPLT_V5L50_1

`celldefine
module SEH_CKGTPLT_V5L50_1 (Q, CK, EN, SE,  VDD, VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__CK, int_res__prectrl, int_res_iq;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
   buf (delayed_SE, SE_org);
`endif

   not (int_res__CK, delayed_CK);
   or (int_res__prectrl, delayed_EN, delayed_SE);
   scl40_htc50_latch (int_res_iq, viol_0, int_res__CK, int_res__prectrl);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       and #1 (Q, int_res_iq, delayed_CK);
   `else
       and (Q, int_res_iq, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond1, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (_net_3, SE, _net_2);
or U5 (cond0, _net_3, EN);

specify
if ((~(EN) & ~(SE))) (negedge CK => (Q +: 1'b0))=(0, 0);
if ((EN) | (~(EN) & SE)) (CK +=> Q)=(0, 0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~EN , posedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& ~EN , negedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_CKGTPLT_V5L50_1

//%BEGIN SEH_CKGTPLT_V5L50_12

`celldefine
module SEH_CKGTPLT_V5L50_12 (Q, CK, EN, SE,  VDD, VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__CK, int_res__prectrl, int_res_iq;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
   buf (delayed_SE, SE_org);
`endif

   not (int_res__CK, delayed_CK);
   or (int_res__prectrl, delayed_EN, delayed_SE);
   scl40_htc50_latch (int_res_iq, viol_0, int_res__CK, int_res__prectrl);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       and #1 (Q, int_res_iq, delayed_CK);
   `else
       and (Q, int_res_iq, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond1, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (_net_3, SE, _net_2);
or U5 (cond0, _net_3, EN);

specify
if ((~(EN) & ~(SE))) (negedge CK => (Q +: 1'b0))=(0, 0);
if ((EN) | (~(EN) & SE)) (CK +=> Q)=(0, 0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~EN , posedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& ~EN , negedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_CKGTPLT_V5L50_12

//%BEGIN SEH_CKGTPLT_V5L50_16

`celldefine
module SEH_CKGTPLT_V5L50_16 (Q, CK, EN, SE,  VDD, VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__CK, int_res__prectrl, int_res_iq;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
   buf (delayed_SE, SE_org);
`endif

   not (int_res__CK, delayed_CK);
   or (int_res__prectrl, delayed_EN, delayed_SE);
   scl40_htc50_latch (int_res_iq, viol_0, int_res__CK, int_res__prectrl);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       and #1 (Q, int_res_iq, delayed_CK);
   `else
       and (Q, int_res_iq, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond1, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (_net_3, SE, _net_2);
or U5 (cond0, _net_3, EN);

specify
if ((~(EN) & ~(SE))) (negedge CK => (Q +: 1'b0))=(0, 0);
if ((EN) | (~(EN) & SE)) (CK +=> Q)=(0, 0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~EN , posedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& ~EN , negedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_CKGTPLT_V5L50_16

//%BEGIN SEH_CKGTPLT_V5L50_2

`celldefine
module SEH_CKGTPLT_V5L50_2 (Q, CK, EN, SE,  VDD, VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__CK, int_res__prectrl, int_res_iq;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
   buf (delayed_SE, SE_org);
`endif

   not (int_res__CK, delayed_CK);
   or (int_res__prectrl, delayed_EN, delayed_SE);
   scl40_htc50_latch (int_res_iq, viol_0, int_res__CK, int_res__prectrl);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       and #1 (Q, int_res_iq, delayed_CK);
   `else
       and (Q, int_res_iq, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond1, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (_net_3, SE, _net_2);
or U5 (cond0, _net_3, EN);

specify
if ((~(EN) & ~(SE))) (negedge CK => (Q +: 1'b0))=(0, 0);
if ((EN) | (~(EN) & SE)) (CK +=> Q)=(0, 0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~EN , posedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& ~EN , negedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_CKGTPLT_V5L50_2

//%BEGIN SEH_CKGTPLT_V5L50_3

`celldefine
module SEH_CKGTPLT_V5L50_3 (Q, CK, EN, SE,  VDD, VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__CK, int_res__prectrl, int_res_iq;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
   buf (delayed_SE, SE_org);
`endif

   not (int_res__CK, delayed_CK);
   or (int_res__prectrl, delayed_EN, delayed_SE);
   scl40_htc50_latch (int_res_iq, viol_0, int_res__CK, int_res__prectrl);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       and #1 (Q, int_res_iq, delayed_CK);
   `else
       and (Q, int_res_iq, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond1, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (_net_3, SE, _net_2);
or U5 (cond0, _net_3, EN);

specify
if ((~(EN) & ~(SE))) (negedge CK => (Q +: 1'b0))=(0, 0);
if ((EN) | (~(EN) & SE)) (CK +=> Q)=(0, 0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~EN , posedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& ~EN , negedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_CKGTPLT_V5L50_3

//%BEGIN SEH_CKGTPLT_V5L50_4

`celldefine
module SEH_CKGTPLT_V5L50_4 (Q, CK, EN, SE,  VDD, VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__CK, int_res__prectrl, int_res_iq;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
   buf (delayed_SE, SE_org);
`endif

   not (int_res__CK, delayed_CK);
   or (int_res__prectrl, delayed_EN, delayed_SE);
   scl40_htc50_latch (int_res_iq, viol_0, int_res__CK, int_res__prectrl);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       and #1 (Q, int_res_iq, delayed_CK);
   `else
       and (Q, int_res_iq, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond1, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (_net_3, SE, _net_2);
or U5 (cond0, _net_3, EN);

specify
if ((~(EN) & ~(SE))) (negedge CK => (Q +: 1'b0))=(0, 0);
if ((EN) | (~(EN) & SE)) (CK +=> Q)=(0, 0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~EN , posedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& ~EN , negedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_CKGTPLT_V5L50_4

//%BEGIN SEH_CKGTPLT_V5L50_6

`celldefine
module SEH_CKGTPLT_V5L50_6 (Q, CK, EN, SE,  VDD, VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__CK, int_res__prectrl, int_res_iq;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
   buf (delayed_SE, SE_org);
`endif

   not (int_res__CK, delayed_CK);
   or (int_res__prectrl, delayed_EN, delayed_SE);
   scl40_htc50_latch (int_res_iq, viol_0, int_res__CK, int_res__prectrl);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       and #1 (Q, int_res_iq, delayed_CK);
   `else
       and (Q, int_res_iq, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond1, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (_net_3, SE, _net_2);
or U5 (cond0, _net_3, EN);

specify
if ((~(EN) & ~(SE))) (negedge CK => (Q +: 1'b0))=(0, 0);
if ((EN) | (~(EN) & SE)) (CK +=> Q)=(0, 0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~EN , posedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& ~EN , negedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_CKGTPLT_V5L50_6

//%BEGIN SEH_CKGTPLT_V5L50_8

`celldefine
module SEH_CKGTPLT_V5L50_8 (Q, CK, EN, SE,  VDD, VBP, VBN, VSS);
   output Q;
   input CK, EN, SE, VDD, VBP, VBN, VSS;

   reg viol_0;
   wire delayed_CK, delayed_EN, delayed_SE;

   wire int_res__CK, int_res__prectrl, int_res_iq;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VBP !== 1'b1) || (VBN !== 1'b0) || (VSS !== 1'b0)));


   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_EN, EN_org);
   buf (delayed_SE, SE_org);
`endif

   not (int_res__CK, delayed_CK);
   or (int_res__prectrl, delayed_EN, delayed_SE);
   scl40_htc50_latch (int_res_iq, viol_0, int_res__CK, int_res__prectrl);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       and #1 (Q, int_res_iq, delayed_CK);
   `else
       and (Q, int_res_iq, delayed_CK);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, SE);
not U1 (_net_1, EN);
and U2 (cond1, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (_net_3, SE, _net_2);
or U5 (cond0, _net_3, EN);

specify
if ((~(EN) & ~(SE))) (negedge CK => (Q +: 1'b0))=(0, 0);
if ((EN) | (~(EN) & SE)) (CK +=> Q)=(0, 0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~SE , negedge EN &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~EN , posedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& ~EN , negedge SE &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_CKGTPLT_V5L50_8

//%BEGIN SEH_DEL_L4L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_DEL_L4L50_1 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_DEL_L4L50_1 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     buf #1 (X, A_org);
   `else
     buf (X, A_org);
   `endif

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_DEL_L4L50_1

//%BEGIN SEH_DEL_L4L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_DEL_L4L50_2 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_DEL_L4L50_2 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     buf #1 (X, A_org);
   `else
     buf (X, A_org);
   `endif

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_DEL_L4L50_2

//%BEGIN SEH_DEL_L4L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_DEL_L4L50_4 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_DEL_L4L50_4 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     buf #1 (X, A_org);
   `else
     buf (X, A_org);
   `endif

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_DEL_L4L50_4

//%BEGIN SEH_DEL_L6L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_DEL_L6L50_1 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_DEL_L6L50_1 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     buf #1 (X, A_org);
   `else
     buf (X, A_org);
   `endif

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_DEL_L6L50_1

//%BEGIN SEH_DEL_L6L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_DEL_L6L50_2 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_DEL_L6L50_2 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     buf #1 (X, A_org);
   `else
     buf (X, A_org);
   `endif

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_DEL_L6L50_2

//%BEGIN SEH_DEL_L6L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_DEL_L6L50_4 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_DEL_L6L50_4 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
     buf #1 (X, A_org);
   `else
     buf (X, A_org);
   `endif

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_DEL_L6L50_4

//%BEGIN SEH_EN2_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_EN2_L50_0P5 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN2_L50_0P5 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       xnor #1 (X, A1_org, A2_org);
   `else
       xnor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 -=> X)=(0, 0);
if (A1) (A2 +=> X)=(0, 0);
if (~(A2)) (A1 -=> X)=(0, 0);
if (A2) (A1 +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_EN2_L50_0P5

//%BEGIN SEH_EN2_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_EN2_L50_1 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN2_L50_1 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       xnor #1 (X, A1_org, A2_org);
   `else
       xnor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 -=> X)=(0, 0);
if (A1) (A2 +=> X)=(0, 0);
if (~(A2)) (A1 -=> X)=(0, 0);
if (A2) (A1 +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_EN2_L50_1

//%BEGIN SEH_EN2_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_EN2_L50_2 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN2_L50_2 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       xnor #1 (X, A1_org, A2_org);
   `else
       xnor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 -=> X)=(0, 0);
if (A1) (A2 +=> X)=(0, 0);
if (~(A2)) (A1 -=> X)=(0, 0);
if (A2) (A1 +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_EN2_L50_2

//%BEGIN SEH_EN2_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_EN2_L50_4 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN2_L50_4 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       xnor #1 (X, A1_org, A2_org);
   `else
       xnor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 -=> X)=(0, 0);
if (A1) (A2 +=> X)=(0, 0);
if (~(A2)) (A1 -=> X)=(0, 0);
if (A2) (A1 +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_EN2_L50_4

//%BEGIN SEH_EN2_L50_8

`celldefine
`ifdef BIAS_PINS
module SEH_EN2_L50_8 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN2_L50_8 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       xnor #1 (X, A1_org, A2_org);
   `else
       xnor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 -=> X)=(0, 0);
if (A1) (A2 +=> X)=(0, 0);
if (~(A2)) (A1 -=> X)=(0, 0);
if (A2) (A1 +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_EN2_L50_8

//%BEGIN SEH_EN2_SL50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_EN2_SL50_0P5 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN2_SL50_0P5 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       xnor #1 (X, A1_org, A2_org);
   `else
       xnor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 -=> X)=(0, 0);
if (A1) (A2 +=> X)=(0, 0);
if (~(A2)) (A1 -=> X)=(0, 0);
if (A2) (A1 +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_EN2_SL50_0P5

//%BEGIN SEH_EN2_SL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_EN2_SL50_1 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN2_SL50_1 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       xnor #1 (X, A1_org, A2_org);
   `else
       xnor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 -=> X)=(0, 0);
if (A1) (A2 +=> X)=(0, 0);
if (~(A2)) (A1 -=> X)=(0, 0);
if (A2) (A1 +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_EN2_SL50_1

//%BEGIN SEH_EN2_SL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_EN2_SL50_2 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN2_SL50_2 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       xnor #1 (X, A1_org, A2_org);
   `else
       xnor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 -=> X)=(0, 0);
if (A1) (A2 +=> X)=(0, 0);
if (~(A2)) (A1 -=> X)=(0, 0);
if (A2) (A1 +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_EN2_SL50_2

//%BEGIN SEH_EN2_SL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_EN2_SL50_4 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN2_SL50_4 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       xnor #1 (X, A1_org, A2_org);
   `else
       xnor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 -=> X)=(0, 0);
if (A1) (A2 +=> X)=(0, 0);
if (~(A2)) (A1 -=> X)=(0, 0);
if (A2) (A1 +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_EN2_SL50_4

//%BEGIN SEH_EN2_SL50_6

`celldefine
`ifdef BIAS_PINS
module SEH_EN2_SL50_6 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN2_SL50_6 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       xnor #1 (X, A1_org, A2_org);
   `else
       xnor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 -=> X)=(0, 0);
if (A1) (A2 +=> X)=(0, 0);
if (~(A2)) (A1 -=> X)=(0, 0);
if (A2) (A1 +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_EN2_SL50_6

//%BEGIN SEH_EN2_SL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_EN2_SL50_8 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN2_SL50_8 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       xnor #1 (X, A1_org, A2_org);
   `else
       xnor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 -=> X)=(0, 0);
if (A1) (A2 +=> X)=(0, 0);
if (~(A2)) (A1 -=> X)=(0, 0);
if (A2) (A1 +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_EN2_SL50_8

//%BEGIN SEH_EN2_GL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_EN2_GL50_1 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN2_GL50_1 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       xnor #1 (X, A1_org, A2_org);
   `else
       xnor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 -=> X)=(0, 0);
if (A1) (A2 +=> X)=(0, 0);
if (~(A2)) (A1 -=> X)=(0, 0);
if (A2) (A1 +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_EN2_GL50_1

//%BEGIN SEH_EN2_GL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_EN2_GL50_2 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN2_GL50_2 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       xnor #1 (X, A1_org, A2_org);
   `else
       xnor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 -=> X)=(0, 0);
if (A1) (A2 +=> X)=(0, 0);
if (~(A2)) (A1 -=> X)=(0, 0);
if (A2) (A1 +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_EN2_GL50_2

//%BEGIN SEH_EN2_GL50_3

`celldefine
`ifdef BIAS_PINS
module SEH_EN2_GL50_3 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN2_GL50_3 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       xnor #1 (X, A1_org, A2_org);
   `else
       xnor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 -=> X)=(0, 0);
if (A1) (A2 +=> X)=(0, 0);
if (~(A2)) (A1 -=> X)=(0, 0);
if (A2) (A1 +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_EN2_GL50_3

//%BEGIN SEH_EN2_GL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_EN2_GL50_4 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN2_GL50_4 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       xnor #1 (X, A1_org, A2_org);
   `else
       xnor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 -=> X)=(0, 0);
if (A1) (A2 +=> X)=(0, 0);
if (~(A2)) (A1 -=> X)=(0, 0);
if (A2) (A1 +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_EN2_GL50_4

//%BEGIN SEH_EN3_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_EN3_L50_1 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN3_L50_1 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


   `ifdef VIRL_functiononly
        xnor #1 (X, A1_org, A2_org, A3_org);
   `else
        xnor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2))) (A3 -=> X)=(0, 0);
if ((~(A1) & A2)) (A3 +=> X)=(0, 0);
if ((A1 & ~(A2))) (A3 +=> X)=(0, 0);
if ((A1 & A2)) (A3 -=> X)=(0, 0);
if ((~(A1) & ~(A3))) (A2 -=> X)=(0, 0);
if ((~(A1) & A3)) (A2 +=> X)=(0, 0);
if ((A1 & ~(A3))) (A2 +=> X)=(0, 0);
if ((A1 & A3)) (A2 -=> X)=(0, 0);
if ((~(A2) & ~(A3))) (A1 -=> X)=(0, 0);
if ((~(A2) & A3)) (A1 +=> X)=(0, 0);
if ((A2 & ~(A3))) (A1 +=> X)=(0, 0);
if ((A2 & A3)) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EN3_L50_1

//%BEGIN SEH_EN3_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_EN3_L50_2 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN3_L50_2 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


   `ifdef VIRL_functiononly
        xnor #1 (X, A1_org, A2_org, A3_org);
   `else
        xnor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2))) (A3 -=> X)=(0, 0);
if ((~(A1) & A2)) (A3 +=> X)=(0, 0);
if ((A1 & ~(A2))) (A3 +=> X)=(0, 0);
if ((A1 & A2)) (A3 -=> X)=(0, 0);
if ((~(A1) & ~(A3))) (A2 -=> X)=(0, 0);
if ((~(A1) & A3)) (A2 +=> X)=(0, 0);
if ((A1 & ~(A3))) (A2 +=> X)=(0, 0);
if ((A1 & A3)) (A2 -=> X)=(0, 0);
if ((~(A2) & ~(A3))) (A1 -=> X)=(0, 0);
if ((~(A2) & A3)) (A1 +=> X)=(0, 0);
if ((A2 & ~(A3))) (A1 +=> X)=(0, 0);
if ((A2 & A3)) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EN3_L50_2

//%BEGIN SEH_EN3_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_EN3_L50_4 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN3_L50_4 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


   `ifdef VIRL_functiononly
        xnor #1 (X, A1_org, A2_org, A3_org);
   `else
        xnor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2))) (A3 -=> X)=(0, 0);
if ((~(A1) & A2)) (A3 +=> X)=(0, 0);
if ((A1 & ~(A2))) (A3 +=> X)=(0, 0);
if ((A1 & A2)) (A3 -=> X)=(0, 0);
if ((~(A1) & ~(A3))) (A2 -=> X)=(0, 0);
if ((~(A1) & A3)) (A2 +=> X)=(0, 0);
if ((A1 & ~(A3))) (A2 +=> X)=(0, 0);
if ((A1 & A3)) (A2 -=> X)=(0, 0);
if ((~(A2) & ~(A3))) (A1 -=> X)=(0, 0);
if ((~(A2) & A3)) (A1 +=> X)=(0, 0);
if ((A2 & ~(A3))) (A1 +=> X)=(0, 0);
if ((A2 & A3)) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EN3_L50_4

//%BEGIN SEH_EN3_DGL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_EN3_DGL50_1 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN3_DGL50_1 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


   `ifdef VIRL_functiononly
        xnor #1 (X, A1_org, A2_org, A3_org);
   `else
        xnor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2))) (A3 -=> X)=(0, 0);
if ((~(A1) & A2)) (A3 +=> X)=(0, 0);
if ((A1 & ~(A2))) (A3 +=> X)=(0, 0);
if ((A1 & A2)) (A3 -=> X)=(0, 0);
if ((~(A1) & ~(A3))) (A2 -=> X)=(0, 0);
if ((~(A1) & A3)) (A2 +=> X)=(0, 0);
if ((A1 & ~(A3))) (A2 +=> X)=(0, 0);
if ((A1 & A3)) (A2 -=> X)=(0, 0);
if ((~(A2) & ~(A3))) (A1 -=> X)=(0, 0);
if ((~(A2) & A3)) (A1 +=> X)=(0, 0);
if ((A2 & ~(A3))) (A1 +=> X)=(0, 0);
if ((A2 & A3)) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EN3_DGL50_1

//%BEGIN SEH_EN3_DGL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_EN3_DGL50_2 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN3_DGL50_2 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


   `ifdef VIRL_functiononly
        xnor #1 (X, A1_org, A2_org, A3_org);
   `else
        xnor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2))) (A3 -=> X)=(0, 0);
if ((~(A1) & A2)) (A3 +=> X)=(0, 0);
if ((A1 & ~(A2))) (A3 +=> X)=(0, 0);
if ((A1 & A2)) (A3 -=> X)=(0, 0);
if ((~(A1) & ~(A3))) (A2 -=> X)=(0, 0);
if ((~(A1) & A3)) (A2 +=> X)=(0, 0);
if ((A1 & ~(A3))) (A2 +=> X)=(0, 0);
if ((A1 & A3)) (A2 -=> X)=(0, 0);
if ((~(A2) & ~(A3))) (A1 -=> X)=(0, 0);
if ((~(A2) & A3)) (A1 +=> X)=(0, 0);
if ((A2 & ~(A3))) (A1 +=> X)=(0, 0);
if ((A2 & A3)) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EN3_DGL50_2

//%BEGIN SEH_EN4_DGL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_EN4_DGL50_1 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN4_DGL50_1 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xnor #1 (X, A1_org, A2_org, A3_org, A4_org);

   `else
         xnor (X, A1_org, A2_org, A3_org, A4_org);

   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2) & ~(A3))) (A4 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3)) (A4 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3))) (A4 +=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (A4 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (A4 +=> X)=(0, 0);
if ((A1 & ~(A2) & A3)) (A4 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3))) (A4 -=> X)=(0, 0);
if ((A1 & A2 & A3)) (A4 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & ~(A4))) (A2 -=> X)=(0, 0);
if ((~(A1) & ~(A3) & A4)) (A2 +=> X)=(0, 0);
if ((~(A1) & A3 & ~(A4))) (A2 +=> X)=(0, 0);
if ((~(A1) & A3 & A4)) (A2 -=> X)=(0, 0);
if ((A1 & ~(A3) & ~(A4))) (A2 +=> X)=(0, 0);
if ((A1 & ~(A3) & A4)) (A2 -=> X)=(0, 0);
if ((A1 & A3 & ~(A4))) (A2 -=> X)=(0, 0);
if ((A1 & A3 & A4)) (A2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A4)) | (~(A1) & ~(A2) & A4)) (A3 +=> X)=(0, 0);
if ((~(A1) & A2 & A4) | (~(A1) & ~(A2) & ~(A4))) (A3 -=> X)=(0, 0);
if ((A1 & A2 & ~(A4)) | (A1 & ~(A2) & A4)) (A3 -=> X)=(0, 0);
if ((A1 & A2 & A4) | (A1 & ~(A2) & ~(A4))) (A3 +=> X)=(0, 0);
if ((A2 & ~(A3) & ~(A4)) | (~(A2) & ~(A3) & A4)) (A1 +=> X)=(0, 0);
if ((A2 & ~(A3) & A4) | (~(A2) & ~(A3) & ~(A4))) (A1 -=> X)=(0, 0);
if ((A2 & A3 & ~(A4)) | (~(A2) & A3 & A4)) (A1 -=> X)=(0, 0);
if ((A2 & A3 & A4) | (~(A2) & A3 & ~(A4))) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EN4_DGL50_1

//%BEGIN SEH_EN4_DGL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_EN4_DGL50_2 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EN4_DGL50_2 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xnor #1 (X, A1_org, A2_org, A3_org, A4_org);

   `else
         xnor (X, A1_org, A2_org, A3_org, A4_org);

   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2) & ~(A3))) (A4 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3)) (A4 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3))) (A4 +=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (A4 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (A4 +=> X)=(0, 0);
if ((A1 & ~(A2) & A3)) (A4 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3))) (A4 -=> X)=(0, 0);
if ((A1 & A2 & A3)) (A4 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & ~(A4))) (A2 -=> X)=(0, 0);
if ((~(A1) & ~(A3) & A4)) (A2 +=> X)=(0, 0);
if ((~(A1) & A3 & ~(A4))) (A2 +=> X)=(0, 0);
if ((~(A1) & A3 & A4)) (A2 -=> X)=(0, 0);
if ((A1 & ~(A3) & ~(A4))) (A2 +=> X)=(0, 0);
if ((A1 & ~(A3) & A4)) (A2 -=> X)=(0, 0);
if ((A1 & A3 & ~(A4))) (A2 -=> X)=(0, 0);
if ((A1 & A3 & A4)) (A2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A4)) | (~(A1) & ~(A2) & A4)) (A3 +=> X)=(0, 0);
if ((~(A1) & A2 & A4) | (~(A1) & ~(A2) & ~(A4))) (A3 -=> X)=(0, 0);
if ((A1 & A2 & ~(A4)) | (A1 & ~(A2) & A4)) (A3 -=> X)=(0, 0);
if ((A1 & A2 & A4) | (A1 & ~(A2) & ~(A4))) (A3 +=> X)=(0, 0);
if ((A2 & ~(A3) & ~(A4)) | (~(A2) & ~(A3) & A4)) (A1 +=> X)=(0, 0);
if ((A2 & ~(A3) & A4) | (~(A2) & ~(A3) & ~(A4))) (A1 -=> X)=(0, 0);
if ((A2 & A3 & ~(A4)) | (~(A2) & A3 & A4)) (A1 -=> X)=(0, 0);
if ((A2 & A3 & A4) | (~(A2) & A3 & ~(A4))) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EN4_DGL50_2

//%BEGIN SEH_EO2_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_EO2_L50_0P5 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO2_L50_0P5 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org);
   `else
         xor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 +=> X)=(0, 0);
if (A1) (A2 -=> X)=(0, 0);
if (~(A2)) (A1 +=> X)=(0, 0);
if (A2) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO2_L50_0P5

//%BEGIN SEH_EO2_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_EO2_L50_1 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO2_L50_1 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org);
   `else
         xor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 +=> X)=(0, 0);
if (A1) (A2 -=> X)=(0, 0);
if (~(A2)) (A1 +=> X)=(0, 0);
if (A2) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO2_L50_1

//%BEGIN SEH_EO2_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_EO2_L50_2 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO2_L50_2 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org);
   `else
         xor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 +=> X)=(0, 0);
if (A1) (A2 -=> X)=(0, 0);
if (~(A2)) (A1 +=> X)=(0, 0);
if (A2) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO2_L50_2

//%BEGIN SEH_EO2_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_EO2_L50_4 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO2_L50_4 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org);
   `else
         xor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 +=> X)=(0, 0);
if (A1) (A2 -=> X)=(0, 0);
if (~(A2)) (A1 +=> X)=(0, 0);
if (A2) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO2_L50_4

//%BEGIN SEH_EO2_DGL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_EO2_DGL50_1 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO2_DGL50_1 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org);
   `else
         xor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 +=> X)=(0, 0);
if (A1) (A2 -=> X)=(0, 0);
if (~(A2)) (A1 +=> X)=(0, 0);
if (A2) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO2_DGL50_1

//%BEGIN SEH_EO2_DGL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_EO2_DGL50_2 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO2_DGL50_2 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org);
   `else
         xor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 +=> X)=(0, 0);
if (A1) (A2 -=> X)=(0, 0);
if (~(A2)) (A1 +=> X)=(0, 0);
if (A2) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO2_DGL50_2

//%BEGIN SEH_EO2_SL50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_EO2_SL50_0P5 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO2_SL50_0P5 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org);
   `else
         xor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 +=> X)=(0, 0);
if (A1) (A2 -=> X)=(0, 0);
if (~(A2)) (A1 +=> X)=(0, 0);
if (A2) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO2_SL50_0P5

//%BEGIN SEH_EO2_SL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_EO2_SL50_1 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO2_SL50_1 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org);
   `else
         xor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 +=> X)=(0, 0);
if (A1) (A2 -=> X)=(0, 0);
if (~(A2)) (A1 +=> X)=(0, 0);
if (A2) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO2_SL50_1

//%BEGIN SEH_EO2_SL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_EO2_SL50_2 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO2_SL50_2 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org);
   `else
         xor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 +=> X)=(0, 0);
if (A1) (A2 -=> X)=(0, 0);
if (~(A2)) (A1 +=> X)=(0, 0);
if (A2) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO2_SL50_2

//%BEGIN SEH_EO2_SL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_EO2_SL50_4 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO2_SL50_4 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org);
   `else
         xor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 +=> X)=(0, 0);
if (A1) (A2 -=> X)=(0, 0);
if (~(A2)) (A1 +=> X)=(0, 0);
if (A2) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO2_SL50_4

//%BEGIN SEH_EO2_SL50_6

`celldefine
`ifdef BIAS_PINS
module SEH_EO2_SL50_6 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO2_SL50_6 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org);
   `else
         xor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 +=> X)=(0, 0);
if (A1) (A2 -=> X)=(0, 0);
if (~(A2)) (A1 +=> X)=(0, 0);
if (A2) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO2_SL50_6

//%BEGIN SEH_EO2_SL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_EO2_SL50_8 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO2_SL50_8 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org);
   `else
         xor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 +=> X)=(0, 0);
if (A1) (A2 -=> X)=(0, 0);
if (~(A2)) (A1 +=> X)=(0, 0);
if (A2) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO2_SL50_8

//%BEGIN SEH_EO2_GL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_EO2_GL50_1 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO2_GL50_1 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org);
   `else
         xor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 +=> X)=(0, 0);
if (A1) (A2 -=> X)=(0, 0);
if (~(A2)) (A1 +=> X)=(0, 0);
if (A2) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO2_GL50_1

//%BEGIN SEH_EO2_GL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_EO2_GL50_2 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO2_GL50_2 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org);
   `else
         xor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 +=> X)=(0, 0);
if (A1) (A2 -=> X)=(0, 0);
if (~(A2)) (A1 +=> X)=(0, 0);
if (A2) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO2_GL50_2

//%BEGIN SEH_EO2_GL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_EO2_GL50_4 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO2_GL50_4 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org);
   `else
         xor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if (~(A1)) (A2 +=> X)=(0, 0);
if (A1) (A2 -=> X)=(0, 0);
if (~(A2)) (A1 +=> X)=(0, 0);
if (A2) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO2_GL50_4

//%BEGIN SEH_EO3_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_EO3_L50_1 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO3_L50_1 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org, A3_org);
   `else
         xor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2))) (A3 +=> X)=(0, 0);
if ((~(A1) & A2)) (A3 -=> X)=(0, 0);
if ((A1 & ~(A2))) (A3 -=> X)=(0, 0);
if ((A1 & A2)) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A3))) (A2 +=> X)=(0, 0);
if ((~(A1) & A3)) (A2 -=> X)=(0, 0);
if ((A1 & ~(A3))) (A2 -=> X)=(0, 0);
if ((A1 & A3)) (A2 +=> X)=(0, 0);
if ((~(A2) & ~(A3))) (A1 +=> X)=(0, 0);
if ((~(A2) & A3)) (A1 -=> X)=(0, 0);
if ((A2 & ~(A3))) (A1 -=> X)=(0, 0);
if ((A2 & A3)) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO3_L50_1

//%BEGIN SEH_EO3_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_EO3_L50_2 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO3_L50_2 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org, A3_org);
   `else
         xor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2))) (A3 +=> X)=(0, 0);
if ((~(A1) & A2)) (A3 -=> X)=(0, 0);
if ((A1 & ~(A2))) (A3 -=> X)=(0, 0);
if ((A1 & A2)) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A3))) (A2 +=> X)=(0, 0);
if ((~(A1) & A3)) (A2 -=> X)=(0, 0);
if ((A1 & ~(A3))) (A2 -=> X)=(0, 0);
if ((A1 & A3)) (A2 +=> X)=(0, 0);
if ((~(A2) & ~(A3))) (A1 +=> X)=(0, 0);
if ((~(A2) & A3)) (A1 -=> X)=(0, 0);
if ((A2 & ~(A3))) (A1 -=> X)=(0, 0);
if ((A2 & A3)) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO3_L50_2

//%BEGIN SEH_EO3_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_EO3_L50_4 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO3_L50_4 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org, A3_org);
   `else
         xor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2))) (A3 +=> X)=(0, 0);
if ((~(A1) & A2)) (A3 -=> X)=(0, 0);
if ((A1 & ~(A2))) (A3 -=> X)=(0, 0);
if ((A1 & A2)) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A3))) (A2 +=> X)=(0, 0);
if ((~(A1) & A3)) (A2 -=> X)=(0, 0);
if ((A1 & ~(A3))) (A2 -=> X)=(0, 0);
if ((A1 & A3)) (A2 +=> X)=(0, 0);
if ((~(A2) & ~(A3))) (A1 +=> X)=(0, 0);
if ((~(A2) & A3)) (A1 -=> X)=(0, 0);
if ((A2 & ~(A3))) (A1 -=> X)=(0, 0);
if ((A2 & A3)) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO3_L50_4

//%BEGIN SEH_EO3_L50_6

`celldefine
`ifdef BIAS_PINS
module SEH_EO3_L50_6 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO3_L50_6 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org, A3_org);
   `else
         xor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2))) (A3 +=> X)=(0, 0);
if ((~(A1) & A2)) (A3 -=> X)=(0, 0);
if ((A1 & ~(A2))) (A3 -=> X)=(0, 0);
if ((A1 & A2)) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A3))) (A2 +=> X)=(0, 0);
if ((~(A1) & A3)) (A2 -=> X)=(0, 0);
if ((A1 & ~(A3))) (A2 -=> X)=(0, 0);
if ((A1 & A3)) (A2 +=> X)=(0, 0);
if ((~(A2) & ~(A3))) (A1 +=> X)=(0, 0);
if ((~(A2) & A3)) (A1 -=> X)=(0, 0);
if ((A2 & ~(A3))) (A1 -=> X)=(0, 0);
if ((A2 & A3)) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO3_L50_6

//%BEGIN SEH_EO3_DGL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_EO3_DGL50_1 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO3_DGL50_1 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org, A3_org);
   `else
         xor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2))) (A3 +=> X)=(0, 0);
if ((~(A1) & A2)) (A3 -=> X)=(0, 0);
if ((A1 & ~(A2))) (A3 -=> X)=(0, 0);
if ((A1 & A2)) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A3))) (A2 +=> X)=(0, 0);
if ((~(A1) & A3)) (A2 -=> X)=(0, 0);
if ((A1 & ~(A3))) (A2 -=> X)=(0, 0);
if ((A1 & A3)) (A2 +=> X)=(0, 0);
if ((~(A2) & ~(A3))) (A1 +=> X)=(0, 0);
if ((~(A2) & A3)) (A1 -=> X)=(0, 0);
if ((A2 & ~(A3))) (A1 -=> X)=(0, 0);
if ((A2 & A3)) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO3_DGL50_1

//%BEGIN SEH_EO3_DGL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_EO3_DGL50_2 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_EO3_DGL50_2 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         xor #1 (X, A1_org, A2_org, A3_org);
   `else
         xor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2))) (A3 +=> X)=(0, 0);
if ((~(A1) & A2)) (A3 -=> X)=(0, 0);
if ((A1 & ~(A2))) (A3 -=> X)=(0, 0);
if ((A1 & A2)) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A3))) (A2 +=> X)=(0, 0);
if ((~(A1) & A3)) (A2 -=> X)=(0, 0);
if ((A1 & ~(A3))) (A2 -=> X)=(0, 0);
if ((A1 & A3)) (A2 +=> X)=(0, 0);
if ((~(A2) & ~(A3))) (A1 +=> X)=(0, 0);
if ((~(A2) & A3)) (A1 -=> X)=(0, 0);
if ((A2 & ~(A3))) (A1 -=> X)=(0, 0);
if ((A2 & A3)) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_EO3_DGL50_2

//%BEGIN SEH_FDAO22PQ_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FDAO22PQ_L50_1 (Q, CK, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output Q;
   input CK, A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_A1, delayed_A2,
        delayed_B1, delayed_B2;

   wire int_res__DA, int_res__DB, int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDAO22PQ_L50_1 (Q, CK, A1, A2, B1, B2, VDD, VSS);
   output Q;
   input CK, A1, A2, B1, B2, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_A1, delayed_A2,
        delayed_B1, delayed_B2;

   wire int_res__DA, int_res__DB, int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////
   `ifdef _fv
      buf (delayed_CK, CK_org);
      buf (delayed_A1, A1_org);
      buf (delayed_A2, A2_org);
      buf (delayed_B1, B1_org);
      buf (delayed_B2, B2_org);
   `endif

   and (int_res__DA, delayed_A1, delayed_A2);
   and (int_res__DB, delayed_B1, delayed_B2);
   or (int_res__D, int_res__DA, int_res__DB);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
   `else
        buf (Q, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, B1);
and U1 (cond1, _net_0, A2);
not U2 (_net_1, B1);
and U3 (cond1, _net_1, A2);
not U4 (_net_2, B2);
and U5 (cond0, B1, A2, _net_2);
not U6 (_net_3, B2);
and U7 (cond0, B1, A2, _net_3);
not U8 (_net_4, B1);
and U9 (cond3, _net_4, A1);
not U10 (_net_5, B1);
and U11 (cond3, _net_5, A1);
not U12 (_net_6, B2);
and U13 (cond2, B1, A1, _net_6);
not U14 (_net_7, B2);
and U15 (cond2, B1, A1, _net_7);
not U16 (_net_8, A2);
not U17 (_net_9, A1);
and U18 (cond6, _net_8, _net_9, B2);
not U19 (_net_10, A2);
not U20 (_net_11, A1);
and U21 (cond6, _net_10, _net_11, B2);
not U22 (_net_12, A1);
and U23 (cond5, A2, _net_12, B2);
not U24 (_net_13, A1);
and U25 (cond5, A2, _net_13, B2);
not U26 (_net_14, A2);
and U27 (cond4, _net_14, A1, B2);
not U28 (_net_15, A2);
and U29 (cond4, _net_15, A1, B2);
not U30 (_net_16, A2);
not U31 (_net_17, A1);
and U32 (cond9, _net_16, _net_17, B1);
not U33 (_net_18, A2);
not U34 (_net_19, A1);
and U35 (cond9, _net_18, _net_19, B1);
not U36 (_net_20, A1);
and U37 (cond8, A2, _net_20, B1);
not U38 (_net_21, A1);
and U39 (cond8, A2, _net_21, B1);
not U40 (_net_22, A2);
and U41 (cond7, _net_22, A1, B1);
not U42 (_net_23, A2);
and U43 (cond7, _net_23, A1, B1);
not U44 (_net_24, A2);
not U45 (_net_25, B1);
and U46 (_net_26, _net_24, A1, _net_25);
not U47 (_net_27, A2);
not U48 (_net_28, B2);
and U49 (_net_29, _net_27, A1, B1, _net_28);
not U50 (_net_30, A1);
not U51 (_net_31, B2);
and U52 (_net_32, B1, _net_30, _net_31);
not U53 (_net_33, B1);
not U54 (_net_34, A1);
and U55 (_net_35, _net_33, _net_34);
or U56 (cond11, _net_26, _net_29, _net_32, _net_35);
not U57 (_net_36, A2);
and U58 (_net_37, _net_36, A1, B1, B2);
and U59 (_net_38, A2, A1);
not U60 (_net_39, A1);
and U61 (_net_40, B1, _net_39, B2);
or U62 (cond10, _net_37, _net_38, _net_40);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$setuphold(posedge CK &&& cond1 , posedge A1 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond1 , negedge A1 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond0 , posedge A1 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond0 , negedge A1 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond3 , posedge A2 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond3 , negedge A2 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond2 , posedge A2 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond2 , negedge A2 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond6 , posedge B1 &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond6 , negedge B1 &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond5 , posedge B1 &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond5 , negedge B1 &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond4 , posedge B1 &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond4 , negedge B1 &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond9 , posedge B2 &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond9 , negedge B2 &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond8 , posedge B2 &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond8 , negedge B2 &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond7 , posedge B2 &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond7 , negedge B2 &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDAO22PQ_L50_1

//%BEGIN SEH_FDNQ_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FDNQ_L50_1 (Q, CK, D, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire int_res__CK, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDNQ_L50_1 (Q, CK, D, VDD, VSS);
   output Q;
   input CK, D, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire int_res__CK, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
`endif

   not (int_res__CK, delayed_CK);
   scl40_htc50_dff_err (xcr_0, int_res__CK, delayed_D);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff #1 (Q, viol_0, int_res__CK, delayed_D, xcr_0);
   `else
        scl40_htc50_dff (Q, viol_0, int_res__CK, delayed_D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& ~D , 0 ,0, viol_0);
$width(negedge CK &&& ~D , 0 ,0, viol_0);
$width(posedge CK &&& D , 0 ,0, viol_0);
$width(negedge CK &&& D , 0 ,0, viol_0);
$setuphold(negedge CK , posedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK , negedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDNQ_L50_1

//%BEGIN SEH_FDNQ_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FDNQ_L50_2 (Q, CK, D, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire int_res__CK, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDNQ_L50_2 (Q, CK, D, VDD, VSS);
   output Q;
   input CK, D, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire int_res__CK, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
`endif

   not (int_res__CK, delayed_CK);
   scl40_htc50_dff_err (xcr_0, int_res__CK, delayed_D);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff #1 (Q, viol_0, int_res__CK, delayed_D, xcr_0);
   `else
        scl40_htc50_dff (Q, viol_0, int_res__CK, delayed_D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& ~D , 0 ,0, viol_0);
$width(negedge CK &&& ~D , 0 ,0, viol_0);
$width(posedge CK &&& D , 0 ,0, viol_0);
$width(negedge CK &&& D , 0 ,0, viol_0);
$setuphold(negedge CK , posedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK , negedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDNQ_L50_2

//%BEGIN SEH_FDNQ_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FDNQ_L50_4 (Q, CK, D, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire int_res__CK, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDNQ_L50_4 (Q, CK, D, VDD, VSS);
   output Q;
   input CK, D, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire int_res__CK, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
`endif

   not (int_res__CK, delayed_CK);
   scl40_htc50_dff_err (xcr_0, int_res__CK, delayed_D);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff #1 (Q, viol_0, int_res__CK, delayed_D, xcr_0);
   `else
        scl40_htc50_dff (Q, viol_0, int_res__CK, delayed_D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& ~D , 0 ,0, viol_0);
$width(negedge CK &&& ~D , 0 ,0, viol_0);
$width(posedge CK &&& D , 0 ,0, viol_0);
$width(negedge CK &&& D , 0 ,0, viol_0);
$setuphold(negedge CK , posedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK , negedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDNQ_L50_4

//%BEGIN SEH_FDNRBQ_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FDNRBQ_L50_1 (Q, CK, D, RD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RD;

   wire int_res__CK, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDNRBQ_L50_1 (Q, CK, D, RD, VDD, VSS);
   output Q;
   input CK, D, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RD;

   wire int_res__CK, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_RD, RD_org);
`endif

   not (int_res__CK, delayed_CK);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_r_err (xcr_0, int_res__CK, delayed_D, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff_r #1 (Q, viol_0, int_res__CK, delayed_D, int_res__RD, xcr_0);
   `else
        scl40_htc50_dff_r (Q, viol_0, int_res__CK, delayed_D, int_res__RD, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
and U1 (cond5, RD, _net_0);
and U2 (cond4, RD, D);
not U3 (_net_1, D);
not U4 (_net_2, CK);
and U5 (cond3, _net_1, _net_2);
not U6 (_net_3, CK);
and U7 (cond2, D, _net_3);
not U8 (_net_4, D);
and U9 (cond1, _net_4, CK);
and U10 (cond0, D, CK);

specify
if ((~(CK) & ~(D))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D)) (negedge RD => (Q +: 1'b0))=(0, 0);
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(negedge CK &&& RD , posedge D &&& RD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& RD , negedge D &&& RD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond3 , 0 ,0, viol_0);
$width(negedge RD &&& cond2 , 0 ,0, viol_0);
$width(negedge RD &&& cond1 , 0 ,0, viol_0);
$width(negedge RD &&& cond0 , 0 ,0, viol_0);
$recrem(posedge RD &&& D , negedge CK &&& D , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDNRBQ_L50_1

//%BEGIN SEH_FDNRBQ_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FDNRBQ_L50_2 (Q, CK, D, RD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RD;

   wire int_res__CK, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDNRBQ_L50_2 (Q, CK, D, RD, VDD, VSS);
   output Q;
   input CK, D, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RD;

   wire int_res__CK, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_RD, RD_org);
`endif

   not (int_res__CK, delayed_CK);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_r_err (xcr_0, int_res__CK, delayed_D, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff_r #1 (Q, viol_0, int_res__CK, delayed_D, int_res__RD, xcr_0);
   `else
        scl40_htc50_dff_r (Q, viol_0, int_res__CK, delayed_D, int_res__RD, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
and U1 (cond5, RD, _net_0);
and U2 (cond4, RD, D);
not U3 (_net_1, D);
not U4 (_net_2, CK);
and U5 (cond3, _net_1, _net_2);
not U6 (_net_3, CK);
and U7 (cond2, D, _net_3);
not U8 (_net_4, D);
and U9 (cond1, _net_4, CK);
and U10 (cond0, D, CK);

specify
if ((~(CK) & ~(D))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D)) (negedge RD => (Q +: 1'b0))=(0, 0);
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(negedge CK &&& RD , posedge D &&& RD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& RD , negedge D &&& RD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond3 , 0 ,0, viol_0);
$width(negedge RD &&& cond2 , 0 ,0, viol_0);
$width(negedge RD &&& cond1 , 0 ,0, viol_0);
$width(negedge RD &&& cond0 , 0 ,0, viol_0);
$recrem(posedge RD &&& D , negedge CK &&& D , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDNRBQ_L50_2

//%BEGIN SEH_FDNRBQ_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FDNRBQ_L50_4 (Q, CK, D, RD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RD;

   wire int_res__CK, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDNRBQ_L50_4 (Q, CK, D, RD, VDD, VSS);
   output Q;
   input CK, D, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RD;

   wire int_res__CK, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_RD, RD_org);
`endif

   not (int_res__CK, delayed_CK);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_r_err (xcr_0, int_res__CK, delayed_D, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff_r #1 (Q, viol_0, int_res__CK, delayed_D, int_res__RD, xcr_0);
   `else
        scl40_htc50_dff_r (Q, viol_0, int_res__CK, delayed_D, int_res__RD, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
and U1 (cond5, RD, _net_0);
and U2 (cond4, RD, D);
not U3 (_net_1, D);
not U4 (_net_2, CK);
and U5 (cond3, _net_1, _net_2);
not U6 (_net_3, CK);
and U7 (cond2, D, _net_3);
not U8 (_net_4, D);
and U9 (cond1, _net_4, CK);
and U10 (cond0, D, CK);

specify
if ((~(CK) & ~(D))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D)) (negedge RD => (Q +: 1'b0))=(0, 0);
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(negedge CK &&& RD , posedge D &&& RD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& RD , negedge D &&& RD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond3 , 0 ,0, viol_0);
$width(negedge RD &&& cond2 , 0 ,0, viol_0);
$width(negedge RD &&& cond1 , 0 ,0, viol_0);
$width(negedge RD &&& cond0 , 0 ,0, viol_0);
$recrem(posedge RD &&& D , negedge CK &&& D , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDNRBQ_L50_4

//%BEGIN SEH_FDNRBQ_V2L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FDNRBQ_V2L50_1 (Q, CK, D, RD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RD;

   wire int_res__CK, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDNRBQ_V2L50_1 (Q, CK, D, RD, VDD, VSS);
   output Q;
   input CK, D, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RD;

   wire int_res__CK, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_RD, RD_org);
`endif

   not (int_res__CK, delayed_CK);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_r_err (xcr_0, int_res__CK, delayed_D, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff_r #1 (Q, viol_0, int_res__CK, delayed_D, int_res__RD, xcr_0);
   `else
        scl40_htc50_dff_r (Q, viol_0, int_res__CK, delayed_D, int_res__RD, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
and U1 (cond3, RD, _net_0);
and U2 (cond2, RD, D);
not U3 (_net_1, D);
and U4 (cond1, _net_1, CK);
and U5 (cond0, D, CK);

specify
if (~(CK)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D)) (negedge RD => (Q +: 1'b0))=(0, 0);
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond3 , 0 ,0, viol_0);
$width(negedge CK &&& cond3 , 0 ,0, viol_0);
$width(posedge CK &&& cond2 , 0 ,0, viol_0);
$width(negedge CK &&& cond2 , 0 ,0, viol_0);
$setuphold(negedge CK &&& RD , posedge D &&& RD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& RD , negedge D &&& RD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& ~CK , 0 ,0, viol_0);
$width(negedge RD &&& cond1 , 0 ,0, viol_0);
$width(negedge RD &&& cond0 , 0 ,0, viol_0);
$recrem(posedge RD &&& D , negedge CK &&& D , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDNRBQ_V2L50_1

//%BEGIN SEH_FDNRBQ_V2L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FDNRBQ_V2L50_2 (Q, CK, D, RD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RD;

   wire int_res__CK, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDNRBQ_V2L50_2 (Q, CK, D, RD, VDD, VSS);
   output Q;
   input CK, D, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RD;

   wire int_res__CK, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_RD, RD_org);
`endif

   not (int_res__CK, delayed_CK);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_r_err (xcr_0, int_res__CK, delayed_D, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff_r #1 (Q, viol_0, int_res__CK, delayed_D, int_res__RD, xcr_0);
   `else
        scl40_htc50_dff_r (Q, viol_0, int_res__CK, delayed_D, int_res__RD, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
and U1 (cond3, RD, _net_0);
and U2 (cond2, RD, D);
not U3 (_net_1, D);
and U4 (cond1, _net_1, CK);
and U5 (cond0, D, CK);

specify
if (~(CK)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D)) (negedge RD => (Q +: 1'b0))=(0, 0);
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond3 , 0 ,0, viol_0);
$width(negedge CK &&& cond3 , 0 ,0, viol_0);
$width(posedge CK &&& cond2 , 0 ,0, viol_0);
$width(negedge CK &&& cond2 , 0 ,0, viol_0);
$setuphold(negedge CK &&& RD , posedge D &&& RD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& RD , negedge D &&& RD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& ~CK , 0 ,0, viol_0);
$width(negedge RD &&& cond1 , 0 ,0, viol_0);
$width(negedge RD &&& cond0 , 0 ,0, viol_0);
$recrem(posedge RD &&& D , negedge CK &&& D , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDNRBQ_V2L50_2

//%BEGIN SEH_FDNRBQ_V2L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FDNRBQ_V2L50_4 (Q, CK, D, RD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RD;

   wire int_res__CK, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDNRBQ_V2L50_4 (Q, CK, D, RD, VDD, VSS);
   output Q;
   input CK, D, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RD;

   wire int_res__CK, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_RD, RD_org);
`endif

   not (int_res__CK, delayed_CK);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_r_err (xcr_0, int_res__CK, delayed_D, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff_r #1 (Q, viol_0, int_res__CK, delayed_D, int_res__RD, xcr_0);
   `else
        scl40_htc50_dff_r (Q, viol_0, int_res__CK, delayed_D, int_res__RD, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
and U1 (cond3, RD, _net_0);
and U2 (cond2, RD, D);
not U3 (_net_1, D);
and U4 (cond1, _net_1, CK);
and U5 (cond0, D, CK);

specify
if (~(CK)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D)) (negedge RD => (Q +: 1'b0))=(0, 0);
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond3 , 0 ,0, viol_0);
$width(negedge CK &&& cond3 , 0 ,0, viol_0);
$width(posedge CK &&& cond2 , 0 ,0, viol_0);
$width(negedge CK &&& cond2 , 0 ,0, viol_0);
$setuphold(negedge CK &&& RD , posedge D &&& RD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& RD , negedge D &&& RD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& ~CK , 0 ,0, viol_0);
$width(negedge RD &&& cond1 , 0 ,0, viol_0);
$width(negedge RD &&& cond0 , 0 ,0, viol_0);
$recrem(posedge RD &&& D , negedge CK &&& D , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDNRBQ_V2L50_4

//%BEGIN SEH_FDNRBSBQ_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FDNRBSBQ_L50_1 (Q, CK, D, RD, SD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_D, delayed_CK,
	delayed_RD, delayed_SD;

   wire int_res__CK, int_res__RD, int_res__SD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDNRBSBQ_L50_1 (Q, CK, D, RD, SD, VDD, VSS);
   output Q;
   input CK, D, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_D, delayed_CK,
	delayed_RD, delayed_SD;

   wire int_res__CK, int_res__RD, int_res__SD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif


   not (int_res__CK, delayed_CK);
   not (int_res__RD, delayed_RD);
   not (int_res__SD, delayed_SD);
   scl40_htc50_dff_sr_err (xcr_0, int_res__CK, delayed_D, int_res__SD, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
 
   `ifdef VIRL_functiononly
        scl40_htc50_dff_sr_0 #1 (Q, viol_0, int_res__CK, delayed_D, int_res__SD, int_res__RD, xcr_0);
    `else
        scl40_htc50_dff_sr_0 (Q, viol_0, int_res__CK, delayed_D, int_res__SD, int_res__RD, xcr_0);
    `endif

    `ifdef VIRL_functiononly

    `else

not U0 (_net_0, D);
and U1 (cond12, RD, _net_0, SD);
and U2 (cond11, RD, D, SD);
and U3 (cond0, SD, RD);
and U4 (cond0, SD, RD);
not U5 (_net_1, CK);
and U6 (cond6, SD, _net_1);
not U7 (_net_2, D);
and U8 (cond5, _net_2, CK, SD);
not U9 (_net_3, D);
and U10 (cond3, _net_3, CK);
not U11 (_net_4, D);
and U12 (cond3, _net_4, CK);
and U13 (cond4, D, CK, SD);
and U14 (cond2, D, CK);
and U15 (cond2, D, CK);
and U16 (cond1, SD, D);
and U17 (cond1, SD, D);
not U18 (_net_5, CK);
and U19 (cond10, RD, _net_5);
not U20 (_net_6, D);
and U21 (cond7, RD, _net_6);
not U22 (_net_7, D);
and U23 (cond7, RD, _net_7);
not U24 (_net_8, D);
and U25 (cond9, _net_8, CK, RD);
not U26 (_net_9, D);
and U27 (cond3, _net_9, CK);
not U28 (_net_10, D);
and U29 (cond3, _net_10, CK);
and U30 (cond8, D, CK, RD);
and U31 (cond2, D, CK);
and U32 (cond2, D, CK);

specify
if ((~(CK) & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & D & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & ~(D) & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & D & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond12 , 0 ,0, viol_0);
$width(negedge CK &&& cond12 , 0 ,0, viol_0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$setuphold(negedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge SD &&& ~CK , posedge RD &&& ~CK , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond6 , 0 ,0, viol_0);
$width(negedge RD &&& cond5 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond3 , posedge RD &&& cond3 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond4 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond2 , posedge RD &&& cond2 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$recrem(posedge RD &&& cond1 , negedge CK &&& cond1 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge RD &&& ~CK , posedge SD &&& ~CK , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond10 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond7 , negedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond9 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond3 , posedge SD &&& cond3 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond8 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond2 , posedge SD &&& cond2 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_FDNRBSBQ_L50_1

//%BEGIN SEH_FDNRBSBQ_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FDNRBSBQ_L50_2 (Q, CK, D, RD, SD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_D, delayed_CK,
	delayed_RD, delayed_SD;

   wire int_res__CK, int_res__RD, int_res__SD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDNRBSBQ_L50_2 (Q, CK, D, RD, SD, VDD, VSS);
   output Q;
   input CK, D, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_D, delayed_CK,
	delayed_RD, delayed_SD;

   wire int_res__CK, int_res__RD, int_res__SD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif


   not (int_res__CK, delayed_CK);
   not (int_res__RD, delayed_RD);
   not (int_res__SD, delayed_SD);
   scl40_htc50_dff_sr_err (xcr_0, int_res__CK, delayed_D, int_res__SD, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
 
   `ifdef VIRL_functiononly
        scl40_htc50_dff_sr_0 #1 (Q, viol_0, int_res__CK, delayed_D, int_res__SD, int_res__RD, xcr_0);
    `else
        scl40_htc50_dff_sr_0 (Q, viol_0, int_res__CK, delayed_D, int_res__SD, int_res__RD, xcr_0);
    `endif

    `ifdef VIRL_functiononly

    `else

not U0 (_net_0, D);
and U1 (cond12, RD, _net_0, SD);
and U2 (cond11, RD, D, SD);
and U3 (cond0, SD, RD);
and U4 (cond0, SD, RD);
not U5 (_net_1, CK);
and U6 (cond6, SD, _net_1);
not U7 (_net_2, D);
and U8 (cond5, _net_2, CK, SD);
not U9 (_net_3, D);
and U10 (cond3, _net_3, CK);
not U11 (_net_4, D);
and U12 (cond3, _net_4, CK);
and U13 (cond4, D, CK, SD);
and U14 (cond2, D, CK);
and U15 (cond2, D, CK);
and U16 (cond1, SD, D);
and U17 (cond1, SD, D);
not U18 (_net_5, CK);
and U19 (cond10, RD, _net_5);
not U20 (_net_6, D);
and U21 (cond7, RD, _net_6);
not U22 (_net_7, D);
and U23 (cond7, RD, _net_7);
not U24 (_net_8, D);
and U25 (cond9, _net_8, CK, RD);
not U26 (_net_9, D);
and U27 (cond3, _net_9, CK);
not U28 (_net_10, D);
and U29 (cond3, _net_10, CK);
and U30 (cond8, D, CK, RD);
and U31 (cond2, D, CK);
and U32 (cond2, D, CK);

specify
if ((~(CK) & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & D & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & ~(D) & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & D & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond12 , 0 ,0, viol_0);
$width(negedge CK &&& cond12 , 0 ,0, viol_0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$setuphold(negedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge SD &&& ~CK , posedge RD &&& ~CK , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond6 , 0 ,0, viol_0);
$width(negedge RD &&& cond5 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond3 , posedge RD &&& cond3 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond4 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond2 , posedge RD &&& cond2 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$recrem(posedge RD &&& cond1 , negedge CK &&& cond1 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge RD &&& ~CK , posedge SD &&& ~CK , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond10 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond7 , negedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond9 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond3 , posedge SD &&& cond3 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond8 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond2 , posedge SD &&& cond2 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_FDNRBSBQ_L50_2

//%BEGIN SEH_FDNRBSBQ_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FDNRBSBQ_L50_4 (Q, CK, D, RD, SD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_D, delayed_CK,
	delayed_RD, delayed_SD;

   wire int_res__CK, int_res__RD, int_res__SD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDNRBSBQ_L50_4 (Q, CK, D, RD, SD, VDD, VSS);
   output Q;
   input CK, D, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_D, delayed_CK,
	delayed_RD, delayed_SD;

   wire int_res__CK, int_res__RD, int_res__SD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif


   not (int_res__CK, delayed_CK);
   not (int_res__RD, delayed_RD);
   not (int_res__SD, delayed_SD);
   scl40_htc50_dff_sr_err (xcr_0, int_res__CK, delayed_D, int_res__SD, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
 
   `ifdef VIRL_functiononly
        scl40_htc50_dff_sr_0 #1 (Q, viol_0, int_res__CK, delayed_D, int_res__SD, int_res__RD, xcr_0);
    `else
        scl40_htc50_dff_sr_0 (Q, viol_0, int_res__CK, delayed_D, int_res__SD, int_res__RD, xcr_0);
    `endif

    `ifdef VIRL_functiononly

    `else

not U0 (_net_0, D);
and U1 (cond12, RD, _net_0, SD);
and U2 (cond11, RD, D, SD);
and U3 (cond0, SD, RD);
and U4 (cond0, SD, RD);
not U5 (_net_1, CK);
and U6 (cond6, SD, _net_1);
not U7 (_net_2, D);
and U8 (cond5, _net_2, CK, SD);
not U9 (_net_3, D);
and U10 (cond3, _net_3, CK);
not U11 (_net_4, D);
and U12 (cond3, _net_4, CK);
and U13 (cond4, D, CK, SD);
and U14 (cond2, D, CK);
and U15 (cond2, D, CK);
and U16 (cond1, SD, D);
and U17 (cond1, SD, D);
not U18 (_net_5, CK);
and U19 (cond10, RD, _net_5);
not U20 (_net_6, D);
and U21 (cond7, RD, _net_6);
not U22 (_net_7, D);
and U23 (cond7, RD, _net_7);
not U24 (_net_8, D);
and U25 (cond9, _net_8, CK, RD);
not U26 (_net_9, D);
and U27 (cond3, _net_9, CK);
not U28 (_net_10, D);
and U29 (cond3, _net_10, CK);
and U30 (cond8, D, CK, RD);
and U31 (cond2, D, CK);
and U32 (cond2, D, CK);

specify
if ((~(CK) & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & D & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & ~(D) & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & D & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond12 , 0 ,0, viol_0);
$width(negedge CK &&& cond12 , 0 ,0, viol_0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$setuphold(negedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge SD &&& ~CK , posedge RD &&& ~CK , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond6 , 0 ,0, viol_0);
$width(negedge RD &&& cond5 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond3 , posedge RD &&& cond3 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond4 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond2 , posedge RD &&& cond2 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$recrem(posedge RD &&& cond1 , negedge CK &&& cond1 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge RD &&& ~CK , posedge SD &&& ~CK , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond10 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond7 , negedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond9 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond3 , posedge SD &&& cond3 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond8 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond2 , posedge SD &&& cond2 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_FDNRBSBQ_L50_4

//%BEGIN SEH_FDPCBQ_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FDPCBQ_L50_1 (Q, CK, D, RS, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, RS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RS;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPCBQ_L50_1 (Q, CK, D, RS, VDD, VSS);
   output Q;
   input CK, D, RS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RS;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_RS, RS_org);
`endif


   and (int_res__D, delayed_D, delayed_RS);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `else
       scl40_htc50_dff (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, RS);
and U2 (_net_2, _net_1, D);
or U3 (cond1, _net_0, _net_2);
and U4 (cond0, RS, D);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond1 , 0 ,0, viol_0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$width(posedge CK &&& cond0 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(posedge CK &&& RS , posedge D &&& RS , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& RS , negedge D &&& RS , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& D , posedge RS &&& D , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& D , negedge RS &&& D , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPCBQ_L50_1

//%BEGIN SEH_FDPCBQ_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FDPCBQ_L50_2 (Q, CK, D, RS, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, RS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RS;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPCBQ_L50_2 (Q, CK, D, RS, VDD, VSS);
   output Q;
   input CK, D, RS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RS;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_RS, RS_org);
`endif


   and (int_res__D, delayed_D, delayed_RS);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `else
       scl40_htc50_dff (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, RS);
and U2 (_net_2, _net_1, D);
or U3 (cond1, _net_0, _net_2);
and U4 (cond0, RS, D);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond1 , 0 ,0, viol_0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$width(posedge CK &&& cond0 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(posedge CK &&& RS , posedge D &&& RS , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& RS , negedge D &&& RS , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& D , posedge RS &&& D , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& D , negedge RS &&& D , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPCBQ_L50_2

//%BEGIN SEH_FDPCBQ_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FDPCBQ_L50_4 (Q, CK, D, RS, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, RS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RS;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPCBQ_L50_4 (Q, CK, D, RS, VDD, VSS);
   output Q;
   input CK, D, RS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RS;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_RS, RS_org);
`endif


   and (int_res__D, delayed_D, delayed_RS);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `else
       scl40_htc50_dff (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, RS);
and U2 (_net_2, _net_1, D);
or U3 (cond1, _net_0, _net_2);
and U4 (cond0, RS, D);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond1 , 0 ,0, viol_0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$width(posedge CK &&& cond0 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(posedge CK &&& RS , posedge D &&& RS , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& RS , negedge D &&& RS , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& D , posedge RS &&& D , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& D , negedge RS &&& D , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPCBQ_L50_4

//%BEGIN SEH_FDPHQ_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FDPHQ_L50_1 (Q, CK, D, EN, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, EN, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_EN;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPHQ_L50_1 (Q, CK, D, EN, VDD, VSS);
   output Q;
   input CK, D, EN, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_EN;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_EN, EN_org);
`endif


   scl40_htc50_mux2 (int_res__D, int_res_iq, delayed_D, delayed_EN);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly

       buf #1 (Q, int_res_iq);

   `else
       buf (Q, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, EN);
not U1 (_net_1, D);
and U2 (cond1, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (cond0, _net_2, D);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond1 , 0 ,0, viol_0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$width(posedge CK &&& cond0 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~EN , posedge D &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~EN , negedge D &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~D , posedge EN &&& ~D , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~D , negedge EN &&& ~D , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& D , posedge EN &&& D , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& D , negedge EN &&& D , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPHQ_L50_1

//%BEGIN SEH_FDPHQ_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FDPHQ_L50_2 (Q, CK, D, EN, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, EN, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_EN;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPHQ_L50_2 (Q, CK, D, EN, VDD, VSS);
   output Q;
   input CK, D, EN, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_EN;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_EN, EN_org);
`endif


   scl40_htc50_mux2 (int_res__D, int_res_iq, delayed_D, delayed_EN);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly

       buf #1 (Q, int_res_iq);

   `else
       buf (Q, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, EN);
not U1 (_net_1, D);
and U2 (cond1, _net_0, _net_1);
not U3 (_net_2, EN);
and U4 (cond0, _net_2, D);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond1 , 0 ,0, viol_0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$width(posedge CK &&& cond0 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~EN , posedge D &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~EN , negedge D &&& ~EN , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~D , posedge EN &&& ~D , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& ~D , negedge EN &&& ~D , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& D , posedge EN &&& D , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& D , negedge EN &&& D , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPHQ_L50_2

//%BEGIN SEH_FDPHRBSBQ_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FDPHRBSBQ_L50_1 (Q, CK, D, EN, RD, SD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, EN, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_EN, delayed_RD,
        delayed_SD;
   wire int_res__D, int_res__RD, int_res__SD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPHRBSBQ_L50_1 (Q, CK, D, EN, RD, SD, VDD, VSS);
   output Q;
   input CK, D, EN, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_EN, delayed_RD,
        delayed_SD;
   wire int_res__D, int_res__RD, int_res__SD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_EN, EN_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif


   scl40_htc50_mux2 (int_res__D, int_res_iq, delayed_D, delayed_EN);
   not (int_res__RD, delayed_RD);
   not (int_res__SD, delayed_SD);
   scl40_htc50_dff_sr_err (xcr_0, delayed_CK, int_res__D, int_res__SD, int_res__RD);
   scl40_htc50_dff_sr_0 (int_res_iq, viol_0, delayed_CK, int_res__D, int_res__SD, int_res__RD, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly

        buf #1 (Q, int_res_iq);

   `else

        buf (Q, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, EN);
not U1 (_net_1, D);
and U2 (cond27, _net_0, _net_1, RD, SD);
not U3 (_net_2, EN);
and U4 (cond26, _net_2, D, RD, SD);
not U5 (_net_3, EN);
and U6 (cond0, RD, _net_3, SD);
not U7 (_net_4, EN);
and U8 (cond0, RD, _net_4, SD);
not U9 (_net_5, D);
and U10 (cond2, RD, _net_5, SD);
not U11 (_net_6, D);
and U12 (cond2, RD, _net_6, SD);
and U13 (cond1, RD, D, SD);
and U14 (cond1, RD, D, SD);
not U15 (_net_7, D);
not U16 (_net_8, CK);
not U17 (_net_9, EN);
and U18 (cond12, _net_7, _net_8, _net_9, SD);
not U19 (_net_10, D);
not U20 (_net_11, CK);
not U21 (_net_12, EN);
and U22 (cond5, _net_10, _net_11, _net_12);
not U23 (_net_13, D);
not U24 (_net_14, CK);
not U25 (_net_15, EN);
and U26 (cond5, _net_13, _net_14, _net_15);
not U27 (_net_16, D);
not U28 (_net_17, CK);
and U29 (cond11, _net_16, _net_17, EN, SD);
not U30 (_net_18, CK);
not U31 (_net_19, EN);
and U32 (cond10, D, _net_18, _net_19, SD);
not U33 (_net_20, CK);
and U34 (cond9, D, _net_20, EN, SD);
not U35 (_net_21, D);
not U36 (_net_22, CK);
and U37 (_net_23, _net_21, _net_22, EN);
not U38 (_net_24, CK);
and U39 (_net_25, D, _net_24);
or U40 (cond4, _net_23, _net_25);
not U41 (_net_26, D);
not U42 (_net_27, CK);
and U43 (_net_28, _net_26, _net_27, EN);
not U44 (_net_29, CK);
and U45 (_net_30, D, _net_29);
or U46 (cond4, _net_28, _net_30);
not U47 (_net_31, D);
and U48 (cond8, _net_31, CK, EN, SD);
not U49 (_net_32, EN);
and U50 (cond7, _net_32, CK, SD);
and U51 (cond6, D, CK, EN, SD);
not U52 (_net_33, EN);
and U53 (cond3, _net_33, D, SD);
not U54 (_net_34, EN);
and U55 (cond3, _net_34, D, SD);
not U56 (_net_35, D);
not U57 (_net_36, CK);
not U58 (_net_37, EN);
and U59 (cond25, _net_35, _net_36, _net_37, RD);
not U60 (_net_38, D);
not U61 (_net_39, CK);
not U62 (_net_40, EN);
and U63 (cond5, _net_38, _net_39, _net_40);
not U64 (_net_41, D);
not U65 (_net_42, CK);
not U66 (_net_43, EN);
and U67 (cond5, _net_41, _net_42, _net_43);
not U68 (_net_44, D);
not U69 (_net_45, CK);
and U70 (cond24, _net_44, _net_45, EN, RD);
not U71 (_net_46, D);
not U72 (_net_47, CK);
and U73 (cond18, _net_46, _net_47, EN);
not U74 (_net_48, D);
not U75 (_net_49, CK);
and U76 (cond18, _net_48, _net_49, EN);
not U77 (_net_50, CK);
not U78 (_net_51, EN);
and U79 (cond23, D, _net_50, _net_51, RD);
not U80 (_net_52, CK);
and U81 (cond22, D, _net_52, EN, RD);
not U82 (_net_53, CK);
and U83 (cond17, D, _net_53, EN);
not U84 (_net_54, CK);
and U85 (cond17, D, _net_54, EN);
not U86 (_net_55, EN);
not U87 (_net_56, D);
and U88 (cond13, _net_55, _net_56, RD);
not U89 (_net_57, EN);
not U90 (_net_58, D);
and U91 (cond13, _net_57, _net_58, RD);
not U92 (_net_59, D);
and U93 (cond21, _net_59, CK, EN, RD);
not U94 (_net_60, D);
and U95 (cond16, _net_60, CK, EN);
not U96 (_net_61, D);
and U97 (cond16, _net_61, CK, EN);
not U98 (_net_62, EN);
and U99 (cond20, _net_62, CK, RD);
not U100 (_net_63, EN);
and U101 (cond15, _net_63, CK);
not U102 (_net_64, EN);
and U103 (cond15, _net_64, CK);
and U104 (cond19, D, CK, EN, RD);
and U105 (cond14, D, CK, EN);
and U106 (cond14, D, CK, EN);

specify
if ((~(CK) & ~(D) & ~(EN) & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & EN & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & ~(EN) & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & EN & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & ~(D) & EN & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & ~(EN) & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & D & EN & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & ~(EN) & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & EN & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & D & ~(EN) & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & EN & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & EN & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(EN) & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & D & EN & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond27 , 0 ,0, viol_0);
$width(negedge CK &&& cond27 , 0 ,0, viol_0);
$width(posedge CK &&& cond26 , 0 ,0, viol_0);
$width(negedge CK &&& cond26 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond2 , posedge EN &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond2 , negedge EN &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond1 , posedge EN &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond1 , negedge EN &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$width(negedge RD &&& cond12 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond5 , posedge RD &&& cond5 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond11 , 0 ,0, viol_0);
$width(negedge RD &&& cond10 , 0 ,0, viol_0);
$width(negedge RD &&& cond9 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond4 , posedge RD &&& cond4 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond8 , 0 ,0, viol_0);
$width(negedge RD &&& cond7 , 0 ,0, viol_0);
$width(negedge RD &&& cond6 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond3 , posedge CK &&& cond3 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge SD &&& CK , posedge RD &&& CK , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge SD &&& cond25 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond5 , posedge SD &&& cond5 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond24 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond18 , posedge SD &&& cond18 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond23 , 0 ,0, viol_0);
$width(negedge SD &&& cond22 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond17 , posedge SD &&& cond17 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$recrem(posedge SD &&& cond13 , posedge CK &&& cond13 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond21 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond16 , posedge SD &&& cond16 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond20 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond15 , posedge SD &&& cond15 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond19 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond14 , posedge SD &&& cond14 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPHRBSBQ_L50_1

//%BEGIN SEH_FDPHRBSBQ_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FDPHRBSBQ_L50_2 (Q, CK, D, EN, RD, SD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, EN, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_EN, delayed_RD,
        delayed_SD;
   wire int_res__D, int_res__RD, int_res__SD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPHRBSBQ_L50_2 (Q, CK, D, EN, RD, SD, VDD, VSS);
   output Q;
   input CK, D, EN, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_EN, delayed_RD,
        delayed_SD;
   wire int_res__D, int_res__RD, int_res__SD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_EN, EN_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif


   scl40_htc50_mux2 (int_res__D, int_res_iq, delayed_D, delayed_EN);
   not (int_res__RD, delayed_RD);
   not (int_res__SD, delayed_SD);
   scl40_htc50_dff_sr_err (xcr_0, delayed_CK, int_res__D, int_res__SD, int_res__RD);
   scl40_htc50_dff_sr_0 (int_res_iq, viol_0, delayed_CK, int_res__D, int_res__SD, int_res__RD, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly

        buf #1 (Q, int_res_iq);

   `else

        buf (Q, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, EN);
not U1 (_net_1, D);
and U2 (cond27, _net_0, _net_1, RD, SD);
not U3 (_net_2, EN);
and U4 (cond26, _net_2, D, RD, SD);
not U5 (_net_3, EN);
and U6 (cond0, RD, _net_3, SD);
not U7 (_net_4, EN);
and U8 (cond0, RD, _net_4, SD);
not U9 (_net_5, D);
and U10 (cond2, RD, _net_5, SD);
not U11 (_net_6, D);
and U12 (cond2, RD, _net_6, SD);
and U13 (cond1, RD, D, SD);
and U14 (cond1, RD, D, SD);
not U15 (_net_7, D);
not U16 (_net_8, CK);
not U17 (_net_9, EN);
and U18 (cond12, _net_7, _net_8, _net_9, SD);
not U19 (_net_10, D);
not U20 (_net_11, CK);
not U21 (_net_12, EN);
and U22 (cond5, _net_10, _net_11, _net_12);
not U23 (_net_13, D);
not U24 (_net_14, CK);
not U25 (_net_15, EN);
and U26 (cond5, _net_13, _net_14, _net_15);
not U27 (_net_16, D);
not U28 (_net_17, CK);
and U29 (cond11, _net_16, _net_17, EN, SD);
not U30 (_net_18, CK);
not U31 (_net_19, EN);
and U32 (cond10, D, _net_18, _net_19, SD);
not U33 (_net_20, CK);
and U34 (cond9, D, _net_20, EN, SD);
not U35 (_net_21, D);
not U36 (_net_22, CK);
and U37 (_net_23, _net_21, _net_22, EN);
not U38 (_net_24, CK);
and U39 (_net_25, D, _net_24);
or U40 (cond4, _net_23, _net_25);
not U41 (_net_26, D);
not U42 (_net_27, CK);
and U43 (_net_28, _net_26, _net_27, EN);
not U44 (_net_29, CK);
and U45 (_net_30, D, _net_29);
or U46 (cond4, _net_28, _net_30);
not U47 (_net_31, D);
and U48 (cond8, _net_31, CK, EN, SD);
not U49 (_net_32, EN);
and U50 (cond7, _net_32, CK, SD);
and U51 (cond6, D, CK, EN, SD);
not U52 (_net_33, EN);
and U53 (cond3, _net_33, D, SD);
not U54 (_net_34, EN);
and U55 (cond3, _net_34, D, SD);
not U56 (_net_35, D);
not U57 (_net_36, CK);
not U58 (_net_37, EN);
and U59 (cond25, _net_35, _net_36, _net_37, RD);
not U60 (_net_38, D);
not U61 (_net_39, CK);
not U62 (_net_40, EN);
and U63 (cond5, _net_38, _net_39, _net_40);
not U64 (_net_41, D);
not U65 (_net_42, CK);
not U66 (_net_43, EN);
and U67 (cond5, _net_41, _net_42, _net_43);
not U68 (_net_44, D);
not U69 (_net_45, CK);
and U70 (cond24, _net_44, _net_45, EN, RD);
not U71 (_net_46, D);
not U72 (_net_47, CK);
and U73 (cond18, _net_46, _net_47, EN);
not U74 (_net_48, D);
not U75 (_net_49, CK);
and U76 (cond18, _net_48, _net_49, EN);
not U77 (_net_50, CK);
not U78 (_net_51, EN);
and U79 (cond23, D, _net_50, _net_51, RD);
not U80 (_net_52, CK);
and U81 (cond22, D, _net_52, EN, RD);
not U82 (_net_53, CK);
and U83 (cond17, D, _net_53, EN);
not U84 (_net_54, CK);
and U85 (cond17, D, _net_54, EN);
not U86 (_net_55, EN);
not U87 (_net_56, D);
and U88 (cond13, _net_55, _net_56, RD);
not U89 (_net_57, EN);
not U90 (_net_58, D);
and U91 (cond13, _net_57, _net_58, RD);
not U92 (_net_59, D);
and U93 (cond21, _net_59, CK, EN, RD);
not U94 (_net_60, D);
and U95 (cond16, _net_60, CK, EN);
not U96 (_net_61, D);
and U97 (cond16, _net_61, CK, EN);
not U98 (_net_62, EN);
and U99 (cond20, _net_62, CK, RD);
not U100 (_net_63, EN);
and U101 (cond15, _net_63, CK);
not U102 (_net_64, EN);
and U103 (cond15, _net_64, CK);
and U104 (cond19, D, CK, EN, RD);
and U105 (cond14, D, CK, EN);
and U106 (cond14, D, CK, EN);

specify
if ((~(CK) & ~(D) & ~(EN) & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & EN & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & ~(EN) & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & EN & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & ~(D) & EN & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & ~(EN) & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & D & EN & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & ~(EN) & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & EN & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & D & ~(EN) & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & EN & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & EN & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(EN) & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & D & EN & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond27 , 0 ,0, viol_0);
$width(negedge CK &&& cond27 , 0 ,0, viol_0);
$width(posedge CK &&& cond26 , 0 ,0, viol_0);
$width(negedge CK &&& cond26 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond2 , posedge EN &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond2 , negedge EN &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond1 , posedge EN &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond1 , negedge EN &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$width(negedge RD &&& cond12 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond5 , posedge RD &&& cond5 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond11 , 0 ,0, viol_0);
$width(negedge RD &&& cond10 , 0 ,0, viol_0);
$width(negedge RD &&& cond9 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond4 , posedge RD &&& cond4 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond8 , 0 ,0, viol_0);
$width(negedge RD &&& cond7 , 0 ,0, viol_0);
$width(negedge RD &&& cond6 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond3 , posedge CK &&& cond3 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge SD &&& CK , posedge RD &&& CK , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge SD &&& cond25 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond5 , posedge SD &&& cond5 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond24 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond18 , posedge SD &&& cond18 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond23 , 0 ,0, viol_0);
$width(negedge SD &&& cond22 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond17 , posedge SD &&& cond17 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$recrem(posedge SD &&& cond13 , posedge CK &&& cond13 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond21 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond16 , posedge SD &&& cond16 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond20 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond15 , posedge SD &&& cond15 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond19 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond14 , posedge SD &&& cond14 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPHRBSBQ_L50_2

//%BEGIN SEH_FDPMQ_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FDPMQ_L50_1 (Q, CK, D0, D1, S, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D0, D1, S, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D0, delayed_D1, delayed_S;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPMQ_L50_1 (Q, CK, D0, D1, S, VDD, VSS);
   output Q;
   input CK, D0, D1, S, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D0, delayed_D1, delayed_S;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D0, D0_org);
   buf (delayed_D1, D1_org);
   buf (delayed_S, S_org);
`endif


   scl40_htc50_mux2 (int_res__D, delayed_D1, delayed_D0, delayed_S);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `else
         scl40_htc50_dff (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D0);
not U1 (_net_1, S);
and U2 (_net_2, D1, _net_0, _net_1);
not U3 (_net_3, D1);
and U4 (_net_4, _net_3, D0, S);
not U5 (_net_5, D1);
not U6 (_net_6, D0);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond7, _net_2, _net_4, _net_7);
not U9 (_net_8, D1);
not U10 (_net_9, S);
and U11 (_net_10, _net_8, D0, _net_9);
and U12 (_net_11, D1, D0);
not U13 (_net_12, D0);
and U14 (_net_13, D1, _net_12, S);
or U15 (cond6, _net_10, _net_11, _net_13);
not U16 (_net_14, S);
not U17 (_net_15, D1);
and U18 (cond1, _net_14, _net_15);
not U19 (_net_16, S);
not U20 (_net_17, D1);
and U21 (cond1, _net_16, _net_17);
not U22 (_net_18, S);
and U23 (cond0, _net_18, D1);
not U24 (_net_19, S);
and U25 (cond0, _net_19, D1);
not U26 (_net_20, D0);
and U27 (cond3, S, _net_20);
not U28 (_net_21, D0);
and U29 (cond3, S, _net_21);
and U30 (cond2, S, D0);
and U31 (cond2, S, D0);
not U32 (_net_22, D0);
and U33 (cond4, D1, _net_22);
not U34 (_net_23, D0);
and U35 (cond4, D1, _net_23);
not U36 (_net_24, D1);
and U37 (cond5, _net_24, D0);
not U38 (_net_25, D1);
and U39 (cond5, _net_25, D0);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond7 , 0 ,0, viol_0);
$width(negedge CK &&& cond7 , 0 ,0, viol_0);
$width(posedge CK &&& cond6 , 0 ,0, viol_0);
$width(negedge CK &&& cond6 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge D0 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond1 , negedge D0 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond0 , posedge D0 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond0 , negedge D0 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond3 , posedge D1 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond3 , negedge D1 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond2 , posedge D1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond2 , negedge D1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond4 , posedge S &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond4 , negedge S &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond5 , posedge S &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond5 , negedge S &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPMQ_L50_1

//%BEGIN SEH_FDPQ_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FDPQ_L50_1 (Q, CK, D, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPQ_L50_1 (Q, CK, D, VDD, VSS);
   output Q;
   input CK, D, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
`endif


   scl40_htc50_dff_err (xcr_0, delayed_CK, delayed_D);

   `ifdef VIRL_functiononly
        scl40_htc50_dff #1 (Q, viol_0, delayed_CK, delayed_D, xcr_0);
   `else
        scl40_htc50_dff (Q, viol_0, delayed_CK, delayed_D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////




specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& ~D , 0 ,0, viol_0);
$width(negedge CK &&& ~D , 0 ,0, viol_0);
$width(posedge CK &&& D , 0 ,0, viol_0);
$width(negedge CK &&& D , 0 ,0, viol_0);
$setuphold(posedge CK , posedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK , negedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPQ_L50_1

//%BEGIN SEH_FDPQ_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FDPQ_L50_2 (Q, CK, D, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPQ_L50_2 (Q, CK, D, VDD, VSS);
   output Q;
   input CK, D, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
`endif


   scl40_htc50_dff_err (xcr_0, delayed_CK, delayed_D);

   `ifdef VIRL_functiononly
        scl40_htc50_dff #1 (Q, viol_0, delayed_CK, delayed_D, xcr_0);
   `else
        scl40_htc50_dff (Q, viol_0, delayed_CK, delayed_D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////




specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& ~D , 0 ,0, viol_0);
$width(negedge CK &&& ~D , 0 ,0, viol_0);
$width(posedge CK &&& D , 0 ,0, viol_0);
$width(negedge CK &&& D , 0 ,0, viol_0);
$setuphold(posedge CK , posedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK , negedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPQ_L50_2

//%BEGIN SEH_FDPQ_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FDPQ_L50_4 (Q, CK, D, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPQ_L50_4 (Q, CK, D, VDD, VSS);
   output Q;
   input CK, D, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
`endif


   scl40_htc50_dff_err (xcr_0, delayed_CK, delayed_D);

   `ifdef VIRL_functiononly
        scl40_htc50_dff #1 (Q, viol_0, delayed_CK, delayed_D, xcr_0);
   `else
        scl40_htc50_dff (Q, viol_0, delayed_CK, delayed_D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////




specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& ~D , 0 ,0, viol_0);
$width(negedge CK &&& ~D , 0 ,0, viol_0);
$width(posedge CK &&& D , 0 ,0, viol_0);
$width(negedge CK &&& D , 0 ,0, viol_0);
$setuphold(posedge CK , posedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK , negedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPQ_L50_4

//%BEGIN SEH_FDPQ_V2L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FDPQ_V2L50_1 (Q, CK, D, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPQ_V2L50_1 (Q, CK, D, VDD, VSS);
   output Q;
   input CK, D, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
`endif


   scl40_htc50_dff_err (xcr_0, delayed_CK, delayed_D);

   `ifdef VIRL_functiononly
        scl40_htc50_dff #1 (Q, viol_0, delayed_CK, delayed_D, xcr_0);
   `else
        scl40_htc50_dff (Q, viol_0, delayed_CK, delayed_D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////




specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& ~D , 0 ,0, viol_0);
$width(negedge CK &&& ~D , 0 ,0, viol_0);
$width(posedge CK &&& D , 0 ,0, viol_0);
$width(negedge CK &&& D , 0 ,0, viol_0);
$setuphold(posedge CK , posedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK , negedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPQ_V2L50_1

//%BEGIN SEH_FDPQ_V2L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FDPQ_V2L50_2 (Q, CK, D, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPQ_V2L50_2 (Q, CK, D, VDD, VSS);
   output Q;
   input CK, D, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
`endif


   scl40_htc50_dff_err (xcr_0, delayed_CK, delayed_D);

   `ifdef VIRL_functiononly
        scl40_htc50_dff #1 (Q, viol_0, delayed_CK, delayed_D, xcr_0);
   `else
        scl40_htc50_dff (Q, viol_0, delayed_CK, delayed_D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////




specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& ~D , 0 ,0, viol_0);
$width(negedge CK &&& ~D , 0 ,0, viol_0);
$width(posedge CK &&& D , 0 ,0, viol_0);
$width(negedge CK &&& D , 0 ,0, viol_0);
$setuphold(posedge CK , posedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK , negedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPQ_V2L50_2

//%BEGIN SEH_FDPQ_V2L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FDPQ_V2L50_4 (Q, CK, D, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPQ_V2L50_4 (Q, CK, D, VDD, VSS);
   output Q;
   input CK, D, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
`endif


   scl40_htc50_dff_err (xcr_0, delayed_CK, delayed_D);

   `ifdef VIRL_functiononly
        scl40_htc50_dff #1 (Q, viol_0, delayed_CK, delayed_D, xcr_0);
   `else
        scl40_htc50_dff (Q, viol_0, delayed_CK, delayed_D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////




specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& ~D , 0 ,0, viol_0);
$width(negedge CK &&& ~D , 0 ,0, viol_0);
$width(posedge CK &&& D , 0 ,0, viol_0);
$width(negedge CK &&& D , 0 ,0, viol_0);
$setuphold(posedge CK , posedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK , negedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPQ_V2L50_4

//%BEGIN SEH_FDPQB_V2L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FDPQB_V2L50_1 (QN, CK, D, VDD, VSS, VBP, VBN);
   output QN;
   input CK, D, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPQB_V2L50_1 (QN, CK, D, VDD, VSS);
   output QN;
   input CK, D, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
`endif


   scl40_htc50_dff_err (xcr_0, delayed_CK, delayed_D);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, delayed_D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        not #1 (QN, int_res_iq);
   `else
        not (QN, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(posedge CK => (QN : 1'b1))=(0, 0);
$width(posedge CK &&& ~D , 0 ,0, viol_0);
$width(negedge CK &&& ~D , 0 ,0, viol_0);
$width(posedge CK &&& D , 0 ,0, viol_0);
$width(negedge CK &&& D , 0 ,0, viol_0);
$setuphold(posedge CK , posedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK , negedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPQB_V2L50_1

//%BEGIN SEH_FDPQB_V2L50_1P5

`celldefine
`ifdef BIAS_PINS
module SEH_FDPQB_V2L50_1P5 (QN, CK, D, VDD, VSS, VBP, VBN);
   output QN;
   input CK, D, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPQB_V2L50_1P5 (QN, CK, D, VDD, VSS);
   output QN;
   input CK, D, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
`endif


   scl40_htc50_dff_err (xcr_0, delayed_CK, delayed_D);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, delayed_D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        not #1 (QN, int_res_iq);
   `else
        not (QN, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(posedge CK => (QN : 1'b1))=(0, 0);
$width(posedge CK &&& ~D , 0 ,0, viol_0);
$width(negedge CK &&& ~D , 0 ,0, viol_0);
$width(posedge CK &&& D , 0 ,0, viol_0);
$width(negedge CK &&& D , 0 ,0, viol_0);
$setuphold(posedge CK , posedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK , negedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPQB_V2L50_1P5

//%BEGIN SEH_FDPQB_V2L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FDPQB_V2L50_2 (QN, CK, D, VDD, VSS, VBP, VBN);
   output QN;
   input CK, D, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPQB_V2L50_2 (QN, CK, D, VDD, VSS);
   output QN;
   input CK, D, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
`endif


   scl40_htc50_dff_err (xcr_0, delayed_CK, delayed_D);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, delayed_D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        not #1 (QN, int_res_iq);
   `else
        not (QN, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(posedge CK => (QN : 1'b1))=(0, 0);
$width(posedge CK &&& ~D , 0 ,0, viol_0);
$width(negedge CK &&& ~D , 0 ,0, viol_0);
$width(posedge CK &&& D , 0 ,0, viol_0);
$width(negedge CK &&& D , 0 ,0, viol_0);
$setuphold(posedge CK , posedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK , negedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPQB_V2L50_2

//%BEGIN SEH_FDPQB_V2L50_3

`celldefine
`ifdef BIAS_PINS
module SEH_FDPQB_V2L50_3 (QN, CK, D, VDD, VSS, VBP, VBN);
   output QN;
   input CK, D, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPQB_V2L50_3 (QN, CK, D, VDD, VSS);
   output QN;
   input CK, D, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
`endif


   scl40_htc50_dff_err (xcr_0, delayed_CK, delayed_D);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, delayed_D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        not #1 (QN, int_res_iq);
   `else
        not (QN, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(posedge CK => (QN : 1'b1))=(0, 0);
$width(posedge CK &&& ~D , 0 ,0, viol_0);
$width(negedge CK &&& ~D , 0 ,0, viol_0);
$width(posedge CK &&& D , 0 ,0, viol_0);
$width(negedge CK &&& D , 0 ,0, viol_0);
$setuphold(posedge CK , posedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK , negedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPQB_V2L50_3

//%BEGIN SEH_FDPQB_V2L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FDPQB_V2L50_4 (QN, CK, D, VDD, VSS, VBP, VBN);
   output QN;
   input CK, D, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPQB_V2L50_4 (QN, CK, D, VDD, VSS);
   output QN;
   input CK, D, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D;

   wire int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
`endif


   scl40_htc50_dff_err (xcr_0, delayed_CK, delayed_D);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, delayed_D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        not #1 (QN, int_res_iq);
   `else
        not (QN, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(posedge CK => (QN : 1'b1))=(0, 0);
$width(posedge CK &&& ~D , 0 ,0, viol_0);
$width(negedge CK &&& ~D , 0 ,0, viol_0);
$width(posedge CK &&& D , 0 ,0, viol_0);
$width(negedge CK &&& D , 0 ,0, viol_0);
$setuphold(posedge CK , posedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK , negedge D , 0 ,0, viol_0, , , delayed_CK, delayed_D);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPQB_V2L50_4

//%BEGIN SEH_FDPRBQ_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FDPRBQ_L50_1 (Q, CK, D, RD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RD;

   wire int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPRBQ_L50_1 (Q, CK, D, RD, VDD, VSS);
   output Q;
   input CK, D, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RD;

   wire int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_RD, RD_org);
`endif

  
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_r_err (xcr_0, delayed_CK, delayed_D, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         scl40_htc50_dff_r #1 (Q, viol_0, delayed_CK, delayed_D, int_res__RD, xcr_0);
   `else
         scl40_htc50_dff_r (Q, viol_0, delayed_CK, delayed_D, int_res__RD, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
and U1 (cond5, RD, _net_0);
and U2 (cond4, RD, D);
not U3 (_net_1, D);
not U4 (_net_2, CK);
and U5 (cond3, _net_1, _net_2);
not U6 (_net_3, CK);
and U7 (cond2, D, _net_3);
not U8 (_net_4, D);
and U9 (cond1, _net_4, CK);
and U10 (cond0, D, CK);

specify
if ((~(CK) & ~(D))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D)) (negedge RD => (Q +: 1'b0))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(posedge CK &&& RD , posedge D &&& RD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& RD , negedge D &&& RD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond3 , 0 ,0, viol_0);
$width(negedge RD &&& cond2 , 0 ,0, viol_0);
$width(negedge RD &&& cond1 , 0 ,0, viol_0);
$width(negedge RD &&& cond0 , 0 ,0, viol_0);
$recrem(posedge RD &&& D , posedge CK &&& D , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPRBQ_L50_1

//%BEGIN SEH_FDPRBQ_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FDPRBQ_L50_2 (Q, CK, D, RD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RD;

   wire int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPRBQ_L50_2 (Q, CK, D, RD, VDD, VSS);
   output Q;
   input CK, D, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RD;

   wire int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_RD, RD_org);
`endif

  
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_r_err (xcr_0, delayed_CK, delayed_D, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         scl40_htc50_dff_r #1 (Q, viol_0, delayed_CK, delayed_D, int_res__RD, xcr_0);
   `else
         scl40_htc50_dff_r (Q, viol_0, delayed_CK, delayed_D, int_res__RD, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
and U1 (cond5, RD, _net_0);
and U2 (cond4, RD, D);
not U3 (_net_1, D);
not U4 (_net_2, CK);
and U5 (cond3, _net_1, _net_2);
not U6 (_net_3, CK);
and U7 (cond2, D, _net_3);
not U8 (_net_4, D);
and U9 (cond1, _net_4, CK);
and U10 (cond0, D, CK);

specify
if ((~(CK) & ~(D))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D)) (negedge RD => (Q +: 1'b0))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(posedge CK &&& RD , posedge D &&& RD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& RD , negedge D &&& RD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond3 , 0 ,0, viol_0);
$width(negedge RD &&& cond2 , 0 ,0, viol_0);
$width(negedge RD &&& cond1 , 0 ,0, viol_0);
$width(negedge RD &&& cond0 , 0 ,0, viol_0);
$recrem(posedge RD &&& D , posedge CK &&& D , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPRBQ_L50_2

//%BEGIN SEH_FDPRBQ_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FDPRBQ_L50_4 (Q, CK, D, RD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RD;

   wire int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPRBQ_L50_4 (Q, CK, D, RD, VDD, VSS);
   output Q;
   input CK, D, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_RD;

   wire int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_RD, RD_org);
`endif

  
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_r_err (xcr_0, delayed_CK, delayed_D, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         scl40_htc50_dff_r #1 (Q, viol_0, delayed_CK, delayed_D, int_res__RD, xcr_0);
   `else
         scl40_htc50_dff_r (Q, viol_0, delayed_CK, delayed_D, int_res__RD, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
and U1 (cond5, RD, _net_0);
and U2 (cond4, RD, D);
not U3 (_net_1, D);
not U4 (_net_2, CK);
and U5 (cond3, _net_1, _net_2);
not U6 (_net_3, CK);
and U7 (cond2, D, _net_3);
not U8 (_net_4, D);
and U9 (cond1, _net_4, CK);
and U10 (cond0, D, CK);

specify
if ((~(CK) & ~(D))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D)) (negedge RD => (Q +: 1'b0))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(posedge CK &&& RD , posedge D &&& RD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& RD , negedge D &&& RD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond3 , 0 ,0, viol_0);
$width(negedge RD &&& cond2 , 0 ,0, viol_0);
$width(negedge RD &&& cond1 , 0 ,0, viol_0);
$width(negedge RD &&& cond0 , 0 ,0, viol_0);
$recrem(posedge RD &&& D , posedge CK &&& D , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPRBQ_L50_4

//%BEGIN SEH_FDPRBSBQ_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FDPRBSBQ_L50_1 (Q, CK, D, RD, SD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_RD, delayed_SD;

   wire int_res__SD, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPRBSBQ_L50_1 (Q, CK, D, RD, SD, VDD, VSS);
   output Q;
   input CK, D, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_RD, delayed_SD;

   wire int_res__SD, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_D, D_org);
   buf (delayed_CK, CK_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif


   not (int_res__SD, delayed_SD);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_sr_err (xcr_0, delayed_CK, delayed_D, int_res__SD, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff_sr_0 #1 (Q, viol_0, delayed_CK, delayed_D, int_res__SD, int_res__RD, xcr_0);
   `else
        scl40_htc50_dff_sr_0 (Q, viol_0, delayed_CK, delayed_D, int_res__SD, int_res__RD, xcr_0); 

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
and U1 (cond12, RD, _net_0, SD);
and U2 (cond11, RD, D, SD);
and U3 (cond0, SD, RD);
and U4 (cond0, SD, RD);
not U5 (_net_1, D);
not U6 (_net_2, CK);
and U7 (cond6, _net_1, _net_2, SD);
not U8 (_net_3, D);
not U9 (_net_4, CK);
and U10 (cond3, _net_3, _net_4);
not U11 (_net_5, D);
not U12 (_net_6, CK);
and U13 (cond3, _net_5, _net_6);
not U14 (_net_7, CK);
and U15 (cond5, D, _net_7, SD);
not U16 (_net_8, CK);
and U17 (cond2, D, _net_8);
not U18 (_net_9, CK);
and U19 (cond2, D, _net_9);
and U20 (cond4, SD, CK);
and U21 (cond1, SD, D);
and U22 (cond1, SD, D);
not U23 (_net_10, D);
not U24 (_net_11, CK);
and U25 (cond10, _net_10, _net_11, RD);
not U26 (_net_12, D);
not U27 (_net_13, CK);
and U28 (cond3, _net_12, _net_13);
not U29 (_net_14, D);
not U30 (_net_15, CK);
and U31 (cond3, _net_14, _net_15);
not U32 (_net_16, CK);
and U33 (cond9, D, _net_16, RD);
not U34 (_net_17, CK);
and U35 (cond2, D, _net_17);
not U36 (_net_18, CK);
and U37 (cond2, D, _net_18);
not U38 (_net_19, D);
and U39 (cond7, RD, _net_19);
not U40 (_net_20, D);
and U41 (cond7, RD, _net_20);
and U42 (cond8, RD, CK);

specify
if ((~(CK) & ~(D) & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & D & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond12 , 0 ,0, viol_0);
$width(negedge CK &&& cond12 , 0 ,0, viol_0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond6 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond3 , posedge RD &&& cond3 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond5 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond2 , posedge RD &&& cond2 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond4 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond1 , posedge CK &&& cond1 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge SD &&& CK , posedge RD &&& CK , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge SD &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond3 , posedge SD &&& cond3 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond9 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond2 , posedge SD &&& cond2 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$recrem(posedge SD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond8 , 0 ,0, viol_0);
$setuphold(posedge RD &&& CK , posedge SD &&& CK , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPRBSBQ_L50_1

//%BEGIN SEH_FDPRBSBQ_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FDPRBSBQ_L50_2 (Q, CK, D, RD, SD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_RD, delayed_SD;

   wire int_res__SD, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPRBSBQ_L50_2 (Q, CK, D, RD, SD, VDD, VSS);
   output Q;
   input CK, D, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_RD, delayed_SD;

   wire int_res__SD, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_D, D_org);
   buf (delayed_CK, CK_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif


   not (int_res__SD, delayed_SD);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_sr_err (xcr_0, delayed_CK, delayed_D, int_res__SD, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff_sr_0 #1 (Q, viol_0, delayed_CK, delayed_D, int_res__SD, int_res__RD, xcr_0);
   `else
        scl40_htc50_dff_sr_0 (Q, viol_0, delayed_CK, delayed_D, int_res__SD, int_res__RD, xcr_0); 

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
and U1 (cond12, RD, _net_0, SD);
and U2 (cond11, RD, D, SD);
and U3 (cond0, SD, RD);
and U4 (cond0, SD, RD);
not U5 (_net_1, D);
not U6 (_net_2, CK);
and U7 (cond6, _net_1, _net_2, SD);
not U8 (_net_3, D);
not U9 (_net_4, CK);
and U10 (cond3, _net_3, _net_4);
not U11 (_net_5, D);
not U12 (_net_6, CK);
and U13 (cond3, _net_5, _net_6);
not U14 (_net_7, CK);
and U15 (cond5, D, _net_7, SD);
not U16 (_net_8, CK);
and U17 (cond2, D, _net_8);
not U18 (_net_9, CK);
and U19 (cond2, D, _net_9);
and U20 (cond4, SD, CK);
and U21 (cond1, SD, D);
and U22 (cond1, SD, D);
not U23 (_net_10, D);
not U24 (_net_11, CK);
and U25 (cond10, _net_10, _net_11, RD);
not U26 (_net_12, D);
not U27 (_net_13, CK);
and U28 (cond3, _net_12, _net_13);
not U29 (_net_14, D);
not U30 (_net_15, CK);
and U31 (cond3, _net_14, _net_15);
not U32 (_net_16, CK);
and U33 (cond9, D, _net_16, RD);
not U34 (_net_17, CK);
and U35 (cond2, D, _net_17);
not U36 (_net_18, CK);
and U37 (cond2, D, _net_18);
not U38 (_net_19, D);
and U39 (cond7, RD, _net_19);
not U40 (_net_20, D);
and U41 (cond7, RD, _net_20);
and U42 (cond8, RD, CK);

specify
if ((~(CK) & ~(D) & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & D & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond12 , 0 ,0, viol_0);
$width(negedge CK &&& cond12 , 0 ,0, viol_0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond6 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond3 , posedge RD &&& cond3 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond5 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond2 , posedge RD &&& cond2 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond4 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond1 , posedge CK &&& cond1 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge SD &&& CK , posedge RD &&& CK , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge SD &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond3 , posedge SD &&& cond3 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond9 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond2 , posedge SD &&& cond2 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$recrem(posedge SD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond8 , 0 ,0, viol_0);
$setuphold(posedge RD &&& CK , posedge SD &&& CK , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPRBSBQ_L50_2

//%BEGIN SEH_FDPRBSBQ_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FDPRBSBQ_L50_4 (Q, CK, D, RD, SD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_RD, delayed_SD;

   wire int_res__SD, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPRBSBQ_L50_4 (Q, CK, D, RD, SD, VDD, VSS);
   output Q;
   input CK, D, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_RD, delayed_SD;

   wire int_res__SD, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_D, D_org);
   buf (delayed_CK, CK_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif


   not (int_res__SD, delayed_SD);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_sr_err (xcr_0, delayed_CK, delayed_D, int_res__SD, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff_sr_0 #1 (Q, viol_0, delayed_CK, delayed_D, int_res__SD, int_res__RD, xcr_0);
   `else
        scl40_htc50_dff_sr_0 (Q, viol_0, delayed_CK, delayed_D, int_res__SD, int_res__RD, xcr_0); 

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
and U1 (cond12, RD, _net_0, SD);
and U2 (cond11, RD, D, SD);
and U3 (cond0, SD, RD);
and U4 (cond0, SD, RD);
not U5 (_net_1, D);
not U6 (_net_2, CK);
and U7 (cond6, _net_1, _net_2, SD);
not U8 (_net_3, D);
not U9 (_net_4, CK);
and U10 (cond3, _net_3, _net_4);
not U11 (_net_5, D);
not U12 (_net_6, CK);
and U13 (cond3, _net_5, _net_6);
not U14 (_net_7, CK);
and U15 (cond5, D, _net_7, SD);
not U16 (_net_8, CK);
and U17 (cond2, D, _net_8);
not U18 (_net_9, CK);
and U19 (cond2, D, _net_9);
and U20 (cond4, SD, CK);
and U21 (cond1, SD, D);
and U22 (cond1, SD, D);
not U23 (_net_10, D);
not U24 (_net_11, CK);
and U25 (cond10, _net_10, _net_11, RD);
not U26 (_net_12, D);
not U27 (_net_13, CK);
and U28 (cond3, _net_12, _net_13);
not U29 (_net_14, D);
not U30 (_net_15, CK);
and U31 (cond3, _net_14, _net_15);
not U32 (_net_16, CK);
and U33 (cond9, D, _net_16, RD);
not U34 (_net_17, CK);
and U35 (cond2, D, _net_17);
not U36 (_net_18, CK);
and U37 (cond2, D, _net_18);
not U38 (_net_19, D);
and U39 (cond7, RD, _net_19);
not U40 (_net_20, D);
and U41 (cond7, RD, _net_20);
and U42 (cond8, RD, CK);

specify
if ((~(CK) & ~(D) & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & D & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond12 , 0 ,0, viol_0);
$width(negedge CK &&& cond12 , 0 ,0, viol_0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond6 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond3 , posedge RD &&& cond3 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond5 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond2 , posedge RD &&& cond2 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond4 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond1 , posedge CK &&& cond1 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge SD &&& CK , posedge RD &&& CK , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge SD &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond3 , posedge SD &&& cond3 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond9 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond2 , posedge SD &&& cond2 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$recrem(posedge SD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond8 , 0 ,0, viol_0);
$setuphold(posedge RD &&& CK , posedge SD &&& CK , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPRBSBQ_L50_4

//%BEGIN SEH_FDPSBQ_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FDPSBQ_L50_1 (Q, CK, D, SD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SD;

   wire int_res__SD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPSBQ_L50_1 (Q, CK, D, SD, VDD, VSS);
   output Q;
   input CK, D, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SD;

   wire int_res__SD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SD, SD_org);
`endif


   not (int_res__SD, delayed_SD);
   scl40_htc50_dff_s_err (xcr_0, delayed_CK, delayed_D, int_res__SD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

  `ifdef VIRL_functiononly
      scl40_htc50_dff_s #1 (Q, viol_0, delayed_CK, delayed_D, int_res__SD, xcr_0);

  `else
      scl40_htc50_dff_s (Q, viol_0, delayed_CK, delayed_D, int_res__SD, xcr_0);

  `endif

  `ifdef VIRL_functiononly

  `else

not U0 (_net_0, D);
and U1 (cond3, SD, _net_0);
and U2 (cond2, SD, D);
not U3 (_net_1, D);
not U4 (_net_2, CK);
and U5 (cond1, _net_1, _net_2);
not U6 (_net_3, CK);
and U7 (cond0, D, _net_3);

specify
if ((~(CK) & ~(D))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D)) (negedge SD => (Q -: 1'b1))=(0, 0);
if (CK) (negedge SD => (Q -: 1'b1))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond3 , 0 ,0, viol_0);
$width(negedge CK &&& cond3 , 0 ,0, viol_0);
$width(posedge CK &&& cond2 , 0 ,0, viol_0);
$width(negedge CK &&& cond2 , 0 ,0, viol_0);
$setuphold(posedge CK &&& SD , posedge D &&& SD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& SD , negedge D &&& SD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$recrem(posedge SD &&& ~D , posedge CK &&& ~D , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond1 , 0 ,0, viol_0);
$width(negedge SD &&& cond0 , 0 ,0, viol_0);
$width(negedge SD &&& CK , 0 ,0, viol_0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPSBQ_L50_1

//%BEGIN SEH_FDPSBQ_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FDPSBQ_L50_2 (Q, CK, D, SD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SD;

   wire int_res__SD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPSBQ_L50_2 (Q, CK, D, SD, VDD, VSS);
   output Q;
   input CK, D, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SD;

   wire int_res__SD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SD, SD_org);
`endif


   not (int_res__SD, delayed_SD);
   scl40_htc50_dff_s_err (xcr_0, delayed_CK, delayed_D, int_res__SD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

  `ifdef VIRL_functiononly
      scl40_htc50_dff_s #1 (Q, viol_0, delayed_CK, delayed_D, int_res__SD, xcr_0);

  `else
      scl40_htc50_dff_s (Q, viol_0, delayed_CK, delayed_D, int_res__SD, xcr_0);

  `endif

  `ifdef VIRL_functiononly

  `else

not U0 (_net_0, D);
and U1 (cond3, SD, _net_0);
and U2 (cond2, SD, D);
not U3 (_net_1, D);
not U4 (_net_2, CK);
and U5 (cond1, _net_1, _net_2);
not U6 (_net_3, CK);
and U7 (cond0, D, _net_3);

specify
if ((~(CK) & ~(D))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D)) (negedge SD => (Q -: 1'b1))=(0, 0);
if (CK) (negedge SD => (Q -: 1'b1))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond3 , 0 ,0, viol_0);
$width(negedge CK &&& cond3 , 0 ,0, viol_0);
$width(posedge CK &&& cond2 , 0 ,0, viol_0);
$width(negedge CK &&& cond2 , 0 ,0, viol_0);
$setuphold(posedge CK &&& SD , posedge D &&& SD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& SD , negedge D &&& SD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$recrem(posedge SD &&& ~D , posedge CK &&& ~D , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond1 , 0 ,0, viol_0);
$width(negedge SD &&& cond0 , 0 ,0, viol_0);
$width(negedge SD &&& CK , 0 ,0, viol_0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPSBQ_L50_2

//%BEGIN SEH_FDPSBQ_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FDPSBQ_L50_4 (Q, CK, D, SD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SD;

   wire int_res__SD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPSBQ_L50_4 (Q, CK, D, SD, VDD, VSS);
   output Q;
   input CK, D, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SD;

   wire int_res__SD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SD, SD_org);
`endif


   not (int_res__SD, delayed_SD);
   scl40_htc50_dff_s_err (xcr_0, delayed_CK, delayed_D, int_res__SD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

  `ifdef VIRL_functiononly
      scl40_htc50_dff_s #1 (Q, viol_0, delayed_CK, delayed_D, int_res__SD, xcr_0);

  `else
      scl40_htc50_dff_s (Q, viol_0, delayed_CK, delayed_D, int_res__SD, xcr_0);

  `endif

  `ifdef VIRL_functiononly

  `else

not U0 (_net_0, D);
and U1 (cond3, SD, _net_0);
and U2 (cond2, SD, D);
not U3 (_net_1, D);
not U4 (_net_2, CK);
and U5 (cond1, _net_1, _net_2);
not U6 (_net_3, CK);
and U7 (cond0, D, _net_3);

specify
if ((~(CK) & ~(D))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D)) (negedge SD => (Q -: 1'b1))=(0, 0);
if (CK) (negedge SD => (Q -: 1'b1))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond3 , 0 ,0, viol_0);
$width(negedge CK &&& cond3 , 0 ,0, viol_0);
$width(posedge CK &&& cond2 , 0 ,0, viol_0);
$width(negedge CK &&& cond2 , 0 ,0, viol_0);
$setuphold(posedge CK &&& SD , posedge D &&& SD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& SD , negedge D &&& SD , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$recrem(posedge SD &&& ~D , posedge CK &&& ~D , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond1 , 0 ,0, viol_0);
$width(negedge SD &&& cond0 , 0 ,0, viol_0);
$width(negedge SD &&& CK , 0 ,0, viol_0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FDPSBQ_L50_4

//%BEGIN SEH_FDPTQ_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FDPTQ_L50_1 (Q, CK, D, SS, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SS;

   wire int_res__D, int_res__SS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SS_org, SS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FDPTQ_L50_1 (Q, CK, D, SS, VDD, VSS);
   output Q;
   input CK, D, SS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SS;

   wire int_res__D, int_res__SS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SS_org, SS, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SS, SS_org);
`endif


   or (int_res__D, delayed_D, delayed_SS);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `else
        scl40_htc50_dff (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, SS);
not U1 (_net_1, D);
and U2 (cond1, _net_0, _net_1);
not U3 (_net_2, D);
and U4 (_net_3, SS, _net_2);
or U5 (cond0, _net_3, D);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond1 , 0 ,0, viol_0);
$width(negedge CK &&& cond1 , 0 ,0, viol_0);
$width(posedge CK &&& cond0 , 0 ,0, viol_0);
$width(negedge CK &&& cond0 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SS , posedge D &&& ~SS , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~SS , negedge D &&& ~SS , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~D , posedge SS &&& ~D , 0 ,0, viol_0, , , delayed_CK, delayed_SS);
$setuphold(posedge CK &&& ~D , negedge SS &&& ~D , 0 ,0, viol_0, , , delayed_CK, delayed_SS);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_FDPTQ_L50_1

//%BEGIN SEH_FSDAO22PQ_DL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDAO22PQ_DL50_1 (Q, CK, A1, A2, B1, B2, SI, SE, VDD, VSS, VBP, VBN);
   output Q;
   input CK, A1, A2, B1, B2, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_A1, delayed_A2,
        delayed_B1, delayed_B2, delayed_SI,
	delayed_SE;

   wire int_res__DA, int_res__DB, int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDAO22PQ_DL50_1 (Q, CK, A1, A2, B1, B2, SI, SE, VDD, VSS);
   output Q;
   input CK, A1, A2, B1, B2, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_A1, delayed_A2,
        delayed_B1, delayed_B2, delayed_SI,
	delayed_SE;

   wire int_res__DA, int_res__DB, int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_A1, A1_org);
   buf (delayed_A2, A2_org);
   buf (delayed_B1, B1_org);
   buf (delayed_B2, B2_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif


   and (int_res__DA, delayed_A1, delayed_A2);
   and (int_res__DB, delayed_B1, delayed_B2);
   or (int_res__D, int_res__DA, int_res__DB);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res_mux, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
   `else
        buf (Q, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, B1);
not U1 (_net_1, B2);
not U2 (_net_2, SE);
and U3 (cond2, _net_0, A2, _net_1, _net_2);
not U4 (_net_3, B1);
not U5 (_net_4, B2);
not U6 (_net_5, SE);
and U7 (cond2, _net_3, A2, _net_4, _net_5);
not U8 (_net_6, B1);
not U9 (_net_7, SE);
and U10 (cond1, _net_6, A2, B2, _net_7);
not U11 (_net_8, B1);
not U12 (_net_9, SE);
and U13 (cond1, _net_8, A2, B2, _net_9);
not U14 (_net_10, B2);
not U15 (_net_11, SE);
and U16 (cond0, B1, A2, _net_10, _net_11);
not U17 (_net_12, B2);
not U18 (_net_13, SE);
and U19 (cond0, B1, A2, _net_12, _net_13);
not U20 (_net_14, B1);
not U21 (_net_15, B2);
not U22 (_net_16, SE);
and U23 (cond5, _net_14, A1, _net_15, _net_16);
not U24 (_net_17, B1);
not U25 (_net_18, B2);
not U26 (_net_19, SE);
and U27 (cond5, _net_17, A1, _net_18, _net_19);
not U28 (_net_20, B1);
not U29 (_net_21, SE);
and U30 (cond4, _net_20, A1, B2, _net_21);
not U31 (_net_22, B1);
not U32 (_net_23, SE);
and U33 (cond4, _net_22, A1, B2, _net_23);
not U34 (_net_24, B2);
not U35 (_net_25, SE);
and U36 (cond3, B1, A1, _net_24, _net_25);
not U37 (_net_26, B2);
not U38 (_net_27, SE);
and U39 (cond3, B1, A1, _net_26, _net_27);
not U40 (_net_28, A2);
not U41 (_net_29, A1);
not U42 (_net_30, SE);
and U43 (cond8, _net_28, _net_29, B2, _net_30);
not U44 (_net_31, A2);
not U45 (_net_32, A1);
not U46 (_net_33, SE);
and U47 (cond8, _net_31, _net_32, B2, _net_33);
not U48 (_net_34, A1);
not U49 (_net_35, SE);
and U50 (cond7, A2, _net_34, B2, _net_35);
not U51 (_net_36, A1);
not U52 (_net_37, SE);
and U53 (cond7, A2, _net_36, B2, _net_37);
not U54 (_net_38, A2);
not U55 (_net_39, SE);
and U56 (cond6, _net_38, A1, B2, _net_39);
not U57 (_net_40, A2);
not U58 (_net_41, SE);
and U59 (cond6, _net_40, A1, B2, _net_41);
not U60 (_net_42, A2);
not U61 (_net_43, A1);
not U62 (_net_44, SE);
and U63 (cond11, _net_42, _net_43, B1, _net_44);
not U64 (_net_45, A2);
not U65 (_net_46, A1);
not U66 (_net_47, SE);
and U67 (cond11, _net_45, _net_46, B1, _net_47);
not U68 (_net_48, A1);
not U69 (_net_49, SE);
and U70 (cond10, A2, _net_48, B1, _net_49);
not U71 (_net_50, A1);
not U72 (_net_51, SE);
and U73 (cond10, A2, _net_50, B1, _net_51);
not U74 (_net_52, A2);
not U75 (_net_53, SE);
and U76 (cond9, _net_52, A1, B1, _net_53);
not U77 (_net_54, A2);
not U78 (_net_55, SE);
and U79 (cond9, _net_54, A1, B1, _net_55);
not U80 (_net_56, A2);
not U81 (_net_57, SI);
and U82 (_net_58, _net_56, A1, B1, B2, SE, _net_57);
not U83 (_net_59, SI);
and U84 (_net_60, A2, A1, SE, _net_59);
not U85 (_net_61, A2);
not U86 (_net_62, B2);
not U87 (_net_63, SI);
and U88 (_net_64, _net_61, A1, B1, _net_62, SE, _net_63);
not U89 (_net_65, A2);
not U90 (_net_66, B2);
not U91 (_net_67, SE);
and U92 (_net_68, _net_65, A1, B1, _net_66, _net_67);
not U93 (_net_69, A2);
not U94 (_net_70, B1);
not U95 (_net_71, SI);
and U96 (_net_72, _net_69, A1, _net_70, SE, _net_71);
not U97 (_net_73, A2);
not U98 (_net_74, B1);
not U99 (_net_75, SE);
and U100 (_net_76, _net_73, A1, _net_74, _net_75);
not U101 (_net_77, A1);
not U102 (_net_78, SI);
and U103 (_net_79, B1, _net_77, B2, SE, _net_78);
not U104 (_net_80, A1);
not U105 (_net_81, B2);
not U106 (_net_82, SI);
and U107 (_net_83, B1, _net_80, _net_81, SE, _net_82);
not U108 (_net_84, A1);
not U109 (_net_85, B2);
not U110 (_net_86, SE);
and U111 (_net_87, B1, _net_84, _net_85, _net_86);
not U112 (_net_88, B1);
not U113 (_net_89, A1);
not U114 (_net_90, SI);
and U115 (_net_91, _net_88, _net_89, SE, _net_90);
not U116 (_net_92, B1);
not U117 (_net_93, A1);
not U118 (_net_94, SE);
and U119 (_net_95, _net_92, _net_93, _net_94);
or U120 (cond17, _net_58, _net_60, _net_64, _net_68, _net_72, _net_76, _net_79, _net_83, _net_87, _net_91, _net_95);
not U121 (_net_96, SE);
and U122 (_net_97, A2, A1, _net_96);
and U123 (_net_98, A2, A1, SE, SI);
not U124 (_net_99, A2);
and U125 (_net_100, _net_99, A1, B1, B2, SE, SI);
not U126 (_net_101, A2);
not U127 (_net_102, SE);
and U128 (_net_103, _net_101, A1, B1, B2, _net_102);
not U129 (_net_104, A2);
not U130 (_net_105, B2);
and U131 (_net_106, _net_104, A1, B1, _net_105, SE, SI);
not U132 (_net_107, A2);
not U133 (_net_108, B1);
and U134 (_net_109, _net_107, A1, _net_108, SE, SI);
not U135 (_net_110, A1);
and U136 (_net_111, B1, _net_110, B2, SE, SI);
not U137 (_net_112, A1);
not U138 (_net_113, SE);
and U139 (_net_114, B1, _net_112, B2, _net_113);
not U140 (_net_115, A1);
not U141 (_net_116, B2);
and U142 (_net_117, B1, _net_115, _net_116, SE, SI);
not U143 (_net_118, B1);
not U144 (_net_119, A1);
and U145 (_net_120, _net_118, _net_119, SE, SI);
or U146 (cond16, _net_97, _net_98, _net_100, _net_103, _net_106, _net_109, _net_111, _net_114, _net_117, _net_120);
not U147 (_net_121, A2);
not U148 (_net_122, B1);
and U149 (_net_123, _net_121, A1, _net_122, SI);
not U150 (_net_124, A2);
not U151 (_net_125, B2);
and U152 (_net_126, _net_124, A1, B1, _net_125, SI);
not U153 (_net_127, A1);
not U154 (_net_128, B2);
and U155 (_net_129, B1, _net_127, _net_128, SI);
not U156 (_net_130, B1);
not U157 (_net_131, A1);
and U158 (_net_132, _net_130, _net_131, SI);
or U159 (cond12, _net_123, _net_126, _net_129, _net_132);
not U160 (_net_133, A2);
not U161 (_net_134, B1);
and U162 (_net_135, _net_133, A1, _net_134, SI);
not U163 (_net_136, A2);
not U164 (_net_137, B2);
and U165 (_net_138, _net_136, A1, B1, _net_137, SI);
not U166 (_net_139, A1);
not U167 (_net_140, B2);
and U168 (_net_141, B1, _net_139, _net_140, SI);
not U169 (_net_142, B1);
not U170 (_net_143, A1);
and U171 (_net_144, _net_142, _net_143, SI);
or U172 (cond12, _net_135, _net_138, _net_141, _net_144);
not U173 (_net_145, A2);
not U174 (_net_146, SI);
and U175 (_net_147, _net_145, A1, B1, B2, _net_146);
not U176 (_net_148, SI);
and U177 (_net_149, A2, A1, _net_148);
not U178 (_net_150, A1);
not U179 (_net_151, SI);
and U180 (_net_152, B1, _net_150, B2, _net_151);
or U181 (cond13, _net_147, _net_149, _net_152);
not U182 (_net_153, A2);
not U183 (_net_154, SI);
and U184 (_net_155, _net_153, A1, B1, B2, _net_154);
not U185 (_net_156, SI);
and U186 (_net_157, A2, A1, _net_156);
not U187 (_net_158, A1);
not U188 (_net_159, SI);
and U189 (_net_160, B1, _net_158, B2, _net_159);
or U190 (cond13, _net_155, _net_157, _net_160);
not U191 (_net_161, A2);
not U192 (_net_162, B1);
and U193 (_net_163, _net_161, A1, _net_162, SE);
not U194 (_net_164, A2);
not U195 (_net_165, B2);
and U196 (_net_166, _net_164, A1, B1, _net_165, SE);
not U197 (_net_167, A1);
not U198 (_net_168, B2);
and U199 (_net_169, B1, _net_167, _net_168, SE);
not U200 (_net_170, B1);
not U201 (_net_171, A1);
and U202 (_net_172, _net_170, _net_171, SE);
or U203 (cond15, _net_163, _net_166, _net_169, _net_172);
not U204 (_net_173, A2);
not U205 (_net_174, B1);
and U206 (_net_175, _net_173, A1, _net_174, SE);
not U207 (_net_176, A2);
not U208 (_net_177, B2);
and U209 (_net_178, _net_176, A1, B1, _net_177, SE);
not U210 (_net_179, A1);
not U211 (_net_180, B2);
and U212 (_net_181, B1, _net_179, _net_180, SE);
not U213 (_net_182, B1);
not U214 (_net_183, A1);
and U215 (_net_184, _net_182, _net_183, SE);
or U216 (cond15, _net_175, _net_178, _net_181, _net_184);
not U217 (_net_185, A2);
and U218 (_net_186, _net_185, A1, B1, B2, SE);
and U219 (_net_187, A2, A1, SE);
not U220 (_net_188, A1);
and U221 (_net_189, B1, _net_188, B2, SE);
or U222 (cond14, _net_186, _net_187, _net_189);
not U223 (_net_190, A2);
and U224 (_net_191, _net_190, A1, B1, B2, SE);
and U225 (_net_192, A2, A1, SE);
not U226 (_net_193, A1);
and U227 (_net_194, B1, _net_193, B2, SE);
or U228 (cond14, _net_191, _net_192, _net_194);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$setuphold(posedge CK &&& cond2 , posedge A1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond2 , negedge A1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond1 , posedge A1 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond1 , negedge A1 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond0 , posedge A1 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond0 , negedge A1 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond5 , posedge A2 &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond5 , negedge A2 &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond4 , posedge A2 &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond4 , negedge A2 &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond3 , posedge A2 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond3 , negedge A2 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond8 , posedge B1 &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond8 , negedge B1 &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond7 , posedge B1 &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond7 , negedge B1 &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond6 , posedge B1 &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond6 , negedge B1 &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond11 , posedge B2 &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond11 , negedge B2 &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond10 , posedge B2 &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond10 , negedge B2 &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond9 , posedge B2 &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond9 , negedge B2 &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$width(posedge CK &&& cond17 , 0 ,0, viol_0);
$width(negedge CK &&& cond17 , 0 ,0, viol_0);
$width(posedge CK &&& cond16 , 0 ,0, viol_0);
$width(negedge CK &&& cond16 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond12 , posedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , negedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , posedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , negedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond15 , posedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond15 , negedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , posedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , negedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDAO22PQ_DL50_1

//%BEGIN SEH_FSDAO22PQ_DL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDAO22PQ_DL50_2 (Q, CK, A1, A2, B1, B2, SI, SE, VDD, VSS, VBP, VBN);
   output Q;
   input CK, A1, A2, B1, B2, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_A1, delayed_A2,
        delayed_B1, delayed_B2, delayed_SI,
	delayed_SE;

   wire int_res__DA, int_res__DB, int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDAO22PQ_DL50_2 (Q, CK, A1, A2, B1, B2, SI, SE, VDD, VSS);
   output Q;
   input CK, A1, A2, B1, B2, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_A1, delayed_A2,
        delayed_B1, delayed_B2, delayed_SI,
	delayed_SE;

   wire int_res__DA, int_res__DB, int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_A1, A1_org);
   buf (delayed_A2, A2_org);
   buf (delayed_B1, B1_org);
   buf (delayed_B2, B2_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif


   and (int_res__DA, delayed_A1, delayed_A2);
   and (int_res__DB, delayed_B1, delayed_B2);
   or (int_res__D, int_res__DA, int_res__DB);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res_mux, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
   `else
        buf (Q, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, B1);
not U1 (_net_1, B2);
not U2 (_net_2, SE);
and U3 (cond2, _net_0, A2, _net_1, _net_2);
not U4 (_net_3, B1);
not U5 (_net_4, B2);
not U6 (_net_5, SE);
and U7 (cond2, _net_3, A2, _net_4, _net_5);
not U8 (_net_6, B1);
not U9 (_net_7, SE);
and U10 (cond1, _net_6, A2, B2, _net_7);
not U11 (_net_8, B1);
not U12 (_net_9, SE);
and U13 (cond1, _net_8, A2, B2, _net_9);
not U14 (_net_10, B2);
not U15 (_net_11, SE);
and U16 (cond0, B1, A2, _net_10, _net_11);
not U17 (_net_12, B2);
not U18 (_net_13, SE);
and U19 (cond0, B1, A2, _net_12, _net_13);
not U20 (_net_14, B1);
not U21 (_net_15, B2);
not U22 (_net_16, SE);
and U23 (cond5, _net_14, A1, _net_15, _net_16);
not U24 (_net_17, B1);
not U25 (_net_18, B2);
not U26 (_net_19, SE);
and U27 (cond5, _net_17, A1, _net_18, _net_19);
not U28 (_net_20, B1);
not U29 (_net_21, SE);
and U30 (cond4, _net_20, A1, B2, _net_21);
not U31 (_net_22, B1);
not U32 (_net_23, SE);
and U33 (cond4, _net_22, A1, B2, _net_23);
not U34 (_net_24, B2);
not U35 (_net_25, SE);
and U36 (cond3, B1, A1, _net_24, _net_25);
not U37 (_net_26, B2);
not U38 (_net_27, SE);
and U39 (cond3, B1, A1, _net_26, _net_27);
not U40 (_net_28, A2);
not U41 (_net_29, A1);
not U42 (_net_30, SE);
and U43 (cond8, _net_28, _net_29, B2, _net_30);
not U44 (_net_31, A2);
not U45 (_net_32, A1);
not U46 (_net_33, SE);
and U47 (cond8, _net_31, _net_32, B2, _net_33);
not U48 (_net_34, A1);
not U49 (_net_35, SE);
and U50 (cond7, A2, _net_34, B2, _net_35);
not U51 (_net_36, A1);
not U52 (_net_37, SE);
and U53 (cond7, A2, _net_36, B2, _net_37);
not U54 (_net_38, A2);
not U55 (_net_39, SE);
and U56 (cond6, _net_38, A1, B2, _net_39);
not U57 (_net_40, A2);
not U58 (_net_41, SE);
and U59 (cond6, _net_40, A1, B2, _net_41);
not U60 (_net_42, A2);
not U61 (_net_43, A1);
not U62 (_net_44, SE);
and U63 (cond11, _net_42, _net_43, B1, _net_44);
not U64 (_net_45, A2);
not U65 (_net_46, A1);
not U66 (_net_47, SE);
and U67 (cond11, _net_45, _net_46, B1, _net_47);
not U68 (_net_48, A1);
not U69 (_net_49, SE);
and U70 (cond10, A2, _net_48, B1, _net_49);
not U71 (_net_50, A1);
not U72 (_net_51, SE);
and U73 (cond10, A2, _net_50, B1, _net_51);
not U74 (_net_52, A2);
not U75 (_net_53, SE);
and U76 (cond9, _net_52, A1, B1, _net_53);
not U77 (_net_54, A2);
not U78 (_net_55, SE);
and U79 (cond9, _net_54, A1, B1, _net_55);
not U80 (_net_56, A2);
not U81 (_net_57, SI);
and U82 (_net_58, _net_56, A1, B1, B2, SE, _net_57);
not U83 (_net_59, SI);
and U84 (_net_60, A2, A1, SE, _net_59);
not U85 (_net_61, A2);
not U86 (_net_62, B2);
not U87 (_net_63, SI);
and U88 (_net_64, _net_61, A1, B1, _net_62, SE, _net_63);
not U89 (_net_65, A2);
not U90 (_net_66, B2);
not U91 (_net_67, SE);
and U92 (_net_68, _net_65, A1, B1, _net_66, _net_67);
not U93 (_net_69, A2);
not U94 (_net_70, B1);
not U95 (_net_71, SI);
and U96 (_net_72, _net_69, A1, _net_70, SE, _net_71);
not U97 (_net_73, A2);
not U98 (_net_74, B1);
not U99 (_net_75, SE);
and U100 (_net_76, _net_73, A1, _net_74, _net_75);
not U101 (_net_77, A1);
not U102 (_net_78, SI);
and U103 (_net_79, B1, _net_77, B2, SE, _net_78);
not U104 (_net_80, A1);
not U105 (_net_81, B2);
not U106 (_net_82, SI);
and U107 (_net_83, B1, _net_80, _net_81, SE, _net_82);
not U108 (_net_84, A1);
not U109 (_net_85, B2);
not U110 (_net_86, SE);
and U111 (_net_87, B1, _net_84, _net_85, _net_86);
not U112 (_net_88, B1);
not U113 (_net_89, A1);
not U114 (_net_90, SI);
and U115 (_net_91, _net_88, _net_89, SE, _net_90);
not U116 (_net_92, B1);
not U117 (_net_93, A1);
not U118 (_net_94, SE);
and U119 (_net_95, _net_92, _net_93, _net_94);
or U120 (cond17, _net_58, _net_60, _net_64, _net_68, _net_72, _net_76, _net_79, _net_83, _net_87, _net_91, _net_95);
not U121 (_net_96, SE);
and U122 (_net_97, A2, A1, _net_96);
and U123 (_net_98, A2, A1, SE, SI);
not U124 (_net_99, A2);
and U125 (_net_100, _net_99, A1, B1, B2, SE, SI);
not U126 (_net_101, A2);
not U127 (_net_102, SE);
and U128 (_net_103, _net_101, A1, B1, B2, _net_102);
not U129 (_net_104, A2);
not U130 (_net_105, B2);
and U131 (_net_106, _net_104, A1, B1, _net_105, SE, SI);
not U132 (_net_107, A2);
not U133 (_net_108, B1);
and U134 (_net_109, _net_107, A1, _net_108, SE, SI);
not U135 (_net_110, A1);
and U136 (_net_111, B1, _net_110, B2, SE, SI);
not U137 (_net_112, A1);
not U138 (_net_113, SE);
and U139 (_net_114, B1, _net_112, B2, _net_113);
not U140 (_net_115, A1);
not U141 (_net_116, B2);
and U142 (_net_117, B1, _net_115, _net_116, SE, SI);
not U143 (_net_118, B1);
not U144 (_net_119, A1);
and U145 (_net_120, _net_118, _net_119, SE, SI);
or U146 (cond16, _net_97, _net_98, _net_100, _net_103, _net_106, _net_109, _net_111, _net_114, _net_117, _net_120);
not U147 (_net_121, A2);
not U148 (_net_122, B1);
and U149 (_net_123, _net_121, A1, _net_122, SI);
not U150 (_net_124, A2);
not U151 (_net_125, B2);
and U152 (_net_126, _net_124, A1, B1, _net_125, SI);
not U153 (_net_127, A1);
not U154 (_net_128, B2);
and U155 (_net_129, B1, _net_127, _net_128, SI);
not U156 (_net_130, B1);
not U157 (_net_131, A1);
and U158 (_net_132, _net_130, _net_131, SI);
or U159 (cond12, _net_123, _net_126, _net_129, _net_132);
not U160 (_net_133, A2);
not U161 (_net_134, B1);
and U162 (_net_135, _net_133, A1, _net_134, SI);
not U163 (_net_136, A2);
not U164 (_net_137, B2);
and U165 (_net_138, _net_136, A1, B1, _net_137, SI);
not U166 (_net_139, A1);
not U167 (_net_140, B2);
and U168 (_net_141, B1, _net_139, _net_140, SI);
not U169 (_net_142, B1);
not U170 (_net_143, A1);
and U171 (_net_144, _net_142, _net_143, SI);
or U172 (cond12, _net_135, _net_138, _net_141, _net_144);
not U173 (_net_145, A2);
not U174 (_net_146, SI);
and U175 (_net_147, _net_145, A1, B1, B2, _net_146);
not U176 (_net_148, SI);
and U177 (_net_149, A2, A1, _net_148);
not U178 (_net_150, A1);
not U179 (_net_151, SI);
and U180 (_net_152, B1, _net_150, B2, _net_151);
or U181 (cond13, _net_147, _net_149, _net_152);
not U182 (_net_153, A2);
not U183 (_net_154, SI);
and U184 (_net_155, _net_153, A1, B1, B2, _net_154);
not U185 (_net_156, SI);
and U186 (_net_157, A2, A1, _net_156);
not U187 (_net_158, A1);
not U188 (_net_159, SI);
and U189 (_net_160, B1, _net_158, B2, _net_159);
or U190 (cond13, _net_155, _net_157, _net_160);
not U191 (_net_161, A2);
not U192 (_net_162, B1);
and U193 (_net_163, _net_161, A1, _net_162, SE);
not U194 (_net_164, A2);
not U195 (_net_165, B2);
and U196 (_net_166, _net_164, A1, B1, _net_165, SE);
not U197 (_net_167, A1);
not U198 (_net_168, B2);
and U199 (_net_169, B1, _net_167, _net_168, SE);
not U200 (_net_170, B1);
not U201 (_net_171, A1);
and U202 (_net_172, _net_170, _net_171, SE);
or U203 (cond15, _net_163, _net_166, _net_169, _net_172);
not U204 (_net_173, A2);
not U205 (_net_174, B1);
and U206 (_net_175, _net_173, A1, _net_174, SE);
not U207 (_net_176, A2);
not U208 (_net_177, B2);
and U209 (_net_178, _net_176, A1, B1, _net_177, SE);
not U210 (_net_179, A1);
not U211 (_net_180, B2);
and U212 (_net_181, B1, _net_179, _net_180, SE);
not U213 (_net_182, B1);
not U214 (_net_183, A1);
and U215 (_net_184, _net_182, _net_183, SE);
or U216 (cond15, _net_175, _net_178, _net_181, _net_184);
not U217 (_net_185, A2);
and U218 (_net_186, _net_185, A1, B1, B2, SE);
and U219 (_net_187, A2, A1, SE);
not U220 (_net_188, A1);
and U221 (_net_189, B1, _net_188, B2, SE);
or U222 (cond14, _net_186, _net_187, _net_189);
not U223 (_net_190, A2);
and U224 (_net_191, _net_190, A1, B1, B2, SE);
and U225 (_net_192, A2, A1, SE);
not U226 (_net_193, A1);
and U227 (_net_194, B1, _net_193, B2, SE);
or U228 (cond14, _net_191, _net_192, _net_194);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$setuphold(posedge CK &&& cond2 , posedge A1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond2 , negedge A1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond1 , posedge A1 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond1 , negedge A1 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond0 , posedge A1 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond0 , negedge A1 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond5 , posedge A2 &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond5 , negedge A2 &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond4 , posedge A2 &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond4 , negedge A2 &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond3 , posedge A2 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond3 , negedge A2 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond8 , posedge B1 &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond8 , negedge B1 &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond7 , posedge B1 &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond7 , negedge B1 &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond6 , posedge B1 &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond6 , negedge B1 &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond11 , posedge B2 &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond11 , negedge B2 &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond10 , posedge B2 &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond10 , negedge B2 &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond9 , posedge B2 &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond9 , negedge B2 &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$width(posedge CK &&& cond17 , 0 ,0, viol_0);
$width(negedge CK &&& cond17 , 0 ,0, viol_0);
$width(posedge CK &&& cond16 , 0 ,0, viol_0);
$width(negedge CK &&& cond16 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond12 , posedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , negedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , posedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , negedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond15 , posedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond15 , negedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , posedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , negedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDAO22PQ_DL50_2

//%BEGIN SEH_FSDAO22PQ_DL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDAO22PQ_DL50_4 (Q, CK, A1, A2, B1, B2, SI, SE, VDD, VSS, VBP, VBN);
   output Q;
   input CK, A1, A2, B1, B2, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_A1, delayed_A2,
        delayed_B1, delayed_B2, delayed_SI,
	delayed_SE;

   wire int_res__DA, int_res__DB, int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDAO22PQ_DL50_4 (Q, CK, A1, A2, B1, B2, SI, SE, VDD, VSS);
   output Q;
   input CK, A1, A2, B1, B2, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_A1, delayed_A2,
        delayed_B1, delayed_B2, delayed_SI,
	delayed_SE;

   wire int_res__DA, int_res__DB, int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_A1, A1_org);
   buf (delayed_A2, A2_org);
   buf (delayed_B1, B1_org);
   buf (delayed_B2, B2_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif


   and (int_res__DA, delayed_A1, delayed_A2);
   and (int_res__DB, delayed_B1, delayed_B2);
   or (int_res__D, int_res__DA, int_res__DB);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res_mux, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
   `else
        buf (Q, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, B1);
not U1 (_net_1, B2);
not U2 (_net_2, SE);
and U3 (cond2, _net_0, A2, _net_1, _net_2);
not U4 (_net_3, B1);
not U5 (_net_4, B2);
not U6 (_net_5, SE);
and U7 (cond2, _net_3, A2, _net_4, _net_5);
not U8 (_net_6, B1);
not U9 (_net_7, SE);
and U10 (cond1, _net_6, A2, B2, _net_7);
not U11 (_net_8, B1);
not U12 (_net_9, SE);
and U13 (cond1, _net_8, A2, B2, _net_9);
not U14 (_net_10, B2);
not U15 (_net_11, SE);
and U16 (cond0, B1, A2, _net_10, _net_11);
not U17 (_net_12, B2);
not U18 (_net_13, SE);
and U19 (cond0, B1, A2, _net_12, _net_13);
not U20 (_net_14, B1);
not U21 (_net_15, B2);
not U22 (_net_16, SE);
and U23 (cond5, _net_14, A1, _net_15, _net_16);
not U24 (_net_17, B1);
not U25 (_net_18, B2);
not U26 (_net_19, SE);
and U27 (cond5, _net_17, A1, _net_18, _net_19);
not U28 (_net_20, B1);
not U29 (_net_21, SE);
and U30 (cond4, _net_20, A1, B2, _net_21);
not U31 (_net_22, B1);
not U32 (_net_23, SE);
and U33 (cond4, _net_22, A1, B2, _net_23);
not U34 (_net_24, B2);
not U35 (_net_25, SE);
and U36 (cond3, B1, A1, _net_24, _net_25);
not U37 (_net_26, B2);
not U38 (_net_27, SE);
and U39 (cond3, B1, A1, _net_26, _net_27);
not U40 (_net_28, A2);
not U41 (_net_29, A1);
not U42 (_net_30, SE);
and U43 (cond8, _net_28, _net_29, B2, _net_30);
not U44 (_net_31, A2);
not U45 (_net_32, A1);
not U46 (_net_33, SE);
and U47 (cond8, _net_31, _net_32, B2, _net_33);
not U48 (_net_34, A1);
not U49 (_net_35, SE);
and U50 (cond7, A2, _net_34, B2, _net_35);
not U51 (_net_36, A1);
not U52 (_net_37, SE);
and U53 (cond7, A2, _net_36, B2, _net_37);
not U54 (_net_38, A2);
not U55 (_net_39, SE);
and U56 (cond6, _net_38, A1, B2, _net_39);
not U57 (_net_40, A2);
not U58 (_net_41, SE);
and U59 (cond6, _net_40, A1, B2, _net_41);
not U60 (_net_42, A2);
not U61 (_net_43, A1);
not U62 (_net_44, SE);
and U63 (cond11, _net_42, _net_43, B1, _net_44);
not U64 (_net_45, A2);
not U65 (_net_46, A1);
not U66 (_net_47, SE);
and U67 (cond11, _net_45, _net_46, B1, _net_47);
not U68 (_net_48, A1);
not U69 (_net_49, SE);
and U70 (cond10, A2, _net_48, B1, _net_49);
not U71 (_net_50, A1);
not U72 (_net_51, SE);
and U73 (cond10, A2, _net_50, B1, _net_51);
not U74 (_net_52, A2);
not U75 (_net_53, SE);
and U76 (cond9, _net_52, A1, B1, _net_53);
not U77 (_net_54, A2);
not U78 (_net_55, SE);
and U79 (cond9, _net_54, A1, B1, _net_55);
not U80 (_net_56, A2);
not U81 (_net_57, SI);
and U82 (_net_58, _net_56, A1, B1, B2, SE, _net_57);
not U83 (_net_59, SI);
and U84 (_net_60, A2, A1, SE, _net_59);
not U85 (_net_61, A2);
not U86 (_net_62, B2);
not U87 (_net_63, SI);
and U88 (_net_64, _net_61, A1, B1, _net_62, SE, _net_63);
not U89 (_net_65, A2);
not U90 (_net_66, B2);
not U91 (_net_67, SE);
and U92 (_net_68, _net_65, A1, B1, _net_66, _net_67);
not U93 (_net_69, A2);
not U94 (_net_70, B1);
not U95 (_net_71, SI);
and U96 (_net_72, _net_69, A1, _net_70, SE, _net_71);
not U97 (_net_73, A2);
not U98 (_net_74, B1);
not U99 (_net_75, SE);
and U100 (_net_76, _net_73, A1, _net_74, _net_75);
not U101 (_net_77, A1);
not U102 (_net_78, SI);
and U103 (_net_79, B1, _net_77, B2, SE, _net_78);
not U104 (_net_80, A1);
not U105 (_net_81, B2);
not U106 (_net_82, SI);
and U107 (_net_83, B1, _net_80, _net_81, SE, _net_82);
not U108 (_net_84, A1);
not U109 (_net_85, B2);
not U110 (_net_86, SE);
and U111 (_net_87, B1, _net_84, _net_85, _net_86);
not U112 (_net_88, B1);
not U113 (_net_89, A1);
not U114 (_net_90, SI);
and U115 (_net_91, _net_88, _net_89, SE, _net_90);
not U116 (_net_92, B1);
not U117 (_net_93, A1);
not U118 (_net_94, SE);
and U119 (_net_95, _net_92, _net_93, _net_94);
or U120 (cond17, _net_58, _net_60, _net_64, _net_68, _net_72, _net_76, _net_79, _net_83, _net_87, _net_91, _net_95);
not U121 (_net_96, SE);
and U122 (_net_97, A2, A1, _net_96);
and U123 (_net_98, A2, A1, SE, SI);
not U124 (_net_99, A2);
and U125 (_net_100, _net_99, A1, B1, B2, SE, SI);
not U126 (_net_101, A2);
not U127 (_net_102, SE);
and U128 (_net_103, _net_101, A1, B1, B2, _net_102);
not U129 (_net_104, A2);
not U130 (_net_105, B2);
and U131 (_net_106, _net_104, A1, B1, _net_105, SE, SI);
not U132 (_net_107, A2);
not U133 (_net_108, B1);
and U134 (_net_109, _net_107, A1, _net_108, SE, SI);
not U135 (_net_110, A1);
and U136 (_net_111, B1, _net_110, B2, SE, SI);
not U137 (_net_112, A1);
not U138 (_net_113, SE);
and U139 (_net_114, B1, _net_112, B2, _net_113);
not U140 (_net_115, A1);
not U141 (_net_116, B2);
and U142 (_net_117, B1, _net_115, _net_116, SE, SI);
not U143 (_net_118, B1);
not U144 (_net_119, A1);
and U145 (_net_120, _net_118, _net_119, SE, SI);
or U146 (cond16, _net_97, _net_98, _net_100, _net_103, _net_106, _net_109, _net_111, _net_114, _net_117, _net_120);
not U147 (_net_121, A2);
not U148 (_net_122, B1);
and U149 (_net_123, _net_121, A1, _net_122, SI);
not U150 (_net_124, A2);
not U151 (_net_125, B2);
and U152 (_net_126, _net_124, A1, B1, _net_125, SI);
not U153 (_net_127, A1);
not U154 (_net_128, B2);
and U155 (_net_129, B1, _net_127, _net_128, SI);
not U156 (_net_130, B1);
not U157 (_net_131, A1);
and U158 (_net_132, _net_130, _net_131, SI);
or U159 (cond12, _net_123, _net_126, _net_129, _net_132);
not U160 (_net_133, A2);
not U161 (_net_134, B1);
and U162 (_net_135, _net_133, A1, _net_134, SI);
not U163 (_net_136, A2);
not U164 (_net_137, B2);
and U165 (_net_138, _net_136, A1, B1, _net_137, SI);
not U166 (_net_139, A1);
not U167 (_net_140, B2);
and U168 (_net_141, B1, _net_139, _net_140, SI);
not U169 (_net_142, B1);
not U170 (_net_143, A1);
and U171 (_net_144, _net_142, _net_143, SI);
or U172 (cond12, _net_135, _net_138, _net_141, _net_144);
not U173 (_net_145, A2);
not U174 (_net_146, SI);
and U175 (_net_147, _net_145, A1, B1, B2, _net_146);
not U176 (_net_148, SI);
and U177 (_net_149, A2, A1, _net_148);
not U178 (_net_150, A1);
not U179 (_net_151, SI);
and U180 (_net_152, B1, _net_150, B2, _net_151);
or U181 (cond13, _net_147, _net_149, _net_152);
not U182 (_net_153, A2);
not U183 (_net_154, SI);
and U184 (_net_155, _net_153, A1, B1, B2, _net_154);
not U185 (_net_156, SI);
and U186 (_net_157, A2, A1, _net_156);
not U187 (_net_158, A1);
not U188 (_net_159, SI);
and U189 (_net_160, B1, _net_158, B2, _net_159);
or U190 (cond13, _net_155, _net_157, _net_160);
not U191 (_net_161, A2);
not U192 (_net_162, B1);
and U193 (_net_163, _net_161, A1, _net_162, SE);
not U194 (_net_164, A2);
not U195 (_net_165, B2);
and U196 (_net_166, _net_164, A1, B1, _net_165, SE);
not U197 (_net_167, A1);
not U198 (_net_168, B2);
and U199 (_net_169, B1, _net_167, _net_168, SE);
not U200 (_net_170, B1);
not U201 (_net_171, A1);
and U202 (_net_172, _net_170, _net_171, SE);
or U203 (cond15, _net_163, _net_166, _net_169, _net_172);
not U204 (_net_173, A2);
not U205 (_net_174, B1);
and U206 (_net_175, _net_173, A1, _net_174, SE);
not U207 (_net_176, A2);
not U208 (_net_177, B2);
and U209 (_net_178, _net_176, A1, B1, _net_177, SE);
not U210 (_net_179, A1);
not U211 (_net_180, B2);
and U212 (_net_181, B1, _net_179, _net_180, SE);
not U213 (_net_182, B1);
not U214 (_net_183, A1);
and U215 (_net_184, _net_182, _net_183, SE);
or U216 (cond15, _net_175, _net_178, _net_181, _net_184);
not U217 (_net_185, A2);
and U218 (_net_186, _net_185, A1, B1, B2, SE);
and U219 (_net_187, A2, A1, SE);
not U220 (_net_188, A1);
and U221 (_net_189, B1, _net_188, B2, SE);
or U222 (cond14, _net_186, _net_187, _net_189);
not U223 (_net_190, A2);
and U224 (_net_191, _net_190, A1, B1, B2, SE);
and U225 (_net_192, A2, A1, SE);
not U226 (_net_193, A1);
and U227 (_net_194, B1, _net_193, B2, SE);
or U228 (cond14, _net_191, _net_192, _net_194);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$setuphold(posedge CK &&& cond2 , posedge A1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond2 , negedge A1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond1 , posedge A1 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond1 , negedge A1 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond0 , posedge A1 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond0 , negedge A1 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond5 , posedge A2 &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond5 , negedge A2 &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond4 , posedge A2 &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond4 , negedge A2 &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond3 , posedge A2 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond3 , negedge A2 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond8 , posedge B1 &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond8 , negedge B1 &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond7 , posedge B1 &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond7 , negedge B1 &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond6 , posedge B1 &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond6 , negedge B1 &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond11 , posedge B2 &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond11 , negedge B2 &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond10 , posedge B2 &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond10 , negedge B2 &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond9 , posedge B2 &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond9 , negedge B2 &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$width(posedge CK &&& cond17 , 0 ,0, viol_0);
$width(negedge CK &&& cond17 , 0 ,0, viol_0);
$width(posedge CK &&& cond16 , 0 ,0, viol_0);
$width(negedge CK &&& cond16 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond12 , posedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , negedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , posedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , negedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond15 , posedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond15 , negedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , posedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , negedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDAO22PQ_DL50_4

//%BEGIN SEH_FSDAO22PQO_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDAO22PQO_L50_1 (Q, SO, CK, A1, A2, B1, B2, SI, SE, VDD, VSS, VBP, VBN);
   output Q,  SO;
   input CK, A1, A2, B1, B2, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_A1, delayed_A2,
        delayed_B1, delayed_B2, delayed_SI,
	delayed_SE;

   wire int_res__DA, int_res__DB, int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDAO22PQO_L50_1 (Q, SO, CK, A1, A2, B1, B2, SI, SE, VDD, VSS);
   output Q,  SO;
   input CK, A1, A2, B1, B2, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_A1, delayed_A2,
        delayed_B1, delayed_B2, delayed_SI,
	delayed_SE;

   wire int_res__DA, int_res__DB, int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_A1, A1_org);
   buf (delayed_A2, A2_org);
   buf (delayed_B1, B1_org);
   buf (delayed_B2, B2_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif


   and (int_res__DA, delayed_A1, delayed_A2);
   and (int_res__DB, delayed_B1, delayed_B2);
   or (int_res__D, int_res__DA, int_res__DB);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res_mux, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (Q, int_res_iq);
       buf #1 (SO, int_res_iq);
   `else
       buf (Q, int_res_iq);
       buf (SO, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, B1);
not U1 (_net_1, B2);
not U2 (_net_2, SE);
and U3 (cond2, _net_0, A2, _net_1, _net_2);
not U4 (_net_3, B1);
not U5 (_net_4, B2);
not U6 (_net_5, SE);
and U7 (cond2, _net_3, A2, _net_4, _net_5);
not U8 (_net_6, B1);
not U9 (_net_7, SE);
and U10 (cond1, _net_6, A2, B2, _net_7);
not U11 (_net_8, B1);
not U12 (_net_9, SE);
and U13 (cond1, _net_8, A2, B2, _net_9);
not U14 (_net_10, B2);
not U15 (_net_11, SE);
and U16 (cond0, B1, A2, _net_10, _net_11);
not U17 (_net_12, B2);
not U18 (_net_13, SE);
and U19 (cond0, B1, A2, _net_12, _net_13);
not U20 (_net_14, B1);
not U21 (_net_15, B2);
not U22 (_net_16, SE);
and U23 (cond5, _net_14, A1, _net_15, _net_16);
not U24 (_net_17, B1);
not U25 (_net_18, B2);
not U26 (_net_19, SE);
and U27 (cond5, _net_17, A1, _net_18, _net_19);
not U28 (_net_20, B1);
not U29 (_net_21, SE);
and U30 (cond4, _net_20, A1, B2, _net_21);
not U31 (_net_22, B1);
not U32 (_net_23, SE);
and U33 (cond4, _net_22, A1, B2, _net_23);
not U34 (_net_24, B2);
not U35 (_net_25, SE);
and U36 (cond3, B1, A1, _net_24, _net_25);
not U37 (_net_26, B2);
not U38 (_net_27, SE);
and U39 (cond3, B1, A1, _net_26, _net_27);
not U40 (_net_28, A2);
not U41 (_net_29, A1);
not U42 (_net_30, SE);
and U43 (cond8, _net_28, _net_29, B2, _net_30);
not U44 (_net_31, A2);
not U45 (_net_32, A1);
not U46 (_net_33, SE);
and U47 (cond8, _net_31, _net_32, B2, _net_33);
not U48 (_net_34, A1);
not U49 (_net_35, SE);
and U50 (cond7, A2, _net_34, B2, _net_35);
not U51 (_net_36, A1);
not U52 (_net_37, SE);
and U53 (cond7, A2, _net_36, B2, _net_37);
not U54 (_net_38, A2);
not U55 (_net_39, SE);
and U56 (cond6, _net_38, A1, B2, _net_39);
not U57 (_net_40, A2);
not U58 (_net_41, SE);
and U59 (cond6, _net_40, A1, B2, _net_41);
not U60 (_net_42, A2);
not U61 (_net_43, A1);
not U62 (_net_44, SE);
and U63 (cond11, _net_42, _net_43, B1, _net_44);
not U64 (_net_45, A2);
not U65 (_net_46, A1);
not U66 (_net_47, SE);
and U67 (cond11, _net_45, _net_46, B1, _net_47);
not U68 (_net_48, A1);
not U69 (_net_49, SE);
and U70 (cond10, A2, _net_48, B1, _net_49);
not U71 (_net_50, A1);
not U72 (_net_51, SE);
and U73 (cond10, A2, _net_50, B1, _net_51);
not U74 (_net_52, A2);
not U75 (_net_53, SE);
and U76 (cond9, _net_52, A1, B1, _net_53);
not U77 (_net_54, A2);
not U78 (_net_55, SE);
and U79 (cond9, _net_54, A1, B1, _net_55);
not U80 (_net_56, A2);
not U81 (_net_57, SI);
and U82 (_net_58, _net_56, A1, B1, B2, SE, _net_57);
not U83 (_net_59, SI);
and U84 (_net_60, A2, A1, SE, _net_59);
not U85 (_net_61, A2);
not U86 (_net_62, B2);
not U87 (_net_63, SI);
and U88 (_net_64, _net_61, A1, B1, _net_62, SE, _net_63);
not U89 (_net_65, A2);
not U90 (_net_66, B2);
not U91 (_net_67, SE);
and U92 (_net_68, _net_65, A1, B1, _net_66, _net_67);
not U93 (_net_69, A2);
not U94 (_net_70, B1);
not U95 (_net_71, SI);
and U96 (_net_72, _net_69, A1, _net_70, SE, _net_71);
not U97 (_net_73, A2);
not U98 (_net_74, B1);
not U99 (_net_75, SE);
and U100 (_net_76, _net_73, A1, _net_74, _net_75);
not U101 (_net_77, A1);
not U102 (_net_78, SI);
and U103 (_net_79, B1, _net_77, B2, SE, _net_78);
not U104 (_net_80, A1);
not U105 (_net_81, B2);
not U106 (_net_82, SI);
and U107 (_net_83, B1, _net_80, _net_81, SE, _net_82);
not U108 (_net_84, A1);
not U109 (_net_85, B2);
not U110 (_net_86, SE);
and U111 (_net_87, B1, _net_84, _net_85, _net_86);
not U112 (_net_88, B1);
not U113 (_net_89, A1);
not U114 (_net_90, SI);
and U115 (_net_91, _net_88, _net_89, SE, _net_90);
not U116 (_net_92, B1);
not U117 (_net_93, A1);
not U118 (_net_94, SE);
and U119 (_net_95, _net_92, _net_93, _net_94);
or U120 (cond17, _net_58, _net_60, _net_64, _net_68, _net_72, _net_76, _net_79, _net_83, _net_87, _net_91, _net_95);
not U121 (_net_96, SE);
and U122 (_net_97, A2, A1, _net_96);
and U123 (_net_98, A2, A1, SE, SI);
not U124 (_net_99, A2);
and U125 (_net_100, _net_99, A1, B1, B2, SE, SI);
not U126 (_net_101, A2);
not U127 (_net_102, SE);
and U128 (_net_103, _net_101, A1, B1, B2, _net_102);
not U129 (_net_104, A2);
not U130 (_net_105, B2);
and U131 (_net_106, _net_104, A1, B1, _net_105, SE, SI);
not U132 (_net_107, A2);
not U133 (_net_108, B1);
and U134 (_net_109, _net_107, A1, _net_108, SE, SI);
not U135 (_net_110, A1);
and U136 (_net_111, B1, _net_110, B2, SE, SI);
not U137 (_net_112, A1);
not U138 (_net_113, SE);
and U139 (_net_114, B1, _net_112, B2, _net_113);
not U140 (_net_115, A1);
not U141 (_net_116, B2);
and U142 (_net_117, B1, _net_115, _net_116, SE, SI);
not U143 (_net_118, B1);
not U144 (_net_119, A1);
and U145 (_net_120, _net_118, _net_119, SE, SI);
or U146 (cond16, _net_97, _net_98, _net_100, _net_103, _net_106, _net_109, _net_111, _net_114, _net_117, _net_120);
not U147 (_net_121, A2);
not U148 (_net_122, B1);
and U149 (_net_123, _net_121, A1, _net_122, SI);
not U150 (_net_124, A2);
not U151 (_net_125, B2);
and U152 (_net_126, _net_124, A1, B1, _net_125, SI);
not U153 (_net_127, A1);
not U154 (_net_128, B2);
and U155 (_net_129, B1, _net_127, _net_128, SI);
not U156 (_net_130, B1);
not U157 (_net_131, A1);
and U158 (_net_132, _net_130, _net_131, SI);
or U159 (cond12, _net_123, _net_126, _net_129, _net_132);
not U160 (_net_133, A2);
not U161 (_net_134, B1);
and U162 (_net_135, _net_133, A1, _net_134, SI);
not U163 (_net_136, A2);
not U164 (_net_137, B2);
and U165 (_net_138, _net_136, A1, B1, _net_137, SI);
not U166 (_net_139, A1);
not U167 (_net_140, B2);
and U168 (_net_141, B1, _net_139, _net_140, SI);
not U169 (_net_142, B1);
not U170 (_net_143, A1);
and U171 (_net_144, _net_142, _net_143, SI);
or U172 (cond12, _net_135, _net_138, _net_141, _net_144);
not U173 (_net_145, A2);
not U174 (_net_146, SI);
and U175 (_net_147, _net_145, A1, B1, B2, _net_146);
not U176 (_net_148, SI);
and U177 (_net_149, A2, A1, _net_148);
not U178 (_net_150, A1);
not U179 (_net_151, SI);
and U180 (_net_152, B1, _net_150, B2, _net_151);
or U181 (cond13, _net_147, _net_149, _net_152);
not U182 (_net_153, A2);
not U183 (_net_154, SI);
and U184 (_net_155, _net_153, A1, B1, B2, _net_154);
not U185 (_net_156, SI);
and U186 (_net_157, A2, A1, _net_156);
not U187 (_net_158, A1);
not U188 (_net_159, SI);
and U189 (_net_160, B1, _net_158, B2, _net_159);
or U190 (cond13, _net_155, _net_157, _net_160);
not U191 (_net_161, A2);
not U192 (_net_162, B1);
and U193 (_net_163, _net_161, A1, _net_162, SE);
not U194 (_net_164, A2);
not U195 (_net_165, B2);
and U196 (_net_166, _net_164, A1, B1, _net_165, SE);
not U197 (_net_167, A1);
not U198 (_net_168, B2);
and U199 (_net_169, B1, _net_167, _net_168, SE);
not U200 (_net_170, B1);
not U201 (_net_171, A1);
and U202 (_net_172, _net_170, _net_171, SE);
or U203 (cond15, _net_163, _net_166, _net_169, _net_172);
not U204 (_net_173, A2);
not U205 (_net_174, B1);
and U206 (_net_175, _net_173, A1, _net_174, SE);
not U207 (_net_176, A2);
not U208 (_net_177, B2);
and U209 (_net_178, _net_176, A1, B1, _net_177, SE);
not U210 (_net_179, A1);
not U211 (_net_180, B2);
and U212 (_net_181, B1, _net_179, _net_180, SE);
not U213 (_net_182, B1);
not U214 (_net_183, A1);
and U215 (_net_184, _net_182, _net_183, SE);
or U216 (cond15, _net_175, _net_178, _net_181, _net_184);
not U217 (_net_185, A2);
and U218 (_net_186, _net_185, A1, B1, B2, SE);
and U219 (_net_187, A2, A1, SE);
not U220 (_net_188, A1);
and U221 (_net_189, B1, _net_188, B2, SE);
or U222 (cond14, _net_186, _net_187, _net_189);
not U223 (_net_190, A2);
and U224 (_net_191, _net_190, A1, B1, B2, SE);
and U225 (_net_192, A2, A1, SE);
not U226 (_net_193, A1);
and U227 (_net_194, B1, _net_193, B2, SE);
or U228 (cond14, _net_191, _net_192, _net_194);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$setuphold(posedge CK &&& cond2 , posedge A1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond2 , negedge A1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond1 , posedge A1 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond1 , negedge A1 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond0 , posedge A1 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond0 , negedge A1 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond5 , posedge A2 &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond5 , negedge A2 &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond4 , posedge A2 &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond4 , negedge A2 &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond3 , posedge A2 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond3 , negedge A2 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond8 , posedge B1 &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond8 , negedge B1 &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond7 , posedge B1 &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond7 , negedge B1 &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond6 , posedge B1 &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond6 , negedge B1 &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond11 , posedge B2 &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond11 , negedge B2 &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond10 , posedge B2 &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond10 , negedge B2 &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond9 , posedge B2 &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond9 , negedge B2 &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$width(posedge CK &&& cond17 , 0 ,0, viol_0);
$width(negedge CK &&& cond17 , 0 ,0, viol_0);
$width(posedge CK &&& cond16 , 0 ,0, viol_0);
$width(negedge CK &&& cond16 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond12 , posedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , negedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , posedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , negedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond15 , posedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond15 , negedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , posedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , negedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDAO22PQO_L50_1

//%BEGIN SEH_FSDAO22PQO_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDAO22PQO_L50_2 (Q, SO, CK, A1, A2, B1, B2, SI, SE, VDD, VSS, VBP, VBN);
   output Q,  SO;
   input CK, A1, A2, B1, B2, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_A1, delayed_A2,
        delayed_B1, delayed_B2, delayed_SI,
	delayed_SE;

   wire int_res__DA, int_res__DB, int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDAO22PQO_L50_2 (Q, SO, CK, A1, A2, B1, B2, SI, SE, VDD, VSS);
   output Q,  SO;
   input CK, A1, A2, B1, B2, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_A1, delayed_A2,
        delayed_B1, delayed_B2, delayed_SI,
	delayed_SE;

   wire int_res__DA, int_res__DB, int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_A1, A1_org);
   buf (delayed_A2, A2_org);
   buf (delayed_B1, B1_org);
   buf (delayed_B2, B2_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif


   and (int_res__DA, delayed_A1, delayed_A2);
   and (int_res__DB, delayed_B1, delayed_B2);
   or (int_res__D, int_res__DA, int_res__DB);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res_mux, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (Q, int_res_iq);
       buf #1 (SO, int_res_iq);
   `else
       buf (Q, int_res_iq);
       buf (SO, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, B1);
not U1 (_net_1, B2);
not U2 (_net_2, SE);
and U3 (cond2, _net_0, A2, _net_1, _net_2);
not U4 (_net_3, B1);
not U5 (_net_4, B2);
not U6 (_net_5, SE);
and U7 (cond2, _net_3, A2, _net_4, _net_5);
not U8 (_net_6, B1);
not U9 (_net_7, SE);
and U10 (cond1, _net_6, A2, B2, _net_7);
not U11 (_net_8, B1);
not U12 (_net_9, SE);
and U13 (cond1, _net_8, A2, B2, _net_9);
not U14 (_net_10, B2);
not U15 (_net_11, SE);
and U16 (cond0, B1, A2, _net_10, _net_11);
not U17 (_net_12, B2);
not U18 (_net_13, SE);
and U19 (cond0, B1, A2, _net_12, _net_13);
not U20 (_net_14, B1);
not U21 (_net_15, B2);
not U22 (_net_16, SE);
and U23 (cond5, _net_14, A1, _net_15, _net_16);
not U24 (_net_17, B1);
not U25 (_net_18, B2);
not U26 (_net_19, SE);
and U27 (cond5, _net_17, A1, _net_18, _net_19);
not U28 (_net_20, B1);
not U29 (_net_21, SE);
and U30 (cond4, _net_20, A1, B2, _net_21);
not U31 (_net_22, B1);
not U32 (_net_23, SE);
and U33 (cond4, _net_22, A1, B2, _net_23);
not U34 (_net_24, B2);
not U35 (_net_25, SE);
and U36 (cond3, B1, A1, _net_24, _net_25);
not U37 (_net_26, B2);
not U38 (_net_27, SE);
and U39 (cond3, B1, A1, _net_26, _net_27);
not U40 (_net_28, A2);
not U41 (_net_29, A1);
not U42 (_net_30, SE);
and U43 (cond8, _net_28, _net_29, B2, _net_30);
not U44 (_net_31, A2);
not U45 (_net_32, A1);
not U46 (_net_33, SE);
and U47 (cond8, _net_31, _net_32, B2, _net_33);
not U48 (_net_34, A1);
not U49 (_net_35, SE);
and U50 (cond7, A2, _net_34, B2, _net_35);
not U51 (_net_36, A1);
not U52 (_net_37, SE);
and U53 (cond7, A2, _net_36, B2, _net_37);
not U54 (_net_38, A2);
not U55 (_net_39, SE);
and U56 (cond6, _net_38, A1, B2, _net_39);
not U57 (_net_40, A2);
not U58 (_net_41, SE);
and U59 (cond6, _net_40, A1, B2, _net_41);
not U60 (_net_42, A2);
not U61 (_net_43, A1);
not U62 (_net_44, SE);
and U63 (cond11, _net_42, _net_43, B1, _net_44);
not U64 (_net_45, A2);
not U65 (_net_46, A1);
not U66 (_net_47, SE);
and U67 (cond11, _net_45, _net_46, B1, _net_47);
not U68 (_net_48, A1);
not U69 (_net_49, SE);
and U70 (cond10, A2, _net_48, B1, _net_49);
not U71 (_net_50, A1);
not U72 (_net_51, SE);
and U73 (cond10, A2, _net_50, B1, _net_51);
not U74 (_net_52, A2);
not U75 (_net_53, SE);
and U76 (cond9, _net_52, A1, B1, _net_53);
not U77 (_net_54, A2);
not U78 (_net_55, SE);
and U79 (cond9, _net_54, A1, B1, _net_55);
not U80 (_net_56, A2);
not U81 (_net_57, SI);
and U82 (_net_58, _net_56, A1, B1, B2, SE, _net_57);
not U83 (_net_59, SI);
and U84 (_net_60, A2, A1, SE, _net_59);
not U85 (_net_61, A2);
not U86 (_net_62, B2);
not U87 (_net_63, SI);
and U88 (_net_64, _net_61, A1, B1, _net_62, SE, _net_63);
not U89 (_net_65, A2);
not U90 (_net_66, B2);
not U91 (_net_67, SE);
and U92 (_net_68, _net_65, A1, B1, _net_66, _net_67);
not U93 (_net_69, A2);
not U94 (_net_70, B1);
not U95 (_net_71, SI);
and U96 (_net_72, _net_69, A1, _net_70, SE, _net_71);
not U97 (_net_73, A2);
not U98 (_net_74, B1);
not U99 (_net_75, SE);
and U100 (_net_76, _net_73, A1, _net_74, _net_75);
not U101 (_net_77, A1);
not U102 (_net_78, SI);
and U103 (_net_79, B1, _net_77, B2, SE, _net_78);
not U104 (_net_80, A1);
not U105 (_net_81, B2);
not U106 (_net_82, SI);
and U107 (_net_83, B1, _net_80, _net_81, SE, _net_82);
not U108 (_net_84, A1);
not U109 (_net_85, B2);
not U110 (_net_86, SE);
and U111 (_net_87, B1, _net_84, _net_85, _net_86);
not U112 (_net_88, B1);
not U113 (_net_89, A1);
not U114 (_net_90, SI);
and U115 (_net_91, _net_88, _net_89, SE, _net_90);
not U116 (_net_92, B1);
not U117 (_net_93, A1);
not U118 (_net_94, SE);
and U119 (_net_95, _net_92, _net_93, _net_94);
or U120 (cond17, _net_58, _net_60, _net_64, _net_68, _net_72, _net_76, _net_79, _net_83, _net_87, _net_91, _net_95);
not U121 (_net_96, SE);
and U122 (_net_97, A2, A1, _net_96);
and U123 (_net_98, A2, A1, SE, SI);
not U124 (_net_99, A2);
and U125 (_net_100, _net_99, A1, B1, B2, SE, SI);
not U126 (_net_101, A2);
not U127 (_net_102, SE);
and U128 (_net_103, _net_101, A1, B1, B2, _net_102);
not U129 (_net_104, A2);
not U130 (_net_105, B2);
and U131 (_net_106, _net_104, A1, B1, _net_105, SE, SI);
not U132 (_net_107, A2);
not U133 (_net_108, B1);
and U134 (_net_109, _net_107, A1, _net_108, SE, SI);
not U135 (_net_110, A1);
and U136 (_net_111, B1, _net_110, B2, SE, SI);
not U137 (_net_112, A1);
not U138 (_net_113, SE);
and U139 (_net_114, B1, _net_112, B2, _net_113);
not U140 (_net_115, A1);
not U141 (_net_116, B2);
and U142 (_net_117, B1, _net_115, _net_116, SE, SI);
not U143 (_net_118, B1);
not U144 (_net_119, A1);
and U145 (_net_120, _net_118, _net_119, SE, SI);
or U146 (cond16, _net_97, _net_98, _net_100, _net_103, _net_106, _net_109, _net_111, _net_114, _net_117, _net_120);
not U147 (_net_121, A2);
not U148 (_net_122, B1);
and U149 (_net_123, _net_121, A1, _net_122, SI);
not U150 (_net_124, A2);
not U151 (_net_125, B2);
and U152 (_net_126, _net_124, A1, B1, _net_125, SI);
not U153 (_net_127, A1);
not U154 (_net_128, B2);
and U155 (_net_129, B1, _net_127, _net_128, SI);
not U156 (_net_130, B1);
not U157 (_net_131, A1);
and U158 (_net_132, _net_130, _net_131, SI);
or U159 (cond12, _net_123, _net_126, _net_129, _net_132);
not U160 (_net_133, A2);
not U161 (_net_134, B1);
and U162 (_net_135, _net_133, A1, _net_134, SI);
not U163 (_net_136, A2);
not U164 (_net_137, B2);
and U165 (_net_138, _net_136, A1, B1, _net_137, SI);
not U166 (_net_139, A1);
not U167 (_net_140, B2);
and U168 (_net_141, B1, _net_139, _net_140, SI);
not U169 (_net_142, B1);
not U170 (_net_143, A1);
and U171 (_net_144, _net_142, _net_143, SI);
or U172 (cond12, _net_135, _net_138, _net_141, _net_144);
not U173 (_net_145, A2);
not U174 (_net_146, SI);
and U175 (_net_147, _net_145, A1, B1, B2, _net_146);
not U176 (_net_148, SI);
and U177 (_net_149, A2, A1, _net_148);
not U178 (_net_150, A1);
not U179 (_net_151, SI);
and U180 (_net_152, B1, _net_150, B2, _net_151);
or U181 (cond13, _net_147, _net_149, _net_152);
not U182 (_net_153, A2);
not U183 (_net_154, SI);
and U184 (_net_155, _net_153, A1, B1, B2, _net_154);
not U185 (_net_156, SI);
and U186 (_net_157, A2, A1, _net_156);
not U187 (_net_158, A1);
not U188 (_net_159, SI);
and U189 (_net_160, B1, _net_158, B2, _net_159);
or U190 (cond13, _net_155, _net_157, _net_160);
not U191 (_net_161, A2);
not U192 (_net_162, B1);
and U193 (_net_163, _net_161, A1, _net_162, SE);
not U194 (_net_164, A2);
not U195 (_net_165, B2);
and U196 (_net_166, _net_164, A1, B1, _net_165, SE);
not U197 (_net_167, A1);
not U198 (_net_168, B2);
and U199 (_net_169, B1, _net_167, _net_168, SE);
not U200 (_net_170, B1);
not U201 (_net_171, A1);
and U202 (_net_172, _net_170, _net_171, SE);
or U203 (cond15, _net_163, _net_166, _net_169, _net_172);
not U204 (_net_173, A2);
not U205 (_net_174, B1);
and U206 (_net_175, _net_173, A1, _net_174, SE);
not U207 (_net_176, A2);
not U208 (_net_177, B2);
and U209 (_net_178, _net_176, A1, B1, _net_177, SE);
not U210 (_net_179, A1);
not U211 (_net_180, B2);
and U212 (_net_181, B1, _net_179, _net_180, SE);
not U213 (_net_182, B1);
not U214 (_net_183, A1);
and U215 (_net_184, _net_182, _net_183, SE);
or U216 (cond15, _net_175, _net_178, _net_181, _net_184);
not U217 (_net_185, A2);
and U218 (_net_186, _net_185, A1, B1, B2, SE);
and U219 (_net_187, A2, A1, SE);
not U220 (_net_188, A1);
and U221 (_net_189, B1, _net_188, B2, SE);
or U222 (cond14, _net_186, _net_187, _net_189);
not U223 (_net_190, A2);
and U224 (_net_191, _net_190, A1, B1, B2, SE);
and U225 (_net_192, A2, A1, SE);
not U226 (_net_193, A1);
and U227 (_net_194, B1, _net_193, B2, SE);
or U228 (cond14, _net_191, _net_192, _net_194);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$setuphold(posedge CK &&& cond2 , posedge A1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond2 , negedge A1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond1 , posedge A1 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond1 , negedge A1 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond0 , posedge A1 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond0 , negedge A1 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond5 , posedge A2 &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond5 , negedge A2 &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond4 , posedge A2 &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond4 , negedge A2 &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond3 , posedge A2 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond3 , negedge A2 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond8 , posedge B1 &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond8 , negedge B1 &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond7 , posedge B1 &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond7 , negedge B1 &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond6 , posedge B1 &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond6 , negedge B1 &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond11 , posedge B2 &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond11 , negedge B2 &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond10 , posedge B2 &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond10 , negedge B2 &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond9 , posedge B2 &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond9 , negedge B2 &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$width(posedge CK &&& cond17 , 0 ,0, viol_0);
$width(negedge CK &&& cond17 , 0 ,0, viol_0);
$width(posedge CK &&& cond16 , 0 ,0, viol_0);
$width(negedge CK &&& cond16 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond12 , posedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , negedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , posedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , negedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond15 , posedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond15 , negedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , posedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , negedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDAO22PQO_L50_2

//%BEGIN SEH_FSDAO22PQO_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDAO22PQO_L50_4 (Q, SO, CK, A1, A2, B1, B2, SI, SE, VDD, VSS, VBP, VBN);
   output Q,  SO;
   input CK, A1, A2, B1, B2, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_A1, delayed_A2,
        delayed_B1, delayed_B2, delayed_SI,
	delayed_SE;

   wire int_res__DA, int_res__DB, int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDAO22PQO_L50_4 (Q, SO, CK, A1, A2, B1, B2, SI, SE, VDD, VSS);
   output Q,  SO;
   input CK, A1, A2, B1, B2, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_A1, delayed_A2,
        delayed_B1, delayed_B2, delayed_SI,
	delayed_SE;

   wire int_res__DA, int_res__DB, int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_A1, A1_org);
   buf (delayed_A2, A2_org);
   buf (delayed_B1, B1_org);
   buf (delayed_B2, B2_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif


   and (int_res__DA, delayed_A1, delayed_A2);
   and (int_res__DB, delayed_B1, delayed_B2);
   or (int_res__D, int_res__DA, int_res__DB);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res_mux, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (Q, int_res_iq);
       buf #1 (SO, int_res_iq);
   `else
       buf (Q, int_res_iq);
       buf (SO, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, B1);
not U1 (_net_1, B2);
not U2 (_net_2, SE);
and U3 (cond2, _net_0, A2, _net_1, _net_2);
not U4 (_net_3, B1);
not U5 (_net_4, B2);
not U6 (_net_5, SE);
and U7 (cond2, _net_3, A2, _net_4, _net_5);
not U8 (_net_6, B1);
not U9 (_net_7, SE);
and U10 (cond1, _net_6, A2, B2, _net_7);
not U11 (_net_8, B1);
not U12 (_net_9, SE);
and U13 (cond1, _net_8, A2, B2, _net_9);
not U14 (_net_10, B2);
not U15 (_net_11, SE);
and U16 (cond0, B1, A2, _net_10, _net_11);
not U17 (_net_12, B2);
not U18 (_net_13, SE);
and U19 (cond0, B1, A2, _net_12, _net_13);
not U20 (_net_14, B1);
not U21 (_net_15, B2);
not U22 (_net_16, SE);
and U23 (cond5, _net_14, A1, _net_15, _net_16);
not U24 (_net_17, B1);
not U25 (_net_18, B2);
not U26 (_net_19, SE);
and U27 (cond5, _net_17, A1, _net_18, _net_19);
not U28 (_net_20, B1);
not U29 (_net_21, SE);
and U30 (cond4, _net_20, A1, B2, _net_21);
not U31 (_net_22, B1);
not U32 (_net_23, SE);
and U33 (cond4, _net_22, A1, B2, _net_23);
not U34 (_net_24, B2);
not U35 (_net_25, SE);
and U36 (cond3, B1, A1, _net_24, _net_25);
not U37 (_net_26, B2);
not U38 (_net_27, SE);
and U39 (cond3, B1, A1, _net_26, _net_27);
not U40 (_net_28, A2);
not U41 (_net_29, A1);
not U42 (_net_30, SE);
and U43 (cond8, _net_28, _net_29, B2, _net_30);
not U44 (_net_31, A2);
not U45 (_net_32, A1);
not U46 (_net_33, SE);
and U47 (cond8, _net_31, _net_32, B2, _net_33);
not U48 (_net_34, A1);
not U49 (_net_35, SE);
and U50 (cond7, A2, _net_34, B2, _net_35);
not U51 (_net_36, A1);
not U52 (_net_37, SE);
and U53 (cond7, A2, _net_36, B2, _net_37);
not U54 (_net_38, A2);
not U55 (_net_39, SE);
and U56 (cond6, _net_38, A1, B2, _net_39);
not U57 (_net_40, A2);
not U58 (_net_41, SE);
and U59 (cond6, _net_40, A1, B2, _net_41);
not U60 (_net_42, A2);
not U61 (_net_43, A1);
not U62 (_net_44, SE);
and U63 (cond11, _net_42, _net_43, B1, _net_44);
not U64 (_net_45, A2);
not U65 (_net_46, A1);
not U66 (_net_47, SE);
and U67 (cond11, _net_45, _net_46, B1, _net_47);
not U68 (_net_48, A1);
not U69 (_net_49, SE);
and U70 (cond10, A2, _net_48, B1, _net_49);
not U71 (_net_50, A1);
not U72 (_net_51, SE);
and U73 (cond10, A2, _net_50, B1, _net_51);
not U74 (_net_52, A2);
not U75 (_net_53, SE);
and U76 (cond9, _net_52, A1, B1, _net_53);
not U77 (_net_54, A2);
not U78 (_net_55, SE);
and U79 (cond9, _net_54, A1, B1, _net_55);
not U80 (_net_56, A2);
not U81 (_net_57, SI);
and U82 (_net_58, _net_56, A1, B1, B2, SE, _net_57);
not U83 (_net_59, SI);
and U84 (_net_60, A2, A1, SE, _net_59);
not U85 (_net_61, A2);
not U86 (_net_62, B2);
not U87 (_net_63, SI);
and U88 (_net_64, _net_61, A1, B1, _net_62, SE, _net_63);
not U89 (_net_65, A2);
not U90 (_net_66, B2);
not U91 (_net_67, SE);
and U92 (_net_68, _net_65, A1, B1, _net_66, _net_67);
not U93 (_net_69, A2);
not U94 (_net_70, B1);
not U95 (_net_71, SI);
and U96 (_net_72, _net_69, A1, _net_70, SE, _net_71);
not U97 (_net_73, A2);
not U98 (_net_74, B1);
not U99 (_net_75, SE);
and U100 (_net_76, _net_73, A1, _net_74, _net_75);
not U101 (_net_77, A1);
not U102 (_net_78, SI);
and U103 (_net_79, B1, _net_77, B2, SE, _net_78);
not U104 (_net_80, A1);
not U105 (_net_81, B2);
not U106 (_net_82, SI);
and U107 (_net_83, B1, _net_80, _net_81, SE, _net_82);
not U108 (_net_84, A1);
not U109 (_net_85, B2);
not U110 (_net_86, SE);
and U111 (_net_87, B1, _net_84, _net_85, _net_86);
not U112 (_net_88, B1);
not U113 (_net_89, A1);
not U114 (_net_90, SI);
and U115 (_net_91, _net_88, _net_89, SE, _net_90);
not U116 (_net_92, B1);
not U117 (_net_93, A1);
not U118 (_net_94, SE);
and U119 (_net_95, _net_92, _net_93, _net_94);
or U120 (cond17, _net_58, _net_60, _net_64, _net_68, _net_72, _net_76, _net_79, _net_83, _net_87, _net_91, _net_95);
not U121 (_net_96, SE);
and U122 (_net_97, A2, A1, _net_96);
and U123 (_net_98, A2, A1, SE, SI);
not U124 (_net_99, A2);
and U125 (_net_100, _net_99, A1, B1, B2, SE, SI);
not U126 (_net_101, A2);
not U127 (_net_102, SE);
and U128 (_net_103, _net_101, A1, B1, B2, _net_102);
not U129 (_net_104, A2);
not U130 (_net_105, B2);
and U131 (_net_106, _net_104, A1, B1, _net_105, SE, SI);
not U132 (_net_107, A2);
not U133 (_net_108, B1);
and U134 (_net_109, _net_107, A1, _net_108, SE, SI);
not U135 (_net_110, A1);
and U136 (_net_111, B1, _net_110, B2, SE, SI);
not U137 (_net_112, A1);
not U138 (_net_113, SE);
and U139 (_net_114, B1, _net_112, B2, _net_113);
not U140 (_net_115, A1);
not U141 (_net_116, B2);
and U142 (_net_117, B1, _net_115, _net_116, SE, SI);
not U143 (_net_118, B1);
not U144 (_net_119, A1);
and U145 (_net_120, _net_118, _net_119, SE, SI);
or U146 (cond16, _net_97, _net_98, _net_100, _net_103, _net_106, _net_109, _net_111, _net_114, _net_117, _net_120);
not U147 (_net_121, A2);
not U148 (_net_122, B1);
and U149 (_net_123, _net_121, A1, _net_122, SI);
not U150 (_net_124, A2);
not U151 (_net_125, B2);
and U152 (_net_126, _net_124, A1, B1, _net_125, SI);
not U153 (_net_127, A1);
not U154 (_net_128, B2);
and U155 (_net_129, B1, _net_127, _net_128, SI);
not U156 (_net_130, B1);
not U157 (_net_131, A1);
and U158 (_net_132, _net_130, _net_131, SI);
or U159 (cond12, _net_123, _net_126, _net_129, _net_132);
not U160 (_net_133, A2);
not U161 (_net_134, B1);
and U162 (_net_135, _net_133, A1, _net_134, SI);
not U163 (_net_136, A2);
not U164 (_net_137, B2);
and U165 (_net_138, _net_136, A1, B1, _net_137, SI);
not U166 (_net_139, A1);
not U167 (_net_140, B2);
and U168 (_net_141, B1, _net_139, _net_140, SI);
not U169 (_net_142, B1);
not U170 (_net_143, A1);
and U171 (_net_144, _net_142, _net_143, SI);
or U172 (cond12, _net_135, _net_138, _net_141, _net_144);
not U173 (_net_145, A2);
not U174 (_net_146, SI);
and U175 (_net_147, _net_145, A1, B1, B2, _net_146);
not U176 (_net_148, SI);
and U177 (_net_149, A2, A1, _net_148);
not U178 (_net_150, A1);
not U179 (_net_151, SI);
and U180 (_net_152, B1, _net_150, B2, _net_151);
or U181 (cond13, _net_147, _net_149, _net_152);
not U182 (_net_153, A2);
not U183 (_net_154, SI);
and U184 (_net_155, _net_153, A1, B1, B2, _net_154);
not U185 (_net_156, SI);
and U186 (_net_157, A2, A1, _net_156);
not U187 (_net_158, A1);
not U188 (_net_159, SI);
and U189 (_net_160, B1, _net_158, B2, _net_159);
or U190 (cond13, _net_155, _net_157, _net_160);
not U191 (_net_161, A2);
not U192 (_net_162, B1);
and U193 (_net_163, _net_161, A1, _net_162, SE);
not U194 (_net_164, A2);
not U195 (_net_165, B2);
and U196 (_net_166, _net_164, A1, B1, _net_165, SE);
not U197 (_net_167, A1);
not U198 (_net_168, B2);
and U199 (_net_169, B1, _net_167, _net_168, SE);
not U200 (_net_170, B1);
not U201 (_net_171, A1);
and U202 (_net_172, _net_170, _net_171, SE);
or U203 (cond15, _net_163, _net_166, _net_169, _net_172);
not U204 (_net_173, A2);
not U205 (_net_174, B1);
and U206 (_net_175, _net_173, A1, _net_174, SE);
not U207 (_net_176, A2);
not U208 (_net_177, B2);
and U209 (_net_178, _net_176, A1, B1, _net_177, SE);
not U210 (_net_179, A1);
not U211 (_net_180, B2);
and U212 (_net_181, B1, _net_179, _net_180, SE);
not U213 (_net_182, B1);
not U214 (_net_183, A1);
and U215 (_net_184, _net_182, _net_183, SE);
or U216 (cond15, _net_175, _net_178, _net_181, _net_184);
not U217 (_net_185, A2);
and U218 (_net_186, _net_185, A1, B1, B2, SE);
and U219 (_net_187, A2, A1, SE);
not U220 (_net_188, A1);
and U221 (_net_189, B1, _net_188, B2, SE);
or U222 (cond14, _net_186, _net_187, _net_189);
not U223 (_net_190, A2);
and U224 (_net_191, _net_190, A1, B1, B2, SE);
and U225 (_net_192, A2, A1, SE);
not U226 (_net_193, A1);
and U227 (_net_194, B1, _net_193, B2, SE);
or U228 (cond14, _net_191, _net_192, _net_194);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$setuphold(posedge CK &&& cond2 , posedge A1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond2 , negedge A1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond1 , posedge A1 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond1 , negedge A1 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond0 , posedge A1 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond0 , negedge A1 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_A1);
$setuphold(posedge CK &&& cond5 , posedge A2 &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond5 , negedge A2 &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond4 , posedge A2 &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond4 , negedge A2 &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond3 , posedge A2 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond3 , negedge A2 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_A2);
$setuphold(posedge CK &&& cond8 , posedge B1 &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond8 , negedge B1 &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond7 , posedge B1 &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond7 , negedge B1 &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond6 , posedge B1 &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond6 , negedge B1 &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_B1);
$setuphold(posedge CK &&& cond11 , posedge B2 &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond11 , negedge B2 &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond10 , posedge B2 &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond10 , negedge B2 &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond9 , posedge B2 &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$setuphold(posedge CK &&& cond9 , negedge B2 &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_B2);
$width(posedge CK &&& cond17 , 0 ,0, viol_0);
$width(negedge CK &&& cond17 , 0 ,0, viol_0);
$width(posedge CK &&& cond16 , 0 ,0, viol_0);
$width(negedge CK &&& cond16 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond12 , posedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , negedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , posedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , negedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond15 , posedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond15 , negedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , posedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , negedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDAO22PQO_L50_4

//%BEGIN SEH_FSDNQ_V2L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDNQ_V2L50_1 (Q, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__CK, int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDNQ_V2L50_1 (Q, CK, D, SI, SE, VDD, VSS);
   output Q;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__CK, int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   not (int_res__CK, delayed_CK);
   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, int_res__CK, int_res__D);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       scl40_htc50_dff #1 (Q, viol_0, int_res__CK, int_res__D, xcr_0);
   `else
       scl40_htc50_dff (Q, viol_0, int_res__CK, int_res__D, xcr_0);
    `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond5, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond4, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond0, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond0, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond1, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond1, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(negedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDNQ_V2L50_1

//%BEGIN SEH_FSDNQ_V2L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDNQ_V2L50_2 (Q, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__CK, int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDNQ_V2L50_2 (Q, CK, D, SI, SE, VDD, VSS);
   output Q;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__CK, int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   not (int_res__CK, delayed_CK);
   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, int_res__CK, int_res__D);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       scl40_htc50_dff #1 (Q, viol_0, int_res__CK, int_res__D, xcr_0);
   `else
       scl40_htc50_dff (Q, viol_0, int_res__CK, int_res__D, xcr_0);
    `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond5, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond4, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond0, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond0, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond1, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond1, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(negedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDNQ_V2L50_2

//%BEGIN SEH_FSDNQ_V2L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDNQ_V2L50_4 (Q, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__CK, int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDNQ_V2L50_4 (Q, CK, D, SI, SE, VDD, VSS);
   output Q;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__CK, int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   not (int_res__CK, delayed_CK);
   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, int_res__CK, int_res__D);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       scl40_htc50_dff #1 (Q, viol_0, int_res__CK, int_res__D, xcr_0);
   `else
       scl40_htc50_dff (Q, viol_0, int_res__CK, int_res__D, xcr_0);
    `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond5, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond4, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond0, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond0, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond1, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond1, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(negedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDNQ_V2L50_4

//%BEGIN SEH_FSDNQO_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDNQO_L50_1 (Q, SO, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__CK, int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDNQO_L50_1 (Q, SO, CK, D, SI, SE, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__CK, int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif


   not (int_res__CK, delayed_CK);
   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, int_res__CK, int_res__D);
   scl40_htc50_dff (int_res_iq, viol_0, int_res__CK, int_res__D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (Q, int_res_iq);
       buf #1 (SO, int_res_iq);
   `else
       buf (Q, int_res_iq);
       buf (SO, int_res_iq);
    `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond5, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond4, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond0, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond0, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond1, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond1, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(negedge CK => (Q : 1'b1))=(0, 0);
(negedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(negedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDNQO_L50_1

//%BEGIN SEH_FSDNQO_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDNQO_L50_2 (Q, SO, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__CK, int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDNQO_L50_2 (Q, SO, CK, D, SI, SE, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__CK, int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif


   not (int_res__CK, delayed_CK);
   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, int_res__CK, int_res__D);
   scl40_htc50_dff (int_res_iq, viol_0, int_res__CK, int_res__D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (Q, int_res_iq);
       buf #1 (SO, int_res_iq);
   `else
       buf (Q, int_res_iq);
       buf (SO, int_res_iq);
    `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond5, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond4, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond0, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond0, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond1, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond1, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(negedge CK => (Q : 1'b1))=(0, 0);
(negedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(negedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDNQO_L50_2

//%BEGIN SEH_FSDNQO_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDNQO_L50_4 (Q, SO, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__CK, int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDNQO_L50_4 (Q, SO, CK, D, SI, SE, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__CK, int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif


   not (int_res__CK, delayed_CK);
   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, int_res__CK, int_res__D);
   scl40_htc50_dff (int_res_iq, viol_0, int_res__CK, int_res__D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (Q, int_res_iq);
       buf #1 (SO, int_res_iq);
   `else
       buf (Q, int_res_iq);
       buf (SO, int_res_iq);
    `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond5, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond4, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond0, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond0, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond1, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond1, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(negedge CK => (Q : 1'b1))=(0, 0);
(negedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(negedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDNQO_L50_4

//%BEGIN SEH_FSDNRBQ_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDNRBQ_L50_1 (Q, CK, D, SI, SE, RD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__CK, int_res__RD, int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDNRBQ_L50_1 (Q, CK, D, SI, SE, RD, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__CK, int_res__RD, int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
`endif

   not (int_res__CK, delayed_CK);
   not (int_res__RD, delayed_RD);
   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_r_err (xcr_0, int_res__CK, int_res__D, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       scl40_htc50_dff_r #1 (Q, viol_0, int_res__CK, int_res__D, int_res__RD, xcr_0);
   `else
       scl40_htc50_dff_r (Q, viol_0, int_res__CK, int_res__D, int_res__RD, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, _net_6);
or U8 (cond26, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, _net_8);
and U11 (_net_10, RD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SE, SI);
or U14 (cond25, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
not U16 (_net_14, SI);
and U17 (cond1, _net_13, RD, _net_14);
not U18 (_net_15, SE);
not U19 (_net_16, SI);
and U20 (cond1, _net_15, RD, _net_16);
not U21 (_net_17, SE);
and U22 (cond0, _net_17, RD, SI);
not U23 (_net_18, SE);
and U24 (cond0, _net_18, RD, SI);
not U25 (_net_19, D);
not U26 (_net_20, CK);
not U27 (_net_21, SE);
not U28 (_net_22, SI);
and U29 (cond24, _net_19, _net_20, _net_21, _net_22);
not U30 (_net_23, D);
not U31 (_net_24, CK);
not U32 (_net_25, SE);
and U33 (cond23, _net_23, _net_24, _net_25, SI);
not U34 (_net_26, D);
not U35 (_net_27, CK);
and U36 (cond22, _net_26, _net_27, SE, SI);
not U37 (_net_28, CK);
not U38 (_net_29, SE);
not U39 (_net_30, SI);
and U40 (cond21, D, _net_28, _net_29, _net_30);
not U41 (_net_31, CK);
not U42 (_net_32, SE);
and U43 (cond20, D, _net_31, _net_32, SI);
not U44 (_net_33, CK);
and U45 (cond18, D, _net_33, SE, SI);
not U46 (_net_34, CK);
not U47 (_net_35, SI);
and U48 (cond19, SE, _net_34, _net_35);
not U49 (_net_36, D);
and U50 (cond9, SE, _net_36, SI);
not U51 (_net_37, D);
and U52 (cond9, SE, _net_37, SI);
not U53 (_net_38, D);
not U54 (_net_39, SE);
not U55 (_net_40, SI);
and U56 (cond17, _net_38, CK, _net_39, _net_40);
not U57 (_net_41, D);
not U58 (_net_42, SE);
and U59 (cond16, _net_41, CK, _net_42, SI);
not U60 (_net_43, D);
not U61 (_net_44, SI);
and U62 (cond15, _net_43, CK, SE, _net_44);
not U63 (_net_45, D);
and U64 (cond14, _net_45, CK, SE, SI);
not U65 (_net_46, SE);
not U66 (_net_47, SI);
and U67 (cond13, D, CK, _net_46, _net_47);
not U68 (_net_48, SE);
and U69 (cond12, D, CK, _net_48, SI);
not U70 (_net_49, SI);
and U71 (cond11, D, CK, SE, _net_49);
and U72 (cond10, D, CK, SE, SI);
not U73 (_net_50, SE);
not U74 (_net_51, SI);
and U75 (cond8, _net_50, D, _net_51);
not U76 (_net_52, SE);
not U77 (_net_53, SI);
and U78 (cond8, _net_52, D, _net_53);
not U79 (_net_54, SE);
and U80 (cond7, _net_54, D, SI);
not U81 (_net_55, SE);
and U82 (cond7, _net_55, D, SI);
and U83 (cond6, SE, D, SI);
and U84 (cond6, SE, D, SI);
not U85 (_net_56, D);
and U86 (cond2, RD, _net_56, SI);
not U87 (_net_57, D);
and U88 (cond2, RD, _net_57, SI);
not U89 (_net_58, SI);
and U90 (cond3, RD, D, _net_58);
not U91 (_net_59, SI);
and U92 (cond3, RD, D, _net_59);
not U93 (_net_60, D);
and U94 (cond5, RD, _net_60, SE);
not U95 (_net_61, D);
and U96 (cond5, RD, _net_61, SE);
and U97 (cond4, RD, D, SE);
and U98 (cond4, RD, D, SE);

specify
if ((~(CK) & ~(D) & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond26 , 0 ,0, viol_0);
$width(negedge CK &&& cond26 , 0 ,0, viol_0);
$width(posedge CK &&& cond25 , 0 ,0, viol_0);
$width(negedge CK &&& cond25 , 0 ,0, viol_0);
$setuphold(negedge CK &&& cond1 , posedge D &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond1 , negedge D &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond24 , 0 ,0, viol_0);
$width(negedge RD &&& cond23 , 0 ,0, viol_0);
$width(negedge RD &&& cond22 , 0 ,0, viol_0);
$width(negedge RD &&& cond21 , 0 ,0, viol_0);
$width(negedge RD &&& cond20 , 0 ,0, viol_0);
$width(negedge RD &&& cond18 , 0 ,0, viol_0);
$width(negedge RD &&& cond19 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond9 , negedge CK &&& cond9 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond17 , 0 ,0, viol_0);
$width(negedge RD &&& cond16 , 0 ,0, viol_0);
$width(negedge RD &&& cond15 , 0 ,0, viol_0);
$width(negedge RD &&& cond14 , 0 ,0, viol_0);
$width(negedge RD &&& cond13 , 0 ,0, viol_0);
$width(negedge RD &&& cond12 , 0 ,0, viol_0);
$width(negedge RD &&& cond11 , 0 ,0, viol_0);
$width(negedge RD &&& cond10 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond8 , negedge CK &&& cond8 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond7 , negedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond6 , negedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(negedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond5 , posedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond5 , negedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDNRBQ_L50_1

//%BEGIN SEH_FSDNRBQ_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDNRBQ_L50_2 (Q, CK, D, SI, SE, RD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__CK, int_res__RD, int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDNRBQ_L50_2 (Q, CK, D, SI, SE, RD, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__CK, int_res__RD, int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
`endif

   not (int_res__CK, delayed_CK);
   not (int_res__RD, delayed_RD);
   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_r_err (xcr_0, int_res__CK, int_res__D, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       scl40_htc50_dff_r #1 (Q, viol_0, int_res__CK, int_res__D, int_res__RD, xcr_0);
   `else
       scl40_htc50_dff_r (Q, viol_0, int_res__CK, int_res__D, int_res__RD, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, _net_6);
or U8 (cond26, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, _net_8);
and U11 (_net_10, RD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SE, SI);
or U14 (cond25, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
not U16 (_net_14, SI);
and U17 (cond1, _net_13, RD, _net_14);
not U18 (_net_15, SE);
not U19 (_net_16, SI);
and U20 (cond1, _net_15, RD, _net_16);
not U21 (_net_17, SE);
and U22 (cond0, _net_17, RD, SI);
not U23 (_net_18, SE);
and U24 (cond0, _net_18, RD, SI);
not U25 (_net_19, D);
not U26 (_net_20, CK);
not U27 (_net_21, SE);
not U28 (_net_22, SI);
and U29 (cond24, _net_19, _net_20, _net_21, _net_22);
not U30 (_net_23, D);
not U31 (_net_24, CK);
not U32 (_net_25, SE);
and U33 (cond23, _net_23, _net_24, _net_25, SI);
not U34 (_net_26, D);
not U35 (_net_27, CK);
and U36 (cond22, _net_26, _net_27, SE, SI);
not U37 (_net_28, CK);
not U38 (_net_29, SE);
not U39 (_net_30, SI);
and U40 (cond21, D, _net_28, _net_29, _net_30);
not U41 (_net_31, CK);
not U42 (_net_32, SE);
and U43 (cond20, D, _net_31, _net_32, SI);
not U44 (_net_33, CK);
and U45 (cond18, D, _net_33, SE, SI);
not U46 (_net_34, CK);
not U47 (_net_35, SI);
and U48 (cond19, SE, _net_34, _net_35);
not U49 (_net_36, D);
and U50 (cond9, SE, _net_36, SI);
not U51 (_net_37, D);
and U52 (cond9, SE, _net_37, SI);
not U53 (_net_38, D);
not U54 (_net_39, SE);
not U55 (_net_40, SI);
and U56 (cond17, _net_38, CK, _net_39, _net_40);
not U57 (_net_41, D);
not U58 (_net_42, SE);
and U59 (cond16, _net_41, CK, _net_42, SI);
not U60 (_net_43, D);
not U61 (_net_44, SI);
and U62 (cond15, _net_43, CK, SE, _net_44);
not U63 (_net_45, D);
and U64 (cond14, _net_45, CK, SE, SI);
not U65 (_net_46, SE);
not U66 (_net_47, SI);
and U67 (cond13, D, CK, _net_46, _net_47);
not U68 (_net_48, SE);
and U69 (cond12, D, CK, _net_48, SI);
not U70 (_net_49, SI);
and U71 (cond11, D, CK, SE, _net_49);
and U72 (cond10, D, CK, SE, SI);
not U73 (_net_50, SE);
not U74 (_net_51, SI);
and U75 (cond8, _net_50, D, _net_51);
not U76 (_net_52, SE);
not U77 (_net_53, SI);
and U78 (cond8, _net_52, D, _net_53);
not U79 (_net_54, SE);
and U80 (cond7, _net_54, D, SI);
not U81 (_net_55, SE);
and U82 (cond7, _net_55, D, SI);
and U83 (cond6, SE, D, SI);
and U84 (cond6, SE, D, SI);
not U85 (_net_56, D);
and U86 (cond2, RD, _net_56, SI);
not U87 (_net_57, D);
and U88 (cond2, RD, _net_57, SI);
not U89 (_net_58, SI);
and U90 (cond3, RD, D, _net_58);
not U91 (_net_59, SI);
and U92 (cond3, RD, D, _net_59);
not U93 (_net_60, D);
and U94 (cond5, RD, _net_60, SE);
not U95 (_net_61, D);
and U96 (cond5, RD, _net_61, SE);
and U97 (cond4, RD, D, SE);
and U98 (cond4, RD, D, SE);

specify
if ((~(CK) & ~(D) & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond26 , 0 ,0, viol_0);
$width(negedge CK &&& cond26 , 0 ,0, viol_0);
$width(posedge CK &&& cond25 , 0 ,0, viol_0);
$width(negedge CK &&& cond25 , 0 ,0, viol_0);
$setuphold(negedge CK &&& cond1 , posedge D &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond1 , negedge D &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond24 , 0 ,0, viol_0);
$width(negedge RD &&& cond23 , 0 ,0, viol_0);
$width(negedge RD &&& cond22 , 0 ,0, viol_0);
$width(negedge RD &&& cond21 , 0 ,0, viol_0);
$width(negedge RD &&& cond20 , 0 ,0, viol_0);
$width(negedge RD &&& cond18 , 0 ,0, viol_0);
$width(negedge RD &&& cond19 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond9 , negedge CK &&& cond9 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond17 , 0 ,0, viol_0);
$width(negedge RD &&& cond16 , 0 ,0, viol_0);
$width(negedge RD &&& cond15 , 0 ,0, viol_0);
$width(negedge RD &&& cond14 , 0 ,0, viol_0);
$width(negedge RD &&& cond13 , 0 ,0, viol_0);
$width(negedge RD &&& cond12 , 0 ,0, viol_0);
$width(negedge RD &&& cond11 , 0 ,0, viol_0);
$width(negedge RD &&& cond10 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond8 , negedge CK &&& cond8 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond7 , negedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond6 , negedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(negedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond5 , posedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond5 , negedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDNRBQ_L50_2

//%BEGIN SEH_FSDNRBQ_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDNRBQ_L50_4 (Q, CK, D, SI, SE, RD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__CK, int_res__RD, int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDNRBQ_L50_4 (Q, CK, D, SI, SE, RD, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__CK, int_res__RD, int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
`endif

   not (int_res__CK, delayed_CK);
   not (int_res__RD, delayed_RD);
   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_r_err (xcr_0, int_res__CK, int_res__D, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       scl40_htc50_dff_r #1 (Q, viol_0, int_res__CK, int_res__D, int_res__RD, xcr_0);
   `else
       scl40_htc50_dff_r (Q, viol_0, int_res__CK, int_res__D, int_res__RD, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, _net_6);
or U8 (cond26, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, _net_8);
and U11 (_net_10, RD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SE, SI);
or U14 (cond25, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
not U16 (_net_14, SI);
and U17 (cond1, _net_13, RD, _net_14);
not U18 (_net_15, SE);
not U19 (_net_16, SI);
and U20 (cond1, _net_15, RD, _net_16);
not U21 (_net_17, SE);
and U22 (cond0, _net_17, RD, SI);
not U23 (_net_18, SE);
and U24 (cond0, _net_18, RD, SI);
not U25 (_net_19, D);
not U26 (_net_20, CK);
not U27 (_net_21, SE);
not U28 (_net_22, SI);
and U29 (cond24, _net_19, _net_20, _net_21, _net_22);
not U30 (_net_23, D);
not U31 (_net_24, CK);
not U32 (_net_25, SE);
and U33 (cond23, _net_23, _net_24, _net_25, SI);
not U34 (_net_26, D);
not U35 (_net_27, CK);
and U36 (cond22, _net_26, _net_27, SE, SI);
not U37 (_net_28, CK);
not U38 (_net_29, SE);
not U39 (_net_30, SI);
and U40 (cond21, D, _net_28, _net_29, _net_30);
not U41 (_net_31, CK);
not U42 (_net_32, SE);
and U43 (cond20, D, _net_31, _net_32, SI);
not U44 (_net_33, CK);
and U45 (cond18, D, _net_33, SE, SI);
not U46 (_net_34, CK);
not U47 (_net_35, SI);
and U48 (cond19, SE, _net_34, _net_35);
not U49 (_net_36, D);
and U50 (cond9, SE, _net_36, SI);
not U51 (_net_37, D);
and U52 (cond9, SE, _net_37, SI);
not U53 (_net_38, D);
not U54 (_net_39, SE);
not U55 (_net_40, SI);
and U56 (cond17, _net_38, CK, _net_39, _net_40);
not U57 (_net_41, D);
not U58 (_net_42, SE);
and U59 (cond16, _net_41, CK, _net_42, SI);
not U60 (_net_43, D);
not U61 (_net_44, SI);
and U62 (cond15, _net_43, CK, SE, _net_44);
not U63 (_net_45, D);
and U64 (cond14, _net_45, CK, SE, SI);
not U65 (_net_46, SE);
not U66 (_net_47, SI);
and U67 (cond13, D, CK, _net_46, _net_47);
not U68 (_net_48, SE);
and U69 (cond12, D, CK, _net_48, SI);
not U70 (_net_49, SI);
and U71 (cond11, D, CK, SE, _net_49);
and U72 (cond10, D, CK, SE, SI);
not U73 (_net_50, SE);
not U74 (_net_51, SI);
and U75 (cond8, _net_50, D, _net_51);
not U76 (_net_52, SE);
not U77 (_net_53, SI);
and U78 (cond8, _net_52, D, _net_53);
not U79 (_net_54, SE);
and U80 (cond7, _net_54, D, SI);
not U81 (_net_55, SE);
and U82 (cond7, _net_55, D, SI);
and U83 (cond6, SE, D, SI);
and U84 (cond6, SE, D, SI);
not U85 (_net_56, D);
and U86 (cond2, RD, _net_56, SI);
not U87 (_net_57, D);
and U88 (cond2, RD, _net_57, SI);
not U89 (_net_58, SI);
and U90 (cond3, RD, D, _net_58);
not U91 (_net_59, SI);
and U92 (cond3, RD, D, _net_59);
not U93 (_net_60, D);
and U94 (cond5, RD, _net_60, SE);
not U95 (_net_61, D);
and U96 (cond5, RD, _net_61, SE);
and U97 (cond4, RD, D, SE);
and U98 (cond4, RD, D, SE);

specify
if ((~(CK) & ~(D) & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond26 , 0 ,0, viol_0);
$width(negedge CK &&& cond26 , 0 ,0, viol_0);
$width(posedge CK &&& cond25 , 0 ,0, viol_0);
$width(negedge CK &&& cond25 , 0 ,0, viol_0);
$setuphold(negedge CK &&& cond1 , posedge D &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond1 , negedge D &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond24 , 0 ,0, viol_0);
$width(negedge RD &&& cond23 , 0 ,0, viol_0);
$width(negedge RD &&& cond22 , 0 ,0, viol_0);
$width(negedge RD &&& cond21 , 0 ,0, viol_0);
$width(negedge RD &&& cond20 , 0 ,0, viol_0);
$width(negedge RD &&& cond18 , 0 ,0, viol_0);
$width(negedge RD &&& cond19 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond9 , negedge CK &&& cond9 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond17 , 0 ,0, viol_0);
$width(negedge RD &&& cond16 , 0 ,0, viol_0);
$width(negedge RD &&& cond15 , 0 ,0, viol_0);
$width(negedge RD &&& cond14 , 0 ,0, viol_0);
$width(negedge RD &&& cond13 , 0 ,0, viol_0);
$width(negedge RD &&& cond12 , 0 ,0, viol_0);
$width(negedge RD &&& cond11 , 0 ,0, viol_0);
$width(negedge RD &&& cond10 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond8 , negedge CK &&& cond8 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond7 , negedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond6 , negedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(negedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond5 , posedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond5 , negedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDNRBQ_L50_4

//%BEGIN SEH_FSDNRBQ_V2L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDNRBQ_V2L50_1 (Q, CK, D, SI, SE, RD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__CK, int_res__RD, int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDNRBQ_V2L50_1 (Q, CK, D, SI, SE, RD, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__CK, int_res__RD, int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
`endif

   not (int_res__CK, delayed_CK);
   not (int_res__RD, delayed_RD);
   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_r_err (xcr_0, int_res__CK, int_res__D, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       scl40_htc50_dff_r #1 (Q, viol_0, int_res__CK, int_res__D, int_res__RD, xcr_0);
   `else
       scl40_htc50_dff_r (Q, viol_0, int_res__CK, int_res__D, int_res__RD, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, _net_6);
or U8 (cond11, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, _net_8);
and U11 (_net_10, RD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SE, SI);
or U14 (cond10, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, _net_13, RD);
not U17 (_net_14, SE);
and U18 (cond0, _net_14, RD);
not U19 (_net_15, D);
and U20 (cond7, SE, _net_15, SI);
not U21 (_net_16, D);
and U22 (cond7, SE, _net_16, SI);
not U23 (_net_17, D);
not U24 (_net_18, SI);
and U25 (_net_19, _net_17, CK, SE, _net_18);
not U26 (_net_20, SI);
and U27 (_net_21, D, CK, SE, _net_20);
not U28 (_net_22, D);
not U29 (_net_23, SE);
and U30 (_net_24, _net_22, CK, _net_23);
or U31 (cond9, _net_19, _net_21, _net_24);
not U32 (_net_25, SE);
and U33 (_net_26, D, CK, _net_25);
and U34 (_net_27, D, CK, SE, SI);
not U35 (_net_28, D);
and U36 (_net_29, _net_28, CK, SE, SI);
or U37 (cond8, _net_26, _net_27, _net_29);
not U38 (_net_30, SE);
and U39 (cond6, _net_30, D);
not U40 (_net_31, SE);
and U41 (cond6, _net_31, D);
and U42 (cond5, SE, D, SI);
and U43 (cond5, SE, D, SI);
not U44 (_net_32, D);
and U45 (cond1, RD, _net_32, SI);
not U46 (_net_33, D);
and U47 (cond1, RD, _net_33, SI);
not U48 (_net_34, SI);
and U49 (cond2, RD, D, _net_34);
not U50 (_net_35, SI);
and U51 (cond2, RD, D, _net_35);
not U52 (_net_36, D);
and U53 (cond4, RD, _net_36, SE);
not U54 (_net_37, D);
and U55 (cond4, RD, _net_37, SE);
and U56 (cond3, RD, D, SE);
and U57 (cond3, RD, D, SE);

specify
if (~(CK)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & SE & ~(SI)) | (CK & ~(D) & SE & ~(SI)) | (CK & ~(D) & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & SE & SI) | (CK & D & ~(SE)) | (CK & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(negedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& ~CK , 0 ,0, viol_0);
$recrem(posedge RD &&& cond7 , negedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond9 , 0 ,0, viol_0);
$width(negedge RD &&& cond8 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond6 , negedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond5 , negedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(negedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDNRBQ_V2L50_1

//%BEGIN SEH_FSDNRBQ_V2L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDNRBQ_V2L50_2 (Q, CK, D, SI, SE, RD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__CK, int_res__RD, int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDNRBQ_V2L50_2 (Q, CK, D, SI, SE, RD, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__CK, int_res__RD, int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
`endif

   not (int_res__CK, delayed_CK);
   not (int_res__RD, delayed_RD);
   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_r_err (xcr_0, int_res__CK, int_res__D, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       scl40_htc50_dff_r #1 (Q, viol_0, int_res__CK, int_res__D, int_res__RD, xcr_0);
   `else
       scl40_htc50_dff_r (Q, viol_0, int_res__CK, int_res__D, int_res__RD, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, _net_6);
or U8 (cond11, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, _net_8);
and U11 (_net_10, RD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SE, SI);
or U14 (cond10, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, _net_13, RD);
not U17 (_net_14, SE);
and U18 (cond0, _net_14, RD);
not U19 (_net_15, D);
and U20 (cond7, SE, _net_15, SI);
not U21 (_net_16, D);
and U22 (cond7, SE, _net_16, SI);
not U23 (_net_17, D);
not U24 (_net_18, SI);
and U25 (_net_19, _net_17, CK, SE, _net_18);
not U26 (_net_20, SI);
and U27 (_net_21, D, CK, SE, _net_20);
not U28 (_net_22, D);
not U29 (_net_23, SE);
and U30 (_net_24, _net_22, CK, _net_23);
or U31 (cond9, _net_19, _net_21, _net_24);
not U32 (_net_25, SE);
and U33 (_net_26, D, CK, _net_25);
and U34 (_net_27, D, CK, SE, SI);
not U35 (_net_28, D);
and U36 (_net_29, _net_28, CK, SE, SI);
or U37 (cond8, _net_26, _net_27, _net_29);
not U38 (_net_30, SE);
and U39 (cond6, _net_30, D);
not U40 (_net_31, SE);
and U41 (cond6, _net_31, D);
and U42 (cond5, SE, D, SI);
and U43 (cond5, SE, D, SI);
not U44 (_net_32, D);
and U45 (cond1, RD, _net_32, SI);
not U46 (_net_33, D);
and U47 (cond1, RD, _net_33, SI);
not U48 (_net_34, SI);
and U49 (cond2, RD, D, _net_34);
not U50 (_net_35, SI);
and U51 (cond2, RD, D, _net_35);
not U52 (_net_36, D);
and U53 (cond4, RD, _net_36, SE);
not U54 (_net_37, D);
and U55 (cond4, RD, _net_37, SE);
and U56 (cond3, RD, D, SE);
and U57 (cond3, RD, D, SE);

specify
if (~(CK)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & SE & ~(SI)) | (CK & ~(D) & SE & ~(SI)) | (CK & ~(D) & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & SE & SI) | (CK & D & ~(SE)) | (CK & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(negedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& ~CK , 0 ,0, viol_0);
$recrem(posedge RD &&& cond7 , negedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond9 , 0 ,0, viol_0);
$width(negedge RD &&& cond8 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond6 , negedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond5 , negedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(negedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDNRBQ_V2L50_2

//%BEGIN SEH_FSDNRBQ_V2L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDNRBQ_V2L50_4 (Q, CK, D, SI, SE, RD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__CK, int_res__RD, int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDNRBQ_V2L50_4 (Q, CK, D, SI, SE, RD, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__CK, int_res__RD, int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
`endif

   not (int_res__CK, delayed_CK);
   not (int_res__RD, delayed_RD);
   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_r_err (xcr_0, int_res__CK, int_res__D, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       scl40_htc50_dff_r #1 (Q, viol_0, int_res__CK, int_res__D, int_res__RD, xcr_0);
   `else
       scl40_htc50_dff_r (Q, viol_0, int_res__CK, int_res__D, int_res__RD, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, _net_6);
or U8 (cond11, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, _net_8);
and U11 (_net_10, RD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SE, SI);
or U14 (cond10, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, _net_13, RD);
not U17 (_net_14, SE);
and U18 (cond0, _net_14, RD);
not U19 (_net_15, D);
and U20 (cond7, SE, _net_15, SI);
not U21 (_net_16, D);
and U22 (cond7, SE, _net_16, SI);
not U23 (_net_17, D);
not U24 (_net_18, SI);
and U25 (_net_19, _net_17, CK, SE, _net_18);
not U26 (_net_20, SI);
and U27 (_net_21, D, CK, SE, _net_20);
not U28 (_net_22, D);
not U29 (_net_23, SE);
and U30 (_net_24, _net_22, CK, _net_23);
or U31 (cond9, _net_19, _net_21, _net_24);
not U32 (_net_25, SE);
and U33 (_net_26, D, CK, _net_25);
and U34 (_net_27, D, CK, SE, SI);
not U35 (_net_28, D);
and U36 (_net_29, _net_28, CK, SE, SI);
or U37 (cond8, _net_26, _net_27, _net_29);
not U38 (_net_30, SE);
and U39 (cond6, _net_30, D);
not U40 (_net_31, SE);
and U41 (cond6, _net_31, D);
and U42 (cond5, SE, D, SI);
and U43 (cond5, SE, D, SI);
not U44 (_net_32, D);
and U45 (cond1, RD, _net_32, SI);
not U46 (_net_33, D);
and U47 (cond1, RD, _net_33, SI);
not U48 (_net_34, SI);
and U49 (cond2, RD, D, _net_34);
not U50 (_net_35, SI);
and U51 (cond2, RD, D, _net_35);
not U52 (_net_36, D);
and U53 (cond4, RD, _net_36, SE);
not U54 (_net_37, D);
and U55 (cond4, RD, _net_37, SE);
and U56 (cond3, RD, D, SE);
and U57 (cond3, RD, D, SE);

specify
if (~(CK)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & SE & ~(SI)) | (CK & ~(D) & SE & ~(SI)) | (CK & ~(D) & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & SE & SI) | (CK & D & ~(SE)) | (CK & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
(negedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(negedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& ~CK , 0 ,0, viol_0);
$recrem(posedge RD &&& cond7 , negedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond9 , 0 ,0, viol_0);
$width(negedge RD &&& cond8 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond6 , negedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond5 , negedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(negedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDNRBQ_V2L50_4

//%BEGIN SEH_FSDNRBSBQO_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDNRBSBQO_L50_1 (Q, SO, CK, D, SI, SE, RD, SD, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD, delayed_SD;

   wire int_res__CK, int_res__D, int_res__SD, int_res__RD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDNRBSBQO_L50_1 (Q, SO, CK, D, SI, SE, RD, SD, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD, delayed_SD;

   wire int_res__CK, int_res__D, int_res__SD, int_res__RD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif

   not (int_res__CK, delayed_CK);
   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__SD, delayed_SD);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_sr_err (xcr_0, int_res__CK, int_res__D, int_res__SD, int_res__RD);
   scl40_htc50_dff_sr_0 (int_res_iq, viol_0, int_res__CK, int_res__D, int_res__SD, int_res__RD, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
        buf #1 (SO, int_res_iq);
   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SD, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SD, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, SD, _net_6);
or U8 (cond20, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, SD, _net_8);
and U11 (_net_10, RD, D, SD, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SD, SE, SI);
or U14 (cond19, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, SD, RD, _net_13);
not U17 (_net_14, SE);
and U18 (cond0, SD, RD, _net_14);
not U19 (_net_15, CK);
and U20 (cond12, SD, _net_15);
not U21 (_net_16, D);
and U22 (cond7, SD, _net_16, SE, SI);
not U23 (_net_17, D);
and U24 (cond7, SD, _net_17, SE, SI);
not U25 (_net_18, D);
not U26 (_net_19, SI);
and U27 (_net_20, _net_18, CK, SD, SE, _net_19);
not U28 (_net_21, SI);
and U29 (_net_22, D, CK, SD, SE, _net_21);
not U30 (_net_23, D);
not U31 (_net_24, SE);
and U32 (_net_25, _net_23, CK, SD, _net_24);
or U33 (cond11, _net_20, _net_22, _net_25);
not U34 (_net_26, SE);
and U35 (_net_27, D, CK, SD, _net_26);
and U36 (_net_28, D, CK, SD, SE, SI);
not U37 (_net_29, D);
and U38 (_net_30, _net_29, CK, SD, SE, SI);
or U39 (cond10, _net_27, _net_28, _net_30);
not U40 (_net_31, D);
not U41 (_net_32, SI);
and U42 (_net_33, _net_31, CK, SE, _net_32);
not U43 (_net_34, SI);
and U44 (_net_35, D, CK, SE, _net_34);
not U45 (_net_36, D);
not U46 (_net_37, SE);
and U47 (_net_38, _net_36, CK, _net_37);
or U48 (cond9, _net_33, _net_35, _net_38);
not U49 (_net_39, D);
not U50 (_net_40, SI);
and U51 (_net_41, _net_39, CK, SE, _net_40);
not U52 (_net_42, SI);
and U53 (_net_43, D, CK, SE, _net_42);
not U54 (_net_44, D);
not U55 (_net_45, SE);
and U56 (_net_46, _net_44, CK, _net_45);
or U57 (cond9, _net_41, _net_43, _net_46);
not U58 (_net_47, SE);
and U59 (_net_48, D, CK, _net_47);
and U60 (_net_49, D, CK, SE, SI);
not U61 (_net_50, D);
and U62 (_net_51, _net_50, CK, SE, SI);
or U63 (cond8, _net_48, _net_49, _net_51);
not U64 (_net_52, SE);
and U65 (_net_53, D, CK, _net_52);
and U66 (_net_54, D, CK, SE, SI);
not U67 (_net_55, D);
and U68 (_net_56, _net_55, CK, SE, SI);
or U69 (cond8, _net_53, _net_54, _net_56);
not U70 (_net_57, SE);
and U71 (cond6, SD, D, _net_57);
not U72 (_net_58, SE);
and U73 (cond6, SD, D, _net_58);
and U74 (cond5, SD, D, SE, SI);
and U75 (cond5, SD, D, SE, SI);
not U76 (_net_59, CK);
and U77 (cond18, RD, _net_59);
not U78 (_net_60, D);
not U79 (_net_61, SE);
and U80 (cond15, RD, _net_60, _net_61);
not U81 (_net_62, D);
not U82 (_net_63, SE);
and U83 (cond15, RD, _net_62, _net_63);
not U84 (_net_64, D);
not U85 (_net_65, SI);
and U86 (cond14, RD, _net_64, SE, _net_65);
not U87 (_net_66, D);
not U88 (_net_67, SI);
and U89 (cond14, RD, _net_66, SE, _net_67);
not U90 (_net_68, D);
not U91 (_net_69, SI);
and U92 (_net_70, _net_68, CK, RD, SE, _net_69);
not U93 (_net_71, SI);
and U94 (_net_72, D, CK, RD, SE, _net_71);
not U95 (_net_73, D);
not U96 (_net_74, SE);
and U97 (_net_75, _net_73, CK, RD, _net_74);
or U98 (cond17, _net_70, _net_72, _net_75);
not U99 (_net_76, SE);
and U100 (_net_77, D, CK, RD, _net_76);
and U101 (_net_78, D, CK, RD, SE, SI);
not U102 (_net_79, D);
and U103 (_net_80, _net_79, CK, RD, SE, SI);
or U104 (cond16, _net_77, _net_78, _net_80);
not U105 (_net_81, D);
not U106 (_net_82, SI);
and U107 (_net_83, _net_81, CK, SE, _net_82);
not U108 (_net_84, SI);
and U109 (_net_85, D, CK, SE, _net_84);
not U110 (_net_86, D);
not U111 (_net_87, SE);
and U112 (_net_88, _net_86, CK, _net_87);
or U113 (cond9, _net_83, _net_85, _net_88);
not U114 (_net_89, D);
not U115 (_net_90, SI);
and U116 (_net_91, _net_89, CK, SE, _net_90);
not U117 (_net_92, SI);
and U118 (_net_93, D, CK, SE, _net_92);
not U119 (_net_94, D);
not U120 (_net_95, SE);
and U121 (_net_96, _net_94, CK, _net_95);
or U122 (cond9, _net_91, _net_93, _net_96);
not U123 (_net_97, SE);
and U124 (_net_98, D, CK, _net_97);
and U125 (_net_99, D, CK, SE, SI);
not U126 (_net_100, D);
and U127 (_net_101, _net_100, CK, SE, SI);
or U128 (cond8, _net_98, _net_99, _net_101);
not U129 (_net_102, SE);
and U130 (_net_103, D, CK, _net_102);
and U131 (_net_104, D, CK, SE, SI);
not U132 (_net_105, D);
and U133 (_net_106, _net_105, CK, SE, SI);
or U134 (cond8, _net_103, _net_104, _net_106);
not U135 (_net_107, SI);
and U136 (cond13, RD, D, SE, _net_107);
not U137 (_net_108, SI);
and U138 (cond13, RD, D, SE, _net_108);
not U139 (_net_109, D);
and U140 (cond1, RD, _net_109, SD, SI);
not U141 (_net_110, D);
and U142 (cond1, RD, _net_110, SD, SI);
not U143 (_net_111, SI);
and U144 (cond2, RD, D, SD, _net_111);
not U145 (_net_112, SI);
and U146 (cond2, RD, D, SD, _net_112);
not U147 (_net_113, D);
and U148 (cond4, RD, _net_113, SD, SE);
not U149 (_net_114, D);
and U150 (cond4, RD, _net_114, SD, SE);
and U151 (cond3, RD, D, SD, SE);
and U152 (cond3, RD, D, SD, SE);

specify
if ((~(CK) & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & D & SD & SE & ~(SI)) | (CK & ~(D) & SD & SE & ~(SI)) | (CK & ~(D) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & SD & SE & SI) | (CK & D & SD & ~(SE)) | (CK & ~(D) & SD & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & D & RD & SE & ~(SI)) | (CK & ~(D) & RD & SE & ~(SI)) | (CK & ~(D) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & D & RD & SE & SI) | (CK & D & RD & ~(SE)) | (CK & ~(D) & RD & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
(negedge CK => (Q : 1'b1))=(0, 0);
if ((~(CK) & ~(SD))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((~(CK) & SD)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((CK & D & SD & SE & ~(SI)) | (CK & ~(D) & SD & SE & ~(SI)) | (CK & ~(D) & SD & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & D & SD & SE & SI) | (CK & D & SD & ~(SE)) | (CK & ~(D) & SD & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & RD)) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((CK & D & RD & SE & ~(SI)) | (CK & ~(D) & RD & SE & ~(SI)) | (CK & ~(D) & RD & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((CK & D & RD & SE & SI) | (CK & D & RD & ~(SE)) | (CK & ~(D) & RD & SE & SI)) (negedge SD => (SO -: 1'b1))=(0, 0);
(negedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond20 , 0 ,0, viol_0);
$width(negedge CK &&& cond20 , 0 ,0, viol_0);
$width(posedge CK &&& cond19 , 0 ,0, viol_0);
$width(negedge CK &&& cond19 , 0 ,0, viol_0);
$setuphold(negedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge SD &&& ~CK , posedge RD &&& ~CK , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond12 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond7 , negedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond11 , 0 ,0, viol_0);
$width(negedge RD &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond9 , posedge RD &&& cond9 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$setuphold(posedge SD &&& cond8 , posedge RD &&& cond8 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$recrem(posedge RD &&& cond6 , negedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond5 , negedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge RD &&& ~CK , posedge SD &&& ~CK , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond18 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond15 , negedge CK &&& cond15 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond14 , negedge CK &&& cond14 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond17 , 0 ,0, viol_0);
$width(negedge SD &&& cond16 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond9 , posedge SD &&& cond9 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond8 , posedge SD &&& cond8 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$recrem(posedge SD &&& cond13 , negedge CK &&& cond13 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$setuphold(negedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDNRBSBQO_L50_1

//%BEGIN SEH_FSDNRBSBQO_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDNRBSBQO_L50_2 (Q, SO, CK, D, SI, SE, RD, SD, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD, delayed_SD;

   wire int_res__CK, int_res__D, int_res__SD, int_res__RD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDNRBSBQO_L50_2 (Q, SO, CK, D, SI, SE, RD, SD, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD, delayed_SD;

   wire int_res__CK, int_res__D, int_res__SD, int_res__RD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif

   not (int_res__CK, delayed_CK);
   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__SD, delayed_SD);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_sr_err (xcr_0, int_res__CK, int_res__D, int_res__SD, int_res__RD);
   scl40_htc50_dff_sr_0 (int_res_iq, viol_0, int_res__CK, int_res__D, int_res__SD, int_res__RD, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
        buf #1 (SO, int_res_iq);
   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SD, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SD, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, SD, _net_6);
or U8 (cond20, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, SD, _net_8);
and U11 (_net_10, RD, D, SD, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SD, SE, SI);
or U14 (cond19, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, SD, RD, _net_13);
not U17 (_net_14, SE);
and U18 (cond0, SD, RD, _net_14);
not U19 (_net_15, CK);
and U20 (cond12, SD, _net_15);
not U21 (_net_16, D);
and U22 (cond7, SD, _net_16, SE, SI);
not U23 (_net_17, D);
and U24 (cond7, SD, _net_17, SE, SI);
not U25 (_net_18, D);
not U26 (_net_19, SI);
and U27 (_net_20, _net_18, CK, SD, SE, _net_19);
not U28 (_net_21, SI);
and U29 (_net_22, D, CK, SD, SE, _net_21);
not U30 (_net_23, D);
not U31 (_net_24, SE);
and U32 (_net_25, _net_23, CK, SD, _net_24);
or U33 (cond11, _net_20, _net_22, _net_25);
not U34 (_net_26, SE);
and U35 (_net_27, D, CK, SD, _net_26);
and U36 (_net_28, D, CK, SD, SE, SI);
not U37 (_net_29, D);
and U38 (_net_30, _net_29, CK, SD, SE, SI);
or U39 (cond10, _net_27, _net_28, _net_30);
not U40 (_net_31, D);
not U41 (_net_32, SI);
and U42 (_net_33, _net_31, CK, SE, _net_32);
not U43 (_net_34, SI);
and U44 (_net_35, D, CK, SE, _net_34);
not U45 (_net_36, D);
not U46 (_net_37, SE);
and U47 (_net_38, _net_36, CK, _net_37);
or U48 (cond9, _net_33, _net_35, _net_38);
not U49 (_net_39, D);
not U50 (_net_40, SI);
and U51 (_net_41, _net_39, CK, SE, _net_40);
not U52 (_net_42, SI);
and U53 (_net_43, D, CK, SE, _net_42);
not U54 (_net_44, D);
not U55 (_net_45, SE);
and U56 (_net_46, _net_44, CK, _net_45);
or U57 (cond9, _net_41, _net_43, _net_46);
not U58 (_net_47, SE);
and U59 (_net_48, D, CK, _net_47);
and U60 (_net_49, D, CK, SE, SI);
not U61 (_net_50, D);
and U62 (_net_51, _net_50, CK, SE, SI);
or U63 (cond8, _net_48, _net_49, _net_51);
not U64 (_net_52, SE);
and U65 (_net_53, D, CK, _net_52);
and U66 (_net_54, D, CK, SE, SI);
not U67 (_net_55, D);
and U68 (_net_56, _net_55, CK, SE, SI);
or U69 (cond8, _net_53, _net_54, _net_56);
not U70 (_net_57, SE);
and U71 (cond6, SD, D, _net_57);
not U72 (_net_58, SE);
and U73 (cond6, SD, D, _net_58);
and U74 (cond5, SD, D, SE, SI);
and U75 (cond5, SD, D, SE, SI);
not U76 (_net_59, CK);
and U77 (cond18, RD, _net_59);
not U78 (_net_60, D);
not U79 (_net_61, SE);
and U80 (cond15, RD, _net_60, _net_61);
not U81 (_net_62, D);
not U82 (_net_63, SE);
and U83 (cond15, RD, _net_62, _net_63);
not U84 (_net_64, D);
not U85 (_net_65, SI);
and U86 (cond14, RD, _net_64, SE, _net_65);
not U87 (_net_66, D);
not U88 (_net_67, SI);
and U89 (cond14, RD, _net_66, SE, _net_67);
not U90 (_net_68, D);
not U91 (_net_69, SI);
and U92 (_net_70, _net_68, CK, RD, SE, _net_69);
not U93 (_net_71, SI);
and U94 (_net_72, D, CK, RD, SE, _net_71);
not U95 (_net_73, D);
not U96 (_net_74, SE);
and U97 (_net_75, _net_73, CK, RD, _net_74);
or U98 (cond17, _net_70, _net_72, _net_75);
not U99 (_net_76, SE);
and U100 (_net_77, D, CK, RD, _net_76);
and U101 (_net_78, D, CK, RD, SE, SI);
not U102 (_net_79, D);
and U103 (_net_80, _net_79, CK, RD, SE, SI);
or U104 (cond16, _net_77, _net_78, _net_80);
not U105 (_net_81, D);
not U106 (_net_82, SI);
and U107 (_net_83, _net_81, CK, SE, _net_82);
not U108 (_net_84, SI);
and U109 (_net_85, D, CK, SE, _net_84);
not U110 (_net_86, D);
not U111 (_net_87, SE);
and U112 (_net_88, _net_86, CK, _net_87);
or U113 (cond9, _net_83, _net_85, _net_88);
not U114 (_net_89, D);
not U115 (_net_90, SI);
and U116 (_net_91, _net_89, CK, SE, _net_90);
not U117 (_net_92, SI);
and U118 (_net_93, D, CK, SE, _net_92);
not U119 (_net_94, D);
not U120 (_net_95, SE);
and U121 (_net_96, _net_94, CK, _net_95);
or U122 (cond9, _net_91, _net_93, _net_96);
not U123 (_net_97, SE);
and U124 (_net_98, D, CK, _net_97);
and U125 (_net_99, D, CK, SE, SI);
not U126 (_net_100, D);
and U127 (_net_101, _net_100, CK, SE, SI);
or U128 (cond8, _net_98, _net_99, _net_101);
not U129 (_net_102, SE);
and U130 (_net_103, D, CK, _net_102);
and U131 (_net_104, D, CK, SE, SI);
not U132 (_net_105, D);
and U133 (_net_106, _net_105, CK, SE, SI);
or U134 (cond8, _net_103, _net_104, _net_106);
not U135 (_net_107, SI);
and U136 (cond13, RD, D, SE, _net_107);
not U137 (_net_108, SI);
and U138 (cond13, RD, D, SE, _net_108);
not U139 (_net_109, D);
and U140 (cond1, RD, _net_109, SD, SI);
not U141 (_net_110, D);
and U142 (cond1, RD, _net_110, SD, SI);
not U143 (_net_111, SI);
and U144 (cond2, RD, D, SD, _net_111);
not U145 (_net_112, SI);
and U146 (cond2, RD, D, SD, _net_112);
not U147 (_net_113, D);
and U148 (cond4, RD, _net_113, SD, SE);
not U149 (_net_114, D);
and U150 (cond4, RD, _net_114, SD, SE);
and U151 (cond3, RD, D, SD, SE);
and U152 (cond3, RD, D, SD, SE);

specify
if ((~(CK) & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & D & SD & SE & ~(SI)) | (CK & ~(D) & SD & SE & ~(SI)) | (CK & ~(D) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & SD & SE & SI) | (CK & D & SD & ~(SE)) | (CK & ~(D) & SD & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & D & RD & SE & ~(SI)) | (CK & ~(D) & RD & SE & ~(SI)) | (CK & ~(D) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & D & RD & SE & SI) | (CK & D & RD & ~(SE)) | (CK & ~(D) & RD & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
(negedge CK => (Q : 1'b1))=(0, 0);
if ((~(CK) & ~(SD))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((~(CK) & SD)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((CK & D & SD & SE & ~(SI)) | (CK & ~(D) & SD & SE & ~(SI)) | (CK & ~(D) & SD & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & D & SD & SE & SI) | (CK & D & SD & ~(SE)) | (CK & ~(D) & SD & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & RD)) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((CK & D & RD & SE & ~(SI)) | (CK & ~(D) & RD & SE & ~(SI)) | (CK & ~(D) & RD & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((CK & D & RD & SE & SI) | (CK & D & RD & ~(SE)) | (CK & ~(D) & RD & SE & SI)) (negedge SD => (SO -: 1'b1))=(0, 0);
(negedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond20 , 0 ,0, viol_0);
$width(negedge CK &&& cond20 , 0 ,0, viol_0);
$width(posedge CK &&& cond19 , 0 ,0, viol_0);
$width(negedge CK &&& cond19 , 0 ,0, viol_0);
$setuphold(negedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge SD &&& ~CK , posedge RD &&& ~CK , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond12 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond7 , negedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond11 , 0 ,0, viol_0);
$width(negedge RD &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond9 , posedge RD &&& cond9 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$setuphold(posedge SD &&& cond8 , posedge RD &&& cond8 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$recrem(posedge RD &&& cond6 , negedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond5 , negedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge RD &&& ~CK , posedge SD &&& ~CK , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond18 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond15 , negedge CK &&& cond15 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond14 , negedge CK &&& cond14 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond17 , 0 ,0, viol_0);
$width(negedge SD &&& cond16 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond9 , posedge SD &&& cond9 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond8 , posedge SD &&& cond8 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$recrem(posedge SD &&& cond13 , negedge CK &&& cond13 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$setuphold(negedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDNRBSBQO_L50_2

//%BEGIN SEH_FSDNRBSBQO_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDNRBSBQO_L50_4 (Q, SO, CK, D, SI, SE, RD, SD, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD, delayed_SD;

   wire int_res__CK, int_res__D, int_res__SD, int_res__RD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDNRBSBQO_L50_4 (Q, SO, CK, D, SI, SE, RD, SD, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD, delayed_SD;

   wire int_res__CK, int_res__D, int_res__SD, int_res__RD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif

   not (int_res__CK, delayed_CK);
   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__SD, delayed_SD);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_sr_err (xcr_0, int_res__CK, int_res__D, int_res__SD, int_res__RD);
   scl40_htc50_dff_sr_0 (int_res_iq, viol_0, int_res__CK, int_res__D, int_res__SD, int_res__RD, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
        buf #1 (SO, int_res_iq);
   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SD, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SD, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, SD, _net_6);
or U8 (cond20, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, SD, _net_8);
and U11 (_net_10, RD, D, SD, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SD, SE, SI);
or U14 (cond19, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, SD, RD, _net_13);
not U17 (_net_14, SE);
and U18 (cond0, SD, RD, _net_14);
not U19 (_net_15, CK);
and U20 (cond12, SD, _net_15);
not U21 (_net_16, D);
and U22 (cond7, SD, _net_16, SE, SI);
not U23 (_net_17, D);
and U24 (cond7, SD, _net_17, SE, SI);
not U25 (_net_18, D);
not U26 (_net_19, SI);
and U27 (_net_20, _net_18, CK, SD, SE, _net_19);
not U28 (_net_21, SI);
and U29 (_net_22, D, CK, SD, SE, _net_21);
not U30 (_net_23, D);
not U31 (_net_24, SE);
and U32 (_net_25, _net_23, CK, SD, _net_24);
or U33 (cond11, _net_20, _net_22, _net_25);
not U34 (_net_26, SE);
and U35 (_net_27, D, CK, SD, _net_26);
and U36 (_net_28, D, CK, SD, SE, SI);
not U37 (_net_29, D);
and U38 (_net_30, _net_29, CK, SD, SE, SI);
or U39 (cond10, _net_27, _net_28, _net_30);
not U40 (_net_31, D);
not U41 (_net_32, SI);
and U42 (_net_33, _net_31, CK, SE, _net_32);
not U43 (_net_34, SI);
and U44 (_net_35, D, CK, SE, _net_34);
not U45 (_net_36, D);
not U46 (_net_37, SE);
and U47 (_net_38, _net_36, CK, _net_37);
or U48 (cond9, _net_33, _net_35, _net_38);
not U49 (_net_39, D);
not U50 (_net_40, SI);
and U51 (_net_41, _net_39, CK, SE, _net_40);
not U52 (_net_42, SI);
and U53 (_net_43, D, CK, SE, _net_42);
not U54 (_net_44, D);
not U55 (_net_45, SE);
and U56 (_net_46, _net_44, CK, _net_45);
or U57 (cond9, _net_41, _net_43, _net_46);
not U58 (_net_47, SE);
and U59 (_net_48, D, CK, _net_47);
and U60 (_net_49, D, CK, SE, SI);
not U61 (_net_50, D);
and U62 (_net_51, _net_50, CK, SE, SI);
or U63 (cond8, _net_48, _net_49, _net_51);
not U64 (_net_52, SE);
and U65 (_net_53, D, CK, _net_52);
and U66 (_net_54, D, CK, SE, SI);
not U67 (_net_55, D);
and U68 (_net_56, _net_55, CK, SE, SI);
or U69 (cond8, _net_53, _net_54, _net_56);
not U70 (_net_57, SE);
and U71 (cond6, SD, D, _net_57);
not U72 (_net_58, SE);
and U73 (cond6, SD, D, _net_58);
and U74 (cond5, SD, D, SE, SI);
and U75 (cond5, SD, D, SE, SI);
not U76 (_net_59, CK);
and U77 (cond18, RD, _net_59);
not U78 (_net_60, D);
not U79 (_net_61, SE);
and U80 (cond15, RD, _net_60, _net_61);
not U81 (_net_62, D);
not U82 (_net_63, SE);
and U83 (cond15, RD, _net_62, _net_63);
not U84 (_net_64, D);
not U85 (_net_65, SI);
and U86 (cond14, RD, _net_64, SE, _net_65);
not U87 (_net_66, D);
not U88 (_net_67, SI);
and U89 (cond14, RD, _net_66, SE, _net_67);
not U90 (_net_68, D);
not U91 (_net_69, SI);
and U92 (_net_70, _net_68, CK, RD, SE, _net_69);
not U93 (_net_71, SI);
and U94 (_net_72, D, CK, RD, SE, _net_71);
not U95 (_net_73, D);
not U96 (_net_74, SE);
and U97 (_net_75, _net_73, CK, RD, _net_74);
or U98 (cond17, _net_70, _net_72, _net_75);
not U99 (_net_76, SE);
and U100 (_net_77, D, CK, RD, _net_76);
and U101 (_net_78, D, CK, RD, SE, SI);
not U102 (_net_79, D);
and U103 (_net_80, _net_79, CK, RD, SE, SI);
or U104 (cond16, _net_77, _net_78, _net_80);
not U105 (_net_81, D);
not U106 (_net_82, SI);
and U107 (_net_83, _net_81, CK, SE, _net_82);
not U108 (_net_84, SI);
and U109 (_net_85, D, CK, SE, _net_84);
not U110 (_net_86, D);
not U111 (_net_87, SE);
and U112 (_net_88, _net_86, CK, _net_87);
or U113 (cond9, _net_83, _net_85, _net_88);
not U114 (_net_89, D);
not U115 (_net_90, SI);
and U116 (_net_91, _net_89, CK, SE, _net_90);
not U117 (_net_92, SI);
and U118 (_net_93, D, CK, SE, _net_92);
not U119 (_net_94, D);
not U120 (_net_95, SE);
and U121 (_net_96, _net_94, CK, _net_95);
or U122 (cond9, _net_91, _net_93, _net_96);
not U123 (_net_97, SE);
and U124 (_net_98, D, CK, _net_97);
and U125 (_net_99, D, CK, SE, SI);
not U126 (_net_100, D);
and U127 (_net_101, _net_100, CK, SE, SI);
or U128 (cond8, _net_98, _net_99, _net_101);
not U129 (_net_102, SE);
and U130 (_net_103, D, CK, _net_102);
and U131 (_net_104, D, CK, SE, SI);
not U132 (_net_105, D);
and U133 (_net_106, _net_105, CK, SE, SI);
or U134 (cond8, _net_103, _net_104, _net_106);
not U135 (_net_107, SI);
and U136 (cond13, RD, D, SE, _net_107);
not U137 (_net_108, SI);
and U138 (cond13, RD, D, SE, _net_108);
not U139 (_net_109, D);
and U140 (cond1, RD, _net_109, SD, SI);
not U141 (_net_110, D);
and U142 (cond1, RD, _net_110, SD, SI);
not U143 (_net_111, SI);
and U144 (cond2, RD, D, SD, _net_111);
not U145 (_net_112, SI);
and U146 (cond2, RD, D, SD, _net_112);
not U147 (_net_113, D);
and U148 (cond4, RD, _net_113, SD, SE);
not U149 (_net_114, D);
and U150 (cond4, RD, _net_114, SD, SE);
and U151 (cond3, RD, D, SD, SE);
and U152 (cond3, RD, D, SD, SE);

specify
if ((~(CK) & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & D & SD & SE & ~(SI)) | (CK & ~(D) & SD & SE & ~(SI)) | (CK & ~(D) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & SD & SE & SI) | (CK & D & SD & ~(SE)) | (CK & ~(D) & SD & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & D & RD & SE & ~(SI)) | (CK & ~(D) & RD & SE & ~(SI)) | (CK & ~(D) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & D & RD & SE & SI) | (CK & D & RD & ~(SE)) | (CK & ~(D) & RD & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
(negedge CK => (Q : 1'b1))=(0, 0);
if ((~(CK) & ~(SD))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((~(CK) & SD)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((CK & D & SD & SE & ~(SI)) | (CK & ~(D) & SD & SE & ~(SI)) | (CK & ~(D) & SD & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & D & SD & SE & SI) | (CK & D & SD & ~(SE)) | (CK & ~(D) & SD & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & RD)) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((CK & D & RD & SE & ~(SI)) | (CK & ~(D) & RD & SE & ~(SI)) | (CK & ~(D) & RD & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((CK & D & RD & SE & SI) | (CK & D & RD & ~(SE)) | (CK & ~(D) & RD & SE & SI)) (negedge SD => (SO -: 1'b1))=(0, 0);
(negedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond20 , 0 ,0, viol_0);
$width(negedge CK &&& cond20 , 0 ,0, viol_0);
$width(posedge CK &&& cond19 , 0 ,0, viol_0);
$width(negedge CK &&& cond19 , 0 ,0, viol_0);
$setuphold(negedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(negedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge SD &&& ~CK , posedge RD &&& ~CK , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond12 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond7 , negedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond11 , 0 ,0, viol_0);
$width(negedge RD &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond9 , posedge RD &&& cond9 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$setuphold(posedge SD &&& cond8 , posedge RD &&& cond8 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$recrem(posedge RD &&& cond6 , negedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond5 , negedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge RD &&& ~CK , posedge SD &&& ~CK , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond18 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond15 , negedge CK &&& cond15 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond14 , negedge CK &&& cond14 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond17 , 0 ,0, viol_0);
$width(negedge SD &&& cond16 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond9 , posedge SD &&& cond9 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond8 , posedge SD &&& cond8 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$recrem(posedge SD &&& cond13 , negedge CK &&& cond13 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$setuphold(negedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(negedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(negedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDNRBSBQO_L50_4

//%BEGIN SEH_FSDPC1BQ_DL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPC1BQ_DL50_1 (Q, CK, D, SI, SE, RS, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPC1BQ_DL50_1 (Q, CK, D, SI, SE, RS, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RS, RS_org);
`endif

   and (int_res__D, delayed_D, delayed_RS);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);
   
   `ifdef VIRL_functiononly
      scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `else
      scl40_htc50_dff (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
not U0 (_net_0, RS);
not U1 (_net_1, SI);
and U2 (_net_2, _net_0, D, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RS, D, SE, _net_3);
not U5 (_net_5, RS);
not U6 (_net_6, SE);
and U7 (_net_7, _net_5, D, _net_6);
not U8 (_net_8, D);
not U9 (_net_9, SI);
and U10 (_net_10, SE, _net_8, _net_9);
not U11 (_net_11, SE);
not U12 (_net_12, D);
and U13 (_net_13, _net_11, _net_12);
or U14 (cond10, _net_2, _net_4, _net_7, _net_10, _net_13);
not U15 (_net_14, SE);
and U16 (_net_15, RS, D, _net_14);
and U17 (_net_16, RS, D, SE, SI);
not U18 (_net_17, RS);
and U19 (_net_18, _net_17, D, SE, SI);
not U20 (_net_19, D);
and U21 (_net_20, SE, _net_19, SI);
or U22 (cond9, _net_15, _net_16, _net_18, _net_20);
not U23 (_net_21, SE);
and U24 (cond0, _net_21, RS);
not U25 (_net_22, SE);
and U26 (cond0, _net_22, RS);
not U27 (_net_23, SE);
and U28 (cond1, _net_23, D);
not U29 (_net_24, SE);
and U30 (cond1, _net_24, D);
not U31 (_net_25, RS);
not U32 (_net_26, D);
and U33 (cond4, _net_25, _net_26, SI);
not U34 (_net_27, RS);
not U35 (_net_28, D);
and U36 (cond4, _net_27, _net_28, SI);
not U37 (_net_29, D);
and U38 (cond3, RS, _net_29, SI);
not U39 (_net_30, D);
and U40 (cond3, RS, _net_30, SI);
not U41 (_net_31, RS);
and U42 (cond2, _net_31, D, SI);
not U43 (_net_32, RS);
and U44 (cond2, _net_32, D, SI);
not U45 (_net_33, SI);
and U46 (cond5, RS, D, _net_33);
not U47 (_net_34, SI);
and U48 (cond5, RS, D, _net_34);
not U49 (_net_35, D);
and U50 (cond8, SE, _net_35);
not U51 (_net_36, D);
and U52 (cond8, SE, _net_36);
not U53 (_net_37, RS);
and U54 (cond7, _net_37, D, SE);
not U55 (_net_38, RS);
and U56 (cond7, _net_38, D, SE);
and U57 (cond6, RS, D, SE);
and U58 (cond6, RS, D, SE);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$width(posedge CK &&& cond9 , 0 ,0, viol_0);
$width(negedge CK &&& cond9 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , posedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond1 , negedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , posedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , negedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond8 , negedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , posedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , negedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , posedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , negedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif   
endmodule
`endcelldefine

//%END SEH_FSDPC1BQ_DL50_1

//%BEGIN SEH_FSDPC1BQ_DL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPC1BQ_DL50_2 (Q, CK, D, SI, SE, RS, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPC1BQ_DL50_2 (Q, CK, D, SI, SE, RS, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RS, RS_org);
`endif

   and (int_res__D, delayed_D, delayed_RS);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);
   
   `ifdef VIRL_functiononly
      scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `else
      scl40_htc50_dff (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
not U0 (_net_0, RS);
not U1 (_net_1, SI);
and U2 (_net_2, _net_0, D, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RS, D, SE, _net_3);
not U5 (_net_5, RS);
not U6 (_net_6, SE);
and U7 (_net_7, _net_5, D, _net_6);
not U8 (_net_8, D);
not U9 (_net_9, SI);
and U10 (_net_10, SE, _net_8, _net_9);
not U11 (_net_11, SE);
not U12 (_net_12, D);
and U13 (_net_13, _net_11, _net_12);
or U14 (cond10, _net_2, _net_4, _net_7, _net_10, _net_13);
not U15 (_net_14, SE);
and U16 (_net_15, RS, D, _net_14);
and U17 (_net_16, RS, D, SE, SI);
not U18 (_net_17, RS);
and U19 (_net_18, _net_17, D, SE, SI);
not U20 (_net_19, D);
and U21 (_net_20, SE, _net_19, SI);
or U22 (cond9, _net_15, _net_16, _net_18, _net_20);
not U23 (_net_21, SE);
and U24 (cond0, _net_21, RS);
not U25 (_net_22, SE);
and U26 (cond0, _net_22, RS);
not U27 (_net_23, SE);
and U28 (cond1, _net_23, D);
not U29 (_net_24, SE);
and U30 (cond1, _net_24, D);
not U31 (_net_25, RS);
not U32 (_net_26, D);
and U33 (cond4, _net_25, _net_26, SI);
not U34 (_net_27, RS);
not U35 (_net_28, D);
and U36 (cond4, _net_27, _net_28, SI);
not U37 (_net_29, D);
and U38 (cond3, RS, _net_29, SI);
not U39 (_net_30, D);
and U40 (cond3, RS, _net_30, SI);
not U41 (_net_31, RS);
and U42 (cond2, _net_31, D, SI);
not U43 (_net_32, RS);
and U44 (cond2, _net_32, D, SI);
not U45 (_net_33, SI);
and U46 (cond5, RS, D, _net_33);
not U47 (_net_34, SI);
and U48 (cond5, RS, D, _net_34);
not U49 (_net_35, D);
and U50 (cond8, SE, _net_35);
not U51 (_net_36, D);
and U52 (cond8, SE, _net_36);
not U53 (_net_37, RS);
and U54 (cond7, _net_37, D, SE);
not U55 (_net_38, RS);
and U56 (cond7, _net_38, D, SE);
and U57 (cond6, RS, D, SE);
and U58 (cond6, RS, D, SE);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$width(posedge CK &&& cond9 , 0 ,0, viol_0);
$width(negedge CK &&& cond9 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , posedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond1 , negedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , posedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , negedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond8 , negedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , posedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , negedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , posedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , negedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif   
endmodule
`endcelldefine

//%END SEH_FSDPC1BQ_DL50_2

//%BEGIN SEH_FSDPC1BQ_DL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPC1BQ_DL50_4 (Q, CK, D, SI, SE, RS, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPC1BQ_DL50_4 (Q, CK, D, SI, SE, RS, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RS, RS_org);
`endif

   and (int_res__D, delayed_D, delayed_RS);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);
   
   `ifdef VIRL_functiononly
      scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `else
      scl40_htc50_dff (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
not U0 (_net_0, RS);
not U1 (_net_1, SI);
and U2 (_net_2, _net_0, D, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RS, D, SE, _net_3);
not U5 (_net_5, RS);
not U6 (_net_6, SE);
and U7 (_net_7, _net_5, D, _net_6);
not U8 (_net_8, D);
not U9 (_net_9, SI);
and U10 (_net_10, SE, _net_8, _net_9);
not U11 (_net_11, SE);
not U12 (_net_12, D);
and U13 (_net_13, _net_11, _net_12);
or U14 (cond10, _net_2, _net_4, _net_7, _net_10, _net_13);
not U15 (_net_14, SE);
and U16 (_net_15, RS, D, _net_14);
and U17 (_net_16, RS, D, SE, SI);
not U18 (_net_17, RS);
and U19 (_net_18, _net_17, D, SE, SI);
not U20 (_net_19, D);
and U21 (_net_20, SE, _net_19, SI);
or U22 (cond9, _net_15, _net_16, _net_18, _net_20);
not U23 (_net_21, SE);
and U24 (cond0, _net_21, RS);
not U25 (_net_22, SE);
and U26 (cond0, _net_22, RS);
not U27 (_net_23, SE);
and U28 (cond1, _net_23, D);
not U29 (_net_24, SE);
and U30 (cond1, _net_24, D);
not U31 (_net_25, RS);
not U32 (_net_26, D);
and U33 (cond4, _net_25, _net_26, SI);
not U34 (_net_27, RS);
not U35 (_net_28, D);
and U36 (cond4, _net_27, _net_28, SI);
not U37 (_net_29, D);
and U38 (cond3, RS, _net_29, SI);
not U39 (_net_30, D);
and U40 (cond3, RS, _net_30, SI);
not U41 (_net_31, RS);
and U42 (cond2, _net_31, D, SI);
not U43 (_net_32, RS);
and U44 (cond2, _net_32, D, SI);
not U45 (_net_33, SI);
and U46 (cond5, RS, D, _net_33);
not U47 (_net_34, SI);
and U48 (cond5, RS, D, _net_34);
not U49 (_net_35, D);
and U50 (cond8, SE, _net_35);
not U51 (_net_36, D);
and U52 (cond8, SE, _net_36);
not U53 (_net_37, RS);
and U54 (cond7, _net_37, D, SE);
not U55 (_net_38, RS);
and U56 (cond7, _net_38, D, SE);
and U57 (cond6, RS, D, SE);
and U58 (cond6, RS, D, SE);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$width(posedge CK &&& cond9 , 0 ,0, viol_0);
$width(negedge CK &&& cond9 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , posedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond1 , negedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , posedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , negedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond8 , negedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , posedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , negedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , posedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , negedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif   
endmodule
`endcelldefine

//%END SEH_FSDPC1BQ_DL50_4

//%BEGIN SEH_FSDPC1BQ_V2L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPC1BQ_V2L50_1 (Q, CK, D, SI, SE, RS, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPC1BQ_V2L50_1 (Q, CK, D, SI, SE, RS, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RS, RS_org);
`endif

   and (int_res__D, delayed_D, delayed_RS);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);
   
   `ifdef VIRL_functiononly
      scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `else
      scl40_htc50_dff (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
not U0 (_net_0, RS);
not U1 (_net_1, SI);
and U2 (_net_2, _net_0, D, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RS, D, SE, _net_3);
not U5 (_net_5, RS);
not U6 (_net_6, SE);
and U7 (_net_7, _net_5, D, _net_6);
not U8 (_net_8, D);
not U9 (_net_9, SI);
and U10 (_net_10, SE, _net_8, _net_9);
not U11 (_net_11, SE);
not U12 (_net_12, D);
and U13 (_net_13, _net_11, _net_12);
or U14 (cond10, _net_2, _net_4, _net_7, _net_10, _net_13);
not U15 (_net_14, SE);
and U16 (_net_15, RS, D, _net_14);
and U17 (_net_16, RS, D, SE, SI);
not U18 (_net_17, RS);
and U19 (_net_18, _net_17, D, SE, SI);
not U20 (_net_19, D);
and U21 (_net_20, SE, _net_19, SI);
or U22 (cond9, _net_15, _net_16, _net_18, _net_20);
not U23 (_net_21, SE);
and U24 (cond0, _net_21, RS);
not U25 (_net_22, SE);
and U26 (cond0, _net_22, RS);
not U27 (_net_23, SE);
and U28 (cond1, _net_23, D);
not U29 (_net_24, SE);
and U30 (cond1, _net_24, D);
not U31 (_net_25, RS);
not U32 (_net_26, D);
and U33 (cond4, _net_25, _net_26, SI);
not U34 (_net_27, RS);
not U35 (_net_28, D);
and U36 (cond4, _net_27, _net_28, SI);
not U37 (_net_29, D);
and U38 (cond3, RS, _net_29, SI);
not U39 (_net_30, D);
and U40 (cond3, RS, _net_30, SI);
not U41 (_net_31, RS);
and U42 (cond2, _net_31, D, SI);
not U43 (_net_32, RS);
and U44 (cond2, _net_32, D, SI);
not U45 (_net_33, SI);
and U46 (cond5, RS, D, _net_33);
not U47 (_net_34, SI);
and U48 (cond5, RS, D, _net_34);
not U49 (_net_35, D);
and U50 (cond8, SE, _net_35);
not U51 (_net_36, D);
and U52 (cond8, SE, _net_36);
not U53 (_net_37, RS);
and U54 (cond7, _net_37, D, SE);
not U55 (_net_38, RS);
and U56 (cond7, _net_38, D, SE);
and U57 (cond6, RS, D, SE);
and U58 (cond6, RS, D, SE);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$width(posedge CK &&& cond9 , 0 ,0, viol_0);
$width(negedge CK &&& cond9 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , posedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond1 , negedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , posedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , negedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond8 , negedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , posedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , negedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , posedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , negedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif   
endmodule
`endcelldefine

//%END SEH_FSDPC1BQ_V2L50_1

//%BEGIN SEH_FSDPC1BQ_V2L50_1P5

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPC1BQ_V2L50_1P5 (Q, CK, D, SI, SE, RS, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPC1BQ_V2L50_1P5 (Q, CK, D, SI, SE, RS, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RS, RS_org);
`endif

   and (int_res__D, delayed_D, delayed_RS);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);
   
   `ifdef VIRL_functiononly
      scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `else
      scl40_htc50_dff (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
not U0 (_net_0, RS);
not U1 (_net_1, SI);
and U2 (_net_2, _net_0, D, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RS, D, SE, _net_3);
not U5 (_net_5, RS);
not U6 (_net_6, SE);
and U7 (_net_7, _net_5, D, _net_6);
not U8 (_net_8, D);
not U9 (_net_9, SI);
and U10 (_net_10, SE, _net_8, _net_9);
not U11 (_net_11, SE);
not U12 (_net_12, D);
and U13 (_net_13, _net_11, _net_12);
or U14 (cond10, _net_2, _net_4, _net_7, _net_10, _net_13);
not U15 (_net_14, SE);
and U16 (_net_15, RS, D, _net_14);
and U17 (_net_16, RS, D, SE, SI);
not U18 (_net_17, RS);
and U19 (_net_18, _net_17, D, SE, SI);
not U20 (_net_19, D);
and U21 (_net_20, SE, _net_19, SI);
or U22 (cond9, _net_15, _net_16, _net_18, _net_20);
not U23 (_net_21, SE);
and U24 (cond0, _net_21, RS);
not U25 (_net_22, SE);
and U26 (cond0, _net_22, RS);
not U27 (_net_23, SE);
and U28 (cond1, _net_23, D);
not U29 (_net_24, SE);
and U30 (cond1, _net_24, D);
not U31 (_net_25, RS);
not U32 (_net_26, D);
and U33 (cond4, _net_25, _net_26, SI);
not U34 (_net_27, RS);
not U35 (_net_28, D);
and U36 (cond4, _net_27, _net_28, SI);
not U37 (_net_29, D);
and U38 (cond3, RS, _net_29, SI);
not U39 (_net_30, D);
and U40 (cond3, RS, _net_30, SI);
not U41 (_net_31, RS);
and U42 (cond2, _net_31, D, SI);
not U43 (_net_32, RS);
and U44 (cond2, _net_32, D, SI);
not U45 (_net_33, SI);
and U46 (cond5, RS, D, _net_33);
not U47 (_net_34, SI);
and U48 (cond5, RS, D, _net_34);
not U49 (_net_35, D);
and U50 (cond8, SE, _net_35);
not U51 (_net_36, D);
and U52 (cond8, SE, _net_36);
not U53 (_net_37, RS);
and U54 (cond7, _net_37, D, SE);
not U55 (_net_38, RS);
and U56 (cond7, _net_38, D, SE);
and U57 (cond6, RS, D, SE);
and U58 (cond6, RS, D, SE);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$width(posedge CK &&& cond9 , 0 ,0, viol_0);
$width(negedge CK &&& cond9 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , posedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond1 , negedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , posedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , negedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond8 , negedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , posedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , negedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , posedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , negedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif   
endmodule
`endcelldefine

//%END SEH_FSDPC1BQ_V2L50_1P5

//%BEGIN SEH_FSDPC1BQ_V2L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPC1BQ_V2L50_2 (Q, CK, D, SI, SE, RS, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPC1BQ_V2L50_2 (Q, CK, D, SI, SE, RS, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RS, RS_org);
`endif

   and (int_res__D, delayed_D, delayed_RS);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);
   
   `ifdef VIRL_functiononly
      scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `else
      scl40_htc50_dff (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
not U0 (_net_0, RS);
not U1 (_net_1, SI);
and U2 (_net_2, _net_0, D, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RS, D, SE, _net_3);
not U5 (_net_5, RS);
not U6 (_net_6, SE);
and U7 (_net_7, _net_5, D, _net_6);
not U8 (_net_8, D);
not U9 (_net_9, SI);
and U10 (_net_10, SE, _net_8, _net_9);
not U11 (_net_11, SE);
not U12 (_net_12, D);
and U13 (_net_13, _net_11, _net_12);
or U14 (cond10, _net_2, _net_4, _net_7, _net_10, _net_13);
not U15 (_net_14, SE);
and U16 (_net_15, RS, D, _net_14);
and U17 (_net_16, RS, D, SE, SI);
not U18 (_net_17, RS);
and U19 (_net_18, _net_17, D, SE, SI);
not U20 (_net_19, D);
and U21 (_net_20, SE, _net_19, SI);
or U22 (cond9, _net_15, _net_16, _net_18, _net_20);
not U23 (_net_21, SE);
and U24 (cond0, _net_21, RS);
not U25 (_net_22, SE);
and U26 (cond0, _net_22, RS);
not U27 (_net_23, SE);
and U28 (cond1, _net_23, D);
not U29 (_net_24, SE);
and U30 (cond1, _net_24, D);
not U31 (_net_25, RS);
not U32 (_net_26, D);
and U33 (cond4, _net_25, _net_26, SI);
not U34 (_net_27, RS);
not U35 (_net_28, D);
and U36 (cond4, _net_27, _net_28, SI);
not U37 (_net_29, D);
and U38 (cond3, RS, _net_29, SI);
not U39 (_net_30, D);
and U40 (cond3, RS, _net_30, SI);
not U41 (_net_31, RS);
and U42 (cond2, _net_31, D, SI);
not U43 (_net_32, RS);
and U44 (cond2, _net_32, D, SI);
not U45 (_net_33, SI);
and U46 (cond5, RS, D, _net_33);
not U47 (_net_34, SI);
and U48 (cond5, RS, D, _net_34);
not U49 (_net_35, D);
and U50 (cond8, SE, _net_35);
not U51 (_net_36, D);
and U52 (cond8, SE, _net_36);
not U53 (_net_37, RS);
and U54 (cond7, _net_37, D, SE);
not U55 (_net_38, RS);
and U56 (cond7, _net_38, D, SE);
and U57 (cond6, RS, D, SE);
and U58 (cond6, RS, D, SE);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$width(posedge CK &&& cond9 , 0 ,0, viol_0);
$width(negedge CK &&& cond9 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , posedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond1 , negedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , posedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , negedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond8 , negedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , posedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , negedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , posedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , negedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif   
endmodule
`endcelldefine

//%END SEH_FSDPC1BQ_V2L50_2

//%BEGIN SEH_FSDPC1BQ_V2L50_3

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPC1BQ_V2L50_3 (Q, CK, D, SI, SE, RS, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPC1BQ_V2L50_3 (Q, CK, D, SI, SE, RS, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RS, RS_org);
`endif

   and (int_res__D, delayed_D, delayed_RS);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);
   
   `ifdef VIRL_functiononly
      scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `else
      scl40_htc50_dff (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
not U0 (_net_0, RS);
not U1 (_net_1, SI);
and U2 (_net_2, _net_0, D, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RS, D, SE, _net_3);
not U5 (_net_5, RS);
not U6 (_net_6, SE);
and U7 (_net_7, _net_5, D, _net_6);
not U8 (_net_8, D);
not U9 (_net_9, SI);
and U10 (_net_10, SE, _net_8, _net_9);
not U11 (_net_11, SE);
not U12 (_net_12, D);
and U13 (_net_13, _net_11, _net_12);
or U14 (cond10, _net_2, _net_4, _net_7, _net_10, _net_13);
not U15 (_net_14, SE);
and U16 (_net_15, RS, D, _net_14);
and U17 (_net_16, RS, D, SE, SI);
not U18 (_net_17, RS);
and U19 (_net_18, _net_17, D, SE, SI);
not U20 (_net_19, D);
and U21 (_net_20, SE, _net_19, SI);
or U22 (cond9, _net_15, _net_16, _net_18, _net_20);
not U23 (_net_21, SE);
and U24 (cond0, _net_21, RS);
not U25 (_net_22, SE);
and U26 (cond0, _net_22, RS);
not U27 (_net_23, SE);
and U28 (cond1, _net_23, D);
not U29 (_net_24, SE);
and U30 (cond1, _net_24, D);
not U31 (_net_25, RS);
not U32 (_net_26, D);
and U33 (cond4, _net_25, _net_26, SI);
not U34 (_net_27, RS);
not U35 (_net_28, D);
and U36 (cond4, _net_27, _net_28, SI);
not U37 (_net_29, D);
and U38 (cond3, RS, _net_29, SI);
not U39 (_net_30, D);
and U40 (cond3, RS, _net_30, SI);
not U41 (_net_31, RS);
and U42 (cond2, _net_31, D, SI);
not U43 (_net_32, RS);
and U44 (cond2, _net_32, D, SI);
not U45 (_net_33, SI);
and U46 (cond5, RS, D, _net_33);
not U47 (_net_34, SI);
and U48 (cond5, RS, D, _net_34);
not U49 (_net_35, D);
and U50 (cond8, SE, _net_35);
not U51 (_net_36, D);
and U52 (cond8, SE, _net_36);
not U53 (_net_37, RS);
and U54 (cond7, _net_37, D, SE);
not U55 (_net_38, RS);
and U56 (cond7, _net_38, D, SE);
and U57 (cond6, RS, D, SE);
and U58 (cond6, RS, D, SE);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$width(posedge CK &&& cond9 , 0 ,0, viol_0);
$width(negedge CK &&& cond9 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , posedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond1 , negedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , posedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , negedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond8 , negedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , posedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , negedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , posedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , negedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif   
endmodule
`endcelldefine

//%END SEH_FSDPC1BQ_V2L50_3

//%BEGIN SEH_FSDPC1BQ_V2L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPC1BQ_V2L50_4 (Q, CK, D, SI, SE, RS, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPC1BQ_V2L50_4 (Q, CK, D, SI, SE, RS, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RS, RS_org);
`endif

   and (int_res__D, delayed_D, delayed_RS);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);
   
   `ifdef VIRL_functiononly
      scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `else
      scl40_htc50_dff (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
not U0 (_net_0, RS);
not U1 (_net_1, SI);
and U2 (_net_2, _net_0, D, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RS, D, SE, _net_3);
not U5 (_net_5, RS);
not U6 (_net_6, SE);
and U7 (_net_7, _net_5, D, _net_6);
not U8 (_net_8, D);
not U9 (_net_9, SI);
and U10 (_net_10, SE, _net_8, _net_9);
not U11 (_net_11, SE);
not U12 (_net_12, D);
and U13 (_net_13, _net_11, _net_12);
or U14 (cond10, _net_2, _net_4, _net_7, _net_10, _net_13);
not U15 (_net_14, SE);
and U16 (_net_15, RS, D, _net_14);
and U17 (_net_16, RS, D, SE, SI);
not U18 (_net_17, RS);
and U19 (_net_18, _net_17, D, SE, SI);
not U20 (_net_19, D);
and U21 (_net_20, SE, _net_19, SI);
or U22 (cond9, _net_15, _net_16, _net_18, _net_20);
not U23 (_net_21, SE);
and U24 (cond0, _net_21, RS);
not U25 (_net_22, SE);
and U26 (cond0, _net_22, RS);
not U27 (_net_23, SE);
and U28 (cond1, _net_23, D);
not U29 (_net_24, SE);
and U30 (cond1, _net_24, D);
not U31 (_net_25, RS);
not U32 (_net_26, D);
and U33 (cond4, _net_25, _net_26, SI);
not U34 (_net_27, RS);
not U35 (_net_28, D);
and U36 (cond4, _net_27, _net_28, SI);
not U37 (_net_29, D);
and U38 (cond3, RS, _net_29, SI);
not U39 (_net_30, D);
and U40 (cond3, RS, _net_30, SI);
not U41 (_net_31, RS);
and U42 (cond2, _net_31, D, SI);
not U43 (_net_32, RS);
and U44 (cond2, _net_32, D, SI);
not U45 (_net_33, SI);
and U46 (cond5, RS, D, _net_33);
not U47 (_net_34, SI);
and U48 (cond5, RS, D, _net_34);
not U49 (_net_35, D);
and U50 (cond8, SE, _net_35);
not U51 (_net_36, D);
and U52 (cond8, SE, _net_36);
not U53 (_net_37, RS);
and U54 (cond7, _net_37, D, SE);
not U55 (_net_38, RS);
and U56 (cond7, _net_38, D, SE);
and U57 (cond6, RS, D, SE);
and U58 (cond6, RS, D, SE);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$width(posedge CK &&& cond9 , 0 ,0, viol_0);
$width(negedge CK &&& cond9 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , posedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond1 , negedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , posedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , negedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond8 , negedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , posedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , negedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , posedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , negedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif   
endmodule
`endcelldefine

//%END SEH_FSDPC1BQ_V2L50_4

//%BEGIN SEH_FSDPC1BQO_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPC1BQO_L50_1 (Q, SO, CK, D, SI, SE, RS, VDD, VSS, VBP, VBN);
   output Q,  SO;
   input CK, D, SI, SE, RS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPC1BQO_L50_1 (Q, SO, CK, D, SI, SE, RS, VDD, VSS);
   output Q,  SO;
   input CK, D, SI, SE, RS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RS, RS_org);
`endif

   and (int_res__D, delayed_D, delayed_RS);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res_mux, xcr_0);

   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
        buf #1 (SO, int_res_iq);
   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
not U0 (_net_0, RS);
not U1 (_net_1, SI);
and U2 (_net_2, _net_0, D, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RS, D, SE, _net_3);
not U5 (_net_5, RS);
not U6 (_net_6, SE);
and U7 (_net_7, _net_5, D, _net_6);
not U8 (_net_8, D);
not U9 (_net_9, SI);
and U10 (_net_10, SE, _net_8, _net_9);
not U11 (_net_11, SE);
not U12 (_net_12, D);
and U13 (_net_13, _net_11, _net_12);
or U14 (cond11, _net_2, _net_4, _net_7, _net_10, _net_13);
not U15 (_net_14, SE);
and U16 (_net_15, RS, D, _net_14);
and U17 (_net_16, RS, D, SE, SI);
not U18 (_net_17, RS);
and U19 (_net_18, _net_17, D, SE, SI);
not U20 (_net_19, D);
and U21 (_net_20, SE, _net_19, SI);
or U22 (cond10, _net_15, _net_16, _net_18, _net_20);
not U23 (_net_21, SE);
and U24 (cond0, _net_21, RS);
not U25 (_net_22, SE);
and U26 (cond0, _net_22, RS);
not U27 (_net_23, SE);
and U28 (cond1, _net_23, D);
not U29 (_net_24, SE);
and U30 (cond1, _net_24, D);
not U31 (_net_25, RS);
not U32 (_net_26, D);
and U33 (cond4, _net_25, _net_26, SI);
not U34 (_net_27, RS);
not U35 (_net_28, D);
and U36 (cond4, _net_27, _net_28, SI);
not U37 (_net_29, D);
and U38 (cond3, RS, _net_29, SI);
not U39 (_net_30, D);
and U40 (cond3, RS, _net_30, SI);
not U41 (_net_31, RS);
and U42 (cond2, _net_31, D, SI);
not U43 (_net_32, RS);
and U44 (cond2, _net_32, D, SI);
not U45 (_net_33, SI);
and U46 (cond5, RS, D, _net_33);
not U47 (_net_34, SI);
and U48 (cond5, RS, D, _net_34);
not U49 (_net_35, RS);
not U50 (_net_36, D);
and U51 (cond9, _net_35, _net_36, SE);
not U52 (_net_37, RS);
not U53 (_net_38, D);
and U54 (cond9, _net_37, _net_38, SE);
not U55 (_net_39, D);
and U56 (cond8, RS, _net_39, SE);
not U57 (_net_40, D);
and U58 (cond8, RS, _net_40, SE);
not U59 (_net_41, RS);
and U60 (cond7, _net_41, D, SE);
not U61 (_net_42, RS);
and U62 (cond7, _net_42, D, SE);
and U63 (cond6, RS, D, SE);
and U64 (cond6, RS, D, SE);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , posedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond1 , negedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , posedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , negedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond9 , posedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , negedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond8 , posedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond8 , negedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , posedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , negedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , posedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , negedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_FSDPC1BQO_L50_1

//%BEGIN SEH_FSDPC1BQO_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPC1BQO_L50_2 (Q, SO, CK, D, SI, SE, RS, VDD, VSS, VBP, VBN);
   output Q,  SO;
   input CK, D, SI, SE, RS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPC1BQO_L50_2 (Q, SO, CK, D, SI, SE, RS, VDD, VSS);
   output Q,  SO;
   input CK, D, SI, SE, RS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RS, RS_org);
`endif

   and (int_res__D, delayed_D, delayed_RS);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res_mux, xcr_0);

   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
        buf #1 (SO, int_res_iq);
   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
not U0 (_net_0, RS);
not U1 (_net_1, SI);
and U2 (_net_2, _net_0, D, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RS, D, SE, _net_3);
not U5 (_net_5, RS);
not U6 (_net_6, SE);
and U7 (_net_7, _net_5, D, _net_6);
not U8 (_net_8, D);
not U9 (_net_9, SI);
and U10 (_net_10, SE, _net_8, _net_9);
not U11 (_net_11, SE);
not U12 (_net_12, D);
and U13 (_net_13, _net_11, _net_12);
or U14 (cond11, _net_2, _net_4, _net_7, _net_10, _net_13);
not U15 (_net_14, SE);
and U16 (_net_15, RS, D, _net_14);
and U17 (_net_16, RS, D, SE, SI);
not U18 (_net_17, RS);
and U19 (_net_18, _net_17, D, SE, SI);
not U20 (_net_19, D);
and U21 (_net_20, SE, _net_19, SI);
or U22 (cond10, _net_15, _net_16, _net_18, _net_20);
not U23 (_net_21, SE);
and U24 (cond0, _net_21, RS);
not U25 (_net_22, SE);
and U26 (cond0, _net_22, RS);
not U27 (_net_23, SE);
and U28 (cond1, _net_23, D);
not U29 (_net_24, SE);
and U30 (cond1, _net_24, D);
not U31 (_net_25, RS);
not U32 (_net_26, D);
and U33 (cond4, _net_25, _net_26, SI);
not U34 (_net_27, RS);
not U35 (_net_28, D);
and U36 (cond4, _net_27, _net_28, SI);
not U37 (_net_29, D);
and U38 (cond3, RS, _net_29, SI);
not U39 (_net_30, D);
and U40 (cond3, RS, _net_30, SI);
not U41 (_net_31, RS);
and U42 (cond2, _net_31, D, SI);
not U43 (_net_32, RS);
and U44 (cond2, _net_32, D, SI);
not U45 (_net_33, SI);
and U46 (cond5, RS, D, _net_33);
not U47 (_net_34, SI);
and U48 (cond5, RS, D, _net_34);
not U49 (_net_35, RS);
not U50 (_net_36, D);
and U51 (cond9, _net_35, _net_36, SE);
not U52 (_net_37, RS);
not U53 (_net_38, D);
and U54 (cond9, _net_37, _net_38, SE);
not U55 (_net_39, D);
and U56 (cond8, RS, _net_39, SE);
not U57 (_net_40, D);
and U58 (cond8, RS, _net_40, SE);
not U59 (_net_41, RS);
and U60 (cond7, _net_41, D, SE);
not U61 (_net_42, RS);
and U62 (cond7, _net_42, D, SE);
and U63 (cond6, RS, D, SE);
and U64 (cond6, RS, D, SE);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , posedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond1 , negedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , posedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , negedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond9 , posedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , negedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond8 , posedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond8 , negedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , posedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , negedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , posedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , negedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_FSDPC1BQO_L50_2

//%BEGIN SEH_FSDPC1BQO_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPC1BQO_L50_4 (Q, SO, CK, D, SI, SE, RS, VDD, VSS, VBP, VBN);
   output Q,  SO;
   input CK, D, SI, SE, RS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPC1BQO_L50_4 (Q, SO, CK, D, SI, SE, RS, VDD, VSS);
   output Q,  SO;
   input CK, D, SI, SE, RS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RS;

   wire int_res__D, int_res__RS, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RS_org, RS, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RS, RS_org);
`endif

   and (int_res__D, delayed_D, delayed_RS);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res_mux, xcr_0);

   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
        buf #1 (SO, int_res_iq);
   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
not U0 (_net_0, RS);
not U1 (_net_1, SI);
and U2 (_net_2, _net_0, D, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RS, D, SE, _net_3);
not U5 (_net_5, RS);
not U6 (_net_6, SE);
and U7 (_net_7, _net_5, D, _net_6);
not U8 (_net_8, D);
not U9 (_net_9, SI);
and U10 (_net_10, SE, _net_8, _net_9);
not U11 (_net_11, SE);
not U12 (_net_12, D);
and U13 (_net_13, _net_11, _net_12);
or U14 (cond11, _net_2, _net_4, _net_7, _net_10, _net_13);
not U15 (_net_14, SE);
and U16 (_net_15, RS, D, _net_14);
and U17 (_net_16, RS, D, SE, SI);
not U18 (_net_17, RS);
and U19 (_net_18, _net_17, D, SE, SI);
not U20 (_net_19, D);
and U21 (_net_20, SE, _net_19, SI);
or U22 (cond10, _net_15, _net_16, _net_18, _net_20);
not U23 (_net_21, SE);
and U24 (cond0, _net_21, RS);
not U25 (_net_22, SE);
and U26 (cond0, _net_22, RS);
not U27 (_net_23, SE);
and U28 (cond1, _net_23, D);
not U29 (_net_24, SE);
and U30 (cond1, _net_24, D);
not U31 (_net_25, RS);
not U32 (_net_26, D);
and U33 (cond4, _net_25, _net_26, SI);
not U34 (_net_27, RS);
not U35 (_net_28, D);
and U36 (cond4, _net_27, _net_28, SI);
not U37 (_net_29, D);
and U38 (cond3, RS, _net_29, SI);
not U39 (_net_30, D);
and U40 (cond3, RS, _net_30, SI);
not U41 (_net_31, RS);
and U42 (cond2, _net_31, D, SI);
not U43 (_net_32, RS);
and U44 (cond2, _net_32, D, SI);
not U45 (_net_33, SI);
and U46 (cond5, RS, D, _net_33);
not U47 (_net_34, SI);
and U48 (cond5, RS, D, _net_34);
not U49 (_net_35, RS);
not U50 (_net_36, D);
and U51 (cond9, _net_35, _net_36, SE);
not U52 (_net_37, RS);
not U53 (_net_38, D);
and U54 (cond9, _net_37, _net_38, SE);
not U55 (_net_39, D);
and U56 (cond8, RS, _net_39, SE);
not U57 (_net_40, D);
and U58 (cond8, RS, _net_40, SE);
not U59 (_net_41, RS);
and U60 (cond7, _net_41, D, SE);
not U61 (_net_42, RS);
and U62 (cond7, _net_42, D, SE);
and U63 (cond6, RS, D, SE);
and U64 (cond6, RS, D, SE);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , posedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond1 , negedge RS &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_RS);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , posedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , negedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond9 , posedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , negedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond8 , posedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond8 , negedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , posedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , negedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , posedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , negedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_FSDPC1BQO_L50_4

//%BEGIN SEH_FSDPHQ_DL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPHQ_DL50_1 (Q, CK, D, SI, SE, EN, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, EN, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_EN;

   wire int_res__D, int_res__S, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPHQ_DL50_1 (Q, CK, D, SI, SE, EN, VDD, VSS);
   output Q;
   input CK, D, SI, SE, EN, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_EN;

   wire int_res__D, int_res__S, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_EN, EN_org);
`endif

   scl40_htc50_mux2 (int_res__D, int_res_iq, delayed_D, delayed_EN);
   scl40_htc50_mux2 (int_res__S, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__S);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__S, xcr_0);
   

   `ifdef VIRL_functiononly
       buf #1 (Q, int_res_iq);
   `else
       buf (Q, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
not U0 (_net_0, EN);
not U1 (_net_1, D);
not U2 (_net_2, SE);
and U3 (cond20, _net_0, _net_1, _net_2);
not U4 (_net_3, D);
not U5 (_net_4, SI);
and U6 (cond19, EN, _net_3, SE, _net_4);
not U7 (_net_5, D);
and U8 (cond16, EN, _net_5, SE, SI);
not U9 (_net_6, EN);
not U10 (_net_7, SI);
and U11 (cond18, SE, _net_6, _net_7);
not U12 (_net_8, EN);
and U13 (cond14, SE, _net_8, SI);
not U14 (_net_9, EN);
not U15 (_net_10, SE);
and U16 (cond15, _net_9, D, _net_10);
not U17 (_net_11, SI);
and U18 (cond17, EN, D, SE, _net_11);
and U19 (cond13, EN, D, SE, SI);
not U20 (_net_12, SE);
not U21 (_net_13, EN);
and U22 (cond0, _net_12, _net_13);
not U23 (_net_14, SE);
not U24 (_net_15, EN);
and U25 (cond0, _net_14, _net_15);
not U26 (_net_16, SE);
not U27 (_net_17, D);
and U28 (cond2, _net_16, _net_17);
not U29 (_net_18, SE);
not U30 (_net_19, D);
and U31 (cond2, _net_18, _net_19);
not U32 (_net_20, SE);
and U33 (cond1, _net_20, D);
not U34 (_net_21, SE);
and U35 (cond1, _net_21, D);
not U36 (_net_22, EN);
not U37 (_net_23, D);
and U38 (cond5, _net_22, _net_23, SI);
not U39 (_net_24, EN);
not U40 (_net_25, D);
and U41 (cond5, _net_24, _net_25, SI);
not U42 (_net_26, D);
not U43 (_net_27, SI);
and U44 (cond8, EN, _net_26, _net_27);
not U45 (_net_28, D);
not U46 (_net_29, SI);
and U47 (cond8, EN, _net_28, _net_29);
not U48 (_net_30, D);
and U49 (cond4, EN, _net_30, SI);
not U50 (_net_31, D);
and U51 (cond4, EN, _net_31, SI);
not U52 (_net_32, EN);
not U53 (_net_33, SI);
and U54 (cond7, _net_32, D, _net_33);
not U55 (_net_34, EN);
not U56 (_net_35, SI);
and U57 (cond7, _net_34, D, _net_35);
not U58 (_net_36, SI);
and U59 (cond6, EN, D, _net_36);
not U60 (_net_37, SI);
and U61 (cond6, EN, D, _net_37);
and U62 (cond3, EN, D, SI);
and U63 (cond3, EN, D, SI);
not U64 (_net_38, EN);
not U65 (_net_39, D);
and U66 (cond12, _net_38, _net_39, SE);
not U67 (_net_40, EN);
not U68 (_net_41, D);
and U69 (cond12, _net_40, _net_41, SE);
not U70 (_net_42, D);
and U71 (cond11, EN, _net_42, SE);
not U72 (_net_43, D);
and U73 (cond11, EN, _net_43, SE);
not U74 (_net_44, EN);
and U75 (cond10, _net_44, D, SE);
not U76 (_net_45, EN);
and U77 (cond10, _net_45, D, SE);
and U78 (cond9, EN, D, SE);
and U79 (cond9, EN, D, SE);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond20 , 0 ,0, viol_0);
$width(negedge CK &&& cond20 , 0 ,0, viol_0);
$width(posedge CK &&& cond19 , 0 ,0, viol_0);
$width(negedge CK &&& cond19 , 0 ,0, viol_0);
$width(posedge CK &&& cond16 , 0 ,0, viol_0);
$width(negedge CK &&& cond16 , 0 ,0, viol_0);
$width(posedge CK &&& cond18 , 0 ,0, viol_0);
$width(negedge CK &&& cond18 , 0 ,0, viol_0);
$width(posedge CK &&& cond14 , 0 ,0, viol_0);
$width(negedge CK &&& cond14 , 0 ,0, viol_0);
$width(posedge CK &&& cond15 , 0 ,0, viol_0);
$width(negedge CK &&& cond15 , 0 ,0, viol_0);
$width(posedge CK &&& cond17 , 0 ,0, viol_0);
$width(negedge CK &&& cond17 , 0 ,0, viol_0);
$width(posedge CK &&& cond13 , 0 ,0, viol_0);
$width(negedge CK &&& cond13 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond2 , posedge EN &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond2 , negedge EN &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond1 , posedge EN &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond1 , negedge EN &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond5 , posedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , negedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , negedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , posedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , negedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , posedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , negedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , posedge SI &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond12 , negedge SI &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond11 , posedge SI &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond11 , negedge SI &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond10 , posedge SI &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond10 , negedge SI &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , posedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , negedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_FSDPHQ_DL50_1

//%BEGIN SEH_FSDPHQ_DL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPHQ_DL50_2 (Q, CK, D, SI, SE, EN, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, EN, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_EN;

   wire int_res__D, int_res__S, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPHQ_DL50_2 (Q, CK, D, SI, SE, EN, VDD, VSS);
   output Q;
   input CK, D, SI, SE, EN, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_EN;

   wire int_res__D, int_res__S, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_EN, EN_org);
`endif

   scl40_htc50_mux2 (int_res__D, int_res_iq, delayed_D, delayed_EN);
   scl40_htc50_mux2 (int_res__S, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__S);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__S, xcr_0);
   

   `ifdef VIRL_functiononly
       buf #1 (Q, int_res_iq);
   `else
       buf (Q, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
not U0 (_net_0, EN);
not U1 (_net_1, D);
not U2 (_net_2, SE);
and U3 (cond20, _net_0, _net_1, _net_2);
not U4 (_net_3, D);
not U5 (_net_4, SI);
and U6 (cond19, EN, _net_3, SE, _net_4);
not U7 (_net_5, D);
and U8 (cond16, EN, _net_5, SE, SI);
not U9 (_net_6, EN);
not U10 (_net_7, SI);
and U11 (cond18, SE, _net_6, _net_7);
not U12 (_net_8, EN);
and U13 (cond14, SE, _net_8, SI);
not U14 (_net_9, EN);
not U15 (_net_10, SE);
and U16 (cond15, _net_9, D, _net_10);
not U17 (_net_11, SI);
and U18 (cond17, EN, D, SE, _net_11);
and U19 (cond13, EN, D, SE, SI);
not U20 (_net_12, SE);
not U21 (_net_13, EN);
and U22 (cond0, _net_12, _net_13);
not U23 (_net_14, SE);
not U24 (_net_15, EN);
and U25 (cond0, _net_14, _net_15);
not U26 (_net_16, SE);
not U27 (_net_17, D);
and U28 (cond2, _net_16, _net_17);
not U29 (_net_18, SE);
not U30 (_net_19, D);
and U31 (cond2, _net_18, _net_19);
not U32 (_net_20, SE);
and U33 (cond1, _net_20, D);
not U34 (_net_21, SE);
and U35 (cond1, _net_21, D);
not U36 (_net_22, EN);
not U37 (_net_23, D);
and U38 (cond5, _net_22, _net_23, SI);
not U39 (_net_24, EN);
not U40 (_net_25, D);
and U41 (cond5, _net_24, _net_25, SI);
not U42 (_net_26, D);
not U43 (_net_27, SI);
and U44 (cond8, EN, _net_26, _net_27);
not U45 (_net_28, D);
not U46 (_net_29, SI);
and U47 (cond8, EN, _net_28, _net_29);
not U48 (_net_30, D);
and U49 (cond4, EN, _net_30, SI);
not U50 (_net_31, D);
and U51 (cond4, EN, _net_31, SI);
not U52 (_net_32, EN);
not U53 (_net_33, SI);
and U54 (cond7, _net_32, D, _net_33);
not U55 (_net_34, EN);
not U56 (_net_35, SI);
and U57 (cond7, _net_34, D, _net_35);
not U58 (_net_36, SI);
and U59 (cond6, EN, D, _net_36);
not U60 (_net_37, SI);
and U61 (cond6, EN, D, _net_37);
and U62 (cond3, EN, D, SI);
and U63 (cond3, EN, D, SI);
not U64 (_net_38, EN);
not U65 (_net_39, D);
and U66 (cond12, _net_38, _net_39, SE);
not U67 (_net_40, EN);
not U68 (_net_41, D);
and U69 (cond12, _net_40, _net_41, SE);
not U70 (_net_42, D);
and U71 (cond11, EN, _net_42, SE);
not U72 (_net_43, D);
and U73 (cond11, EN, _net_43, SE);
not U74 (_net_44, EN);
and U75 (cond10, _net_44, D, SE);
not U76 (_net_45, EN);
and U77 (cond10, _net_45, D, SE);
and U78 (cond9, EN, D, SE);
and U79 (cond9, EN, D, SE);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond20 , 0 ,0, viol_0);
$width(negedge CK &&& cond20 , 0 ,0, viol_0);
$width(posedge CK &&& cond19 , 0 ,0, viol_0);
$width(negedge CK &&& cond19 , 0 ,0, viol_0);
$width(posedge CK &&& cond16 , 0 ,0, viol_0);
$width(negedge CK &&& cond16 , 0 ,0, viol_0);
$width(posedge CK &&& cond18 , 0 ,0, viol_0);
$width(negedge CK &&& cond18 , 0 ,0, viol_0);
$width(posedge CK &&& cond14 , 0 ,0, viol_0);
$width(negedge CK &&& cond14 , 0 ,0, viol_0);
$width(posedge CK &&& cond15 , 0 ,0, viol_0);
$width(negedge CK &&& cond15 , 0 ,0, viol_0);
$width(posedge CK &&& cond17 , 0 ,0, viol_0);
$width(negedge CK &&& cond17 , 0 ,0, viol_0);
$width(posedge CK &&& cond13 , 0 ,0, viol_0);
$width(negedge CK &&& cond13 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond2 , posedge EN &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond2 , negedge EN &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond1 , posedge EN &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond1 , negedge EN &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond5 , posedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , negedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , negedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , posedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , negedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , posedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , negedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , posedge SI &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond12 , negedge SI &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond11 , posedge SI &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond11 , negedge SI &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond10 , posedge SI &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond10 , negedge SI &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , posedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , negedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_FSDPHQ_DL50_2

//%BEGIN SEH_FSDPHQO_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPHQO_L50_1 (Q, SO, CK, D, SI, SE, EN, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, EN, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_EN;

   wire int_res__D, int_res__S, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPHQO_L50_1 (Q, SO, CK, D, SI, SE, EN, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, EN, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_EN;

   wire int_res__D, int_res__S, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_EN, EN_org);
`endif

   scl40_htc50_mux2 (int_res__D, int_res_iq, delayed_D, delayed_EN);
   scl40_htc50_mux2 (int_res__S, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__S);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__S, xcr_0);


   `ifdef VIRL_functiononly
      buf #1 (Q, int_res_iq);
      buf #1 (SO, int_res_iq);
   `else
      buf (Q, int_res_iq);
      buf (SO, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
not U0 (_net_0, EN);
not U1 (_net_1, D);
not U2 (_net_2, SE);
and U3 (cond14, _net_0, _net_1, _net_2);
not U4 (_net_3, EN);
not U5 (_net_4, SE);
and U6 (cond12, _net_3, D, _net_4);
not U7 (_net_5, SI);
and U8 (cond13, _net_5, SE);
and U9 (cond11, SI, SE);
not U10 (_net_6, SE);
not U11 (_net_7, EN);
and U12 (cond0, _net_6, _net_7);
not U13 (_net_8, SE);
not U14 (_net_9, EN);
and U15 (cond0, _net_8, _net_9);
not U16 (_net_10, SE);
not U17 (_net_11, D);
and U18 (cond2, _net_10, _net_11);
not U19 (_net_12, SE);
not U20 (_net_13, D);
and U21 (cond2, _net_12, _net_13);
not U22 (_net_14, SE);
and U23 (cond1, _net_14, D);
not U24 (_net_15, SE);
and U25 (cond1, _net_15, D);
not U26 (_net_16, EN);
not U27 (_net_17, D);
and U28 (cond5, _net_16, _net_17, SI);
not U29 (_net_18, EN);
not U30 (_net_19, D);
and U31 (cond5, _net_18, _net_19, SI);
not U32 (_net_20, D);
not U33 (_net_21, SI);
and U34 (cond8, EN, _net_20, _net_21);
not U35 (_net_22, D);
not U36 (_net_23, SI);
and U37 (cond8, EN, _net_22, _net_23);
not U38 (_net_24, D);
and U39 (cond4, EN, _net_24, SI);
not U40 (_net_25, D);
and U41 (cond4, EN, _net_25, SI);
not U42 (_net_26, EN);
not U43 (_net_27, SI);
and U44 (cond7, _net_26, D, _net_27);
not U45 (_net_28, EN);
not U46 (_net_29, SI);
and U47 (cond7, _net_28, D, _net_29);
not U48 (_net_30, SI);
and U49 (cond6, EN, D, _net_30);
not U50 (_net_31, SI);
and U51 (cond6, EN, D, _net_31);
and U52 (cond3, EN, D, SI);
and U53 (cond3, EN, D, SI);
not U54 (_net_32, D);
and U55 (cond10, SE, _net_32);
not U56 (_net_33, D);
and U57 (cond10, SE, _net_33);
and U58 (cond9, SE, D);
and U59 (cond9, SE, D);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond14 , 0 ,0, viol_0);
$width(negedge CK &&& cond14 , 0 ,0, viol_0);
$width(posedge CK &&& cond12 , 0 ,0, viol_0);
$width(negedge CK &&& cond12 , 0 ,0, viol_0);
$width(posedge CK &&& cond13 , 0 ,0, viol_0);
$width(negedge CK &&& cond13 , 0 ,0, viol_0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond2 , posedge EN &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond2 , negedge EN &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond1 , posedge EN &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond1 , negedge EN &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond5 , posedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , negedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , negedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , posedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , negedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , posedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , negedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond10 , posedge SI &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond10 , negedge SI &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , posedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , negedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_FSDPHQO_L50_1

//%BEGIN SEH_FSDPHQO_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPHQO_L50_2 (Q, SO, CK, D, SI, SE, EN, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, EN, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_EN;

   wire int_res__D, int_res__S, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPHQO_L50_2 (Q, SO, CK, D, SI, SE, EN, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, EN, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_EN;

   wire int_res__D, int_res__S, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_EN, EN_org);
`endif

   scl40_htc50_mux2 (int_res__D, int_res_iq, delayed_D, delayed_EN);
   scl40_htc50_mux2 (int_res__S, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__S);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__S, xcr_0);


   `ifdef VIRL_functiononly
      buf #1 (Q, int_res_iq);
      buf #1 (SO, int_res_iq);
   `else
      buf (Q, int_res_iq);
      buf (SO, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
not U0 (_net_0, EN);
not U1 (_net_1, D);
not U2 (_net_2, SE);
and U3 (cond14, _net_0, _net_1, _net_2);
not U4 (_net_3, EN);
not U5 (_net_4, SE);
and U6 (cond12, _net_3, D, _net_4);
not U7 (_net_5, SI);
and U8 (cond13, _net_5, SE);
and U9 (cond11, SI, SE);
not U10 (_net_6, SE);
not U11 (_net_7, EN);
and U12 (cond0, _net_6, _net_7);
not U13 (_net_8, SE);
not U14 (_net_9, EN);
and U15 (cond0, _net_8, _net_9);
not U16 (_net_10, SE);
not U17 (_net_11, D);
and U18 (cond2, _net_10, _net_11);
not U19 (_net_12, SE);
not U20 (_net_13, D);
and U21 (cond2, _net_12, _net_13);
not U22 (_net_14, SE);
and U23 (cond1, _net_14, D);
not U24 (_net_15, SE);
and U25 (cond1, _net_15, D);
not U26 (_net_16, EN);
not U27 (_net_17, D);
and U28 (cond5, _net_16, _net_17, SI);
not U29 (_net_18, EN);
not U30 (_net_19, D);
and U31 (cond5, _net_18, _net_19, SI);
not U32 (_net_20, D);
not U33 (_net_21, SI);
and U34 (cond8, EN, _net_20, _net_21);
not U35 (_net_22, D);
not U36 (_net_23, SI);
and U37 (cond8, EN, _net_22, _net_23);
not U38 (_net_24, D);
and U39 (cond4, EN, _net_24, SI);
not U40 (_net_25, D);
and U41 (cond4, EN, _net_25, SI);
not U42 (_net_26, EN);
not U43 (_net_27, SI);
and U44 (cond7, _net_26, D, _net_27);
not U45 (_net_28, EN);
not U46 (_net_29, SI);
and U47 (cond7, _net_28, D, _net_29);
not U48 (_net_30, SI);
and U49 (cond6, EN, D, _net_30);
not U50 (_net_31, SI);
and U51 (cond6, EN, D, _net_31);
and U52 (cond3, EN, D, SI);
and U53 (cond3, EN, D, SI);
not U54 (_net_32, D);
and U55 (cond10, SE, _net_32);
not U56 (_net_33, D);
and U57 (cond10, SE, _net_33);
and U58 (cond9, SE, D);
and U59 (cond9, SE, D);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond14 , 0 ,0, viol_0);
$width(negedge CK &&& cond14 , 0 ,0, viol_0);
$width(posedge CK &&& cond12 , 0 ,0, viol_0);
$width(negedge CK &&& cond12 , 0 ,0, viol_0);
$width(posedge CK &&& cond13 , 0 ,0, viol_0);
$width(negedge CK &&& cond13 , 0 ,0, viol_0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond2 , posedge EN &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond2 , negedge EN &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond1 , posedge EN &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond1 , negedge EN &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond5 , posedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , negedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , negedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , posedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , negedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , posedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , negedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond10 , posedge SI &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond10 , negedge SI &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , posedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , negedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_FSDPHQO_L50_2

//%BEGIN SEH_FSDPHRBSBQ_DL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPHRBSBQ_DL50_1 (Q, CK, D, SI, SE, EN, RD, SD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, EN, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_EN, delayed_RD,
        delayed_SD;
   wire int_res__D, int_res__S, int_res__RD, int_res__SD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPHRBSBQ_DL50_1 (Q, CK, D, SI, SE, EN, RD, SD, VDD, VSS);
   output Q;
   input CK, D, SI, SE, EN, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_EN, delayed_RD,
        delayed_SD;
   wire int_res__D, int_res__S, int_res__RD, int_res__SD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_EN, EN_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif

   scl40_htc50_mux2 (int_res__D, int_res_iq, delayed_D, delayed_EN);
   scl40_htc50_mux2 (int_res__S, delayed_SI, int_res__D, delayed_SE);
   not (int_res__RD, delayed_RD);
   not (int_res__SD, delayed_SD);
   scl40_htc50_dff_sr_err (xcr_0, delayed_CK, int_res__S, int_res__SD, int_res__RD);
   scl40_htc50_dff_sr_0 (int_res_iq, viol_0, delayed_CK, int_res__S, int_res__SD, int_res__RD, xcr_0);

   `ifdef VIRL_functiononly
       buf #1 (Q, int_res_iq);
   `else
       buf (Q, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
not U0 (_net_0, EN);
not U1 (_net_1, D);
not U2 (_net_2, SE);
and U3 (cond78, _net_0, _net_1, RD, SD, _net_2);
not U4 (_net_3, D);
not U5 (_net_4, SI);
and U6 (cond77, EN, _net_3, RD, SD, SE, _net_4);
not U7 (_net_5, D);
and U8 (cond74, EN, _net_5, RD, SD, SE, SI);
not U9 (_net_6, EN);
not U10 (_net_7, SI);
and U11 (cond76, RD, _net_6, SD, SE, _net_7);
not U12 (_net_8, EN);
and U13 (cond72, RD, _net_8, SD, SE, SI);
not U14 (_net_9, EN);
not U15 (_net_10, SE);
and U16 (cond73, _net_9, D, RD, SD, _net_10);
not U17 (_net_11, SI);
and U18 (cond75, EN, D, RD, SD, SE, _net_11);
and U19 (cond71, EN, D, RD, SD, SE, SI);
not U20 (_net_12, EN);
not U21 (_net_13, SE);
and U22 (cond0, RD, _net_12, SD, _net_13);
not U23 (_net_14, EN);
not U24 (_net_15, SE);
and U25 (cond0, RD, _net_14, SD, _net_15);
not U26 (_net_16, D);
not U27 (_net_17, SE);
and U28 (cond2, RD, _net_16, SD, _net_17);
not U29 (_net_18, D);
not U30 (_net_19, SE);
and U31 (cond2, RD, _net_18, SD, _net_19);
not U32 (_net_20, SE);
and U33 (cond1, RD, D, SD, _net_20);
not U34 (_net_21, SE);
and U35 (cond1, RD, D, SD, _net_21);
not U36 (_net_22, D);
not U37 (_net_23, CK);
not U38 (_net_24, EN);
not U39 (_net_25, SE);
and U40 (cond34, _net_22, _net_23, _net_24, SD, _net_25);
not U41 (_net_26, D);
not U42 (_net_27, CK);
not U43 (_net_28, SE);
and U44 (cond33, _net_26, _net_27, EN, SD, _net_28);
not U45 (_net_29, D);
not U46 (_net_30, CK);
not U47 (_net_31, SI);
and U48 (cond32, _net_29, _net_30, EN, SD, SE, _net_31);
not U49 (_net_32, D);
not U50 (_net_33, CK);
and U51 (cond31, _net_32, _net_33, EN, SD, SE, SI);
not U52 (_net_34, EN);
not U53 (_net_35, CK);
not U54 (_net_36, SI);
and U55 (cond29, _net_34, _net_35, SD, SE, _net_36);
not U56 (_net_37, EN);
not U57 (_net_38, CK);
and U58 (cond28, _net_37, _net_38, SD, SE, SI);
not U59 (_net_39, CK);
not U60 (_net_40, EN);
not U61 (_net_41, SE);
and U62 (cond30, D, _net_39, _net_40, SD, _net_41);
not U63 (_net_42, CK);
not U64 (_net_43, SE);
and U65 (cond27, D, _net_42, EN, SD, _net_43);
not U66 (_net_44, CK);
not U67 (_net_45, SI);
and U68 (cond26, D, _net_44, EN, SD, SE, _net_45);
not U69 (_net_46, CK);
and U70 (cond25, D, _net_46, EN, SD, SE, SI);
not U71 (_net_47, D);
not U72 (_net_48, CK);
not U73 (_net_49, SI);
and U74 (_net_50, _net_47, _net_48, EN, SE, _net_49);
not U75 (_net_51, CK);
not U76 (_net_52, SI);
and U77 (_net_53, D, _net_51, SE, _net_52);
not U78 (_net_54, D);
not U79 (_net_55, CK);
not U80 (_net_56, EN);
not U81 (_net_57, SI);
and U82 (_net_58, _net_54, _net_55, _net_56, SE, _net_57);
not U83 (_net_59, D);
not U84 (_net_60, CK);
not U85 (_net_61, EN);
not U86 (_net_62, SE);
and U87 (_net_63, _net_59, _net_60, _net_61, _net_62);
or U88 (cond18, _net_50, _net_53, _net_58, _net_63);
not U89 (_net_64, D);
not U90 (_net_65, CK);
not U91 (_net_66, SI);
and U92 (_net_67, _net_64, _net_65, EN, SE, _net_66);
not U93 (_net_68, CK);
not U94 (_net_69, SI);
and U95 (_net_70, D, _net_68, SE, _net_69);
not U96 (_net_71, D);
not U97 (_net_72, CK);
not U98 (_net_73, EN);
not U99 (_net_74, SI);
and U100 (_net_75, _net_71, _net_72, _net_73, SE, _net_74);
not U101 (_net_76, D);
not U102 (_net_77, CK);
not U103 (_net_78, EN);
not U104 (_net_79, SE);
and U105 (_net_80, _net_76, _net_77, _net_78, _net_79);
or U106 (cond18, _net_67, _net_70, _net_75, _net_80);
not U107 (_net_81, CK);
not U108 (_net_82, SE);
and U109 (_net_83, D, _net_81, _net_82);
not U110 (_net_84, CK);
and U111 (_net_85, D, _net_84, SE, SI);
not U112 (_net_86, D);
not U113 (_net_87, CK);
and U114 (_net_88, _net_86, _net_87, EN, SE, SI);
not U115 (_net_89, D);
not U116 (_net_90, CK);
not U117 (_net_91, SE);
and U118 (_net_92, _net_89, _net_90, EN, _net_91);
not U119 (_net_93, D);
not U120 (_net_94, CK);
not U121 (_net_95, EN);
and U122 (_net_96, _net_93, _net_94, _net_95, SE, SI);
or U123 (cond17, _net_83, _net_85, _net_88, _net_92, _net_96);
not U124 (_net_97, CK);
not U125 (_net_98, SE);
and U126 (_net_99, D, _net_97, _net_98);
not U127 (_net_100, CK);
and U128 (_net_101, D, _net_100, SE, SI);
not U129 (_net_102, D);
not U130 (_net_103, CK);
and U131 (_net_104, _net_102, _net_103, EN, SE, SI);
not U132 (_net_105, D);
not U133 (_net_106, CK);
not U134 (_net_107, SE);
and U135 (_net_108, _net_105, _net_106, EN, _net_107);
not U136 (_net_109, D);
not U137 (_net_110, CK);
not U138 (_net_111, EN);
and U139 (_net_112, _net_109, _net_110, _net_111, SE, SI);
or U140 (cond17, _net_99, _net_101, _net_104, _net_108, _net_112);
not U141 (_net_113, D);
and U142 (cond16, EN, _net_113, SD, SE, SI);
not U143 (_net_114, D);
and U144 (cond16, EN, _net_114, SD, SE, SI);
not U145 (_net_115, EN);
and U146 (cond14, SD, _net_115, SE, SI);
not U147 (_net_116, EN);
and U148 (cond14, SD, _net_116, SE, SI);
not U149 (_net_117, D);
not U150 (_net_118, SE);
and U151 (cond24, _net_117, CK, EN, SD, _net_118);
not U152 (_net_119, D);
and U153 (cond23, _net_119, CK, EN, SD, SE);
not U154 (_net_120, EN);
not U155 (_net_121, SE);
and U156 (cond22, _net_120, CK, SD, _net_121);
not U157 (_net_122, EN);
and U158 (cond21, _net_122, CK, SD, SE);
not U159 (_net_123, SE);
and U160 (cond20, D, CK, EN, SD, _net_123);
and U161 (cond19, D, CK, EN, SD, SE);
not U162 (_net_124, EN);
not U163 (_net_125, SE);
and U164 (cond15, _net_124, D, SD, _net_125);
not U165 (_net_126, EN);
not U166 (_net_127, SE);
and U167 (cond15, _net_126, D, SD, _net_127);
and U168 (cond13, EN, D, SD, SE, SI);
and U169 (cond13, EN, D, SD, SE, SI);
not U170 (_net_128, D);
not U171 (_net_129, CK);
not U172 (_net_130, EN);
not U173 (_net_131, SE);
and U174 (cond54, _net_128, _net_129, _net_130, _net_131);
not U175 (_net_132, D);
not U176 (_net_133, CK);
not U177 (_net_134, EN);
not U178 (_net_135, SE);
and U179 (cond54, _net_132, _net_133, _net_134, _net_135);
not U180 (_net_136, D);
not U181 (_net_137, CK);
not U182 (_net_138, EN);
not U183 (_net_139, SE);
and U184 (cond70, _net_136, _net_137, _net_138, RD, _net_139);
not U185 (_net_140, D);
not U186 (_net_141, CK);
not U187 (_net_142, SE);
and U188 (cond53, _net_140, _net_141, EN, _net_142);
not U189 (_net_143, D);
not U190 (_net_144, CK);
not U191 (_net_145, SE);
and U192 (cond53, _net_143, _net_144, EN, _net_145);
not U193 (_net_146, D);
not U194 (_net_147, CK);
not U195 (_net_148, SE);
and U196 (cond69, _net_146, _net_147, EN, RD, _net_148);
not U197 (_net_149, D);
not U198 (_net_150, CK);
not U199 (_net_151, SI);
and U200 (cond68, _net_149, _net_150, EN, RD, SE, _net_151);
not U201 (_net_152, D);
not U202 (_net_153, CK);
and U203 (cond67, _net_152, _net_153, EN, RD, SE, SI);
not U204 (_net_154, D);
not U205 (_net_155, CK);
not U206 (_net_156, SI);
and U207 (cond52, _net_154, _net_155, EN, SE, _net_156);
not U208 (_net_157, D);
not U209 (_net_158, CK);
not U210 (_net_159, SI);
and U211 (cond52, _net_157, _net_158, EN, SE, _net_159);
not U212 (_net_160, D);
not U213 (_net_161, CK);
and U214 (cond51, _net_160, _net_161, EN, SE, SI);
not U215 (_net_162, D);
not U216 (_net_163, CK);
and U217 (cond51, _net_162, _net_163, EN, SE, SI);
not U218 (_net_164, EN);
not U219 (_net_165, CK);
not U220 (_net_166, SI);
and U221 (cond65, _net_164, _net_165, RD, SE, _net_166);
not U222 (_net_167, EN);
not U223 (_net_168, CK);
and U224 (cond64, _net_167, _net_168, RD, SE, SI);
not U225 (_net_169, EN);
not U226 (_net_170, CK);
not U227 (_net_171, SI);
and U228 (cond49, _net_169, _net_170, SE, _net_171);
not U229 (_net_172, EN);
not U230 (_net_173, CK);
not U231 (_net_174, SI);
and U232 (cond49, _net_172, _net_173, SE, _net_174);
not U233 (_net_175, EN);
not U234 (_net_176, CK);
and U235 (cond48, _net_175, _net_176, SE, SI);
not U236 (_net_177, EN);
not U237 (_net_178, CK);
and U238 (cond48, _net_177, _net_178, SE, SI);
not U239 (_net_179, CK);
not U240 (_net_180, EN);
not U241 (_net_181, SE);
and U242 (cond50, D, _net_179, _net_180, _net_181);
not U243 (_net_182, CK);
not U244 (_net_183, EN);
not U245 (_net_184, SE);
and U246 (cond50, D, _net_182, _net_183, _net_184);
not U247 (_net_185, CK);
not U248 (_net_186, EN);
not U249 (_net_187, SE);
and U250 (cond66, D, _net_185, _net_186, RD, _net_187);
not U251 (_net_188, CK);
not U252 (_net_189, SE);
and U253 (cond47, D, _net_188, EN, _net_189);
not U254 (_net_190, CK);
not U255 (_net_191, SE);
and U256 (cond47, D, _net_190, EN, _net_191);
not U257 (_net_192, CK);
not U258 (_net_193, SE);
and U259 (cond63, D, _net_192, EN, RD, _net_193);
not U260 (_net_194, CK);
not U261 (_net_195, SI);
and U262 (cond62, D, _net_194, EN, RD, SE, _net_195);
not U263 (_net_196, CK);
and U264 (cond61, D, _net_196, EN, RD, SE, SI);
not U265 (_net_197, CK);
not U266 (_net_198, SI);
and U267 (cond46, D, _net_197, EN, SE, _net_198);
not U268 (_net_199, CK);
not U269 (_net_200, SI);
and U270 (cond46, D, _net_199, EN, SE, _net_200);
not U271 (_net_201, CK);
and U272 (cond45, D, _net_201, EN, SE, SI);
not U273 (_net_202, CK);
and U274 (cond45, D, _net_202, EN, SE, SI);
not U275 (_net_203, EN);
not U276 (_net_204, D);
not U277 (_net_205, SE);
and U278 (cond38, _net_203, _net_204, RD, _net_205);
not U279 (_net_206, EN);
not U280 (_net_207, D);
not U281 (_net_208, SE);
and U282 (cond38, _net_206, _net_207, RD, _net_208);
not U283 (_net_209, D);
not U284 (_net_210, SI);
and U285 (cond37, EN, _net_209, RD, SE, _net_210);
not U286 (_net_211, D);
not U287 (_net_212, SI);
and U288 (cond37, EN, _net_211, RD, SE, _net_212);
not U289 (_net_213, EN);
not U290 (_net_214, SI);
and U291 (cond36, RD, _net_213, SE, _net_214);
not U292 (_net_215, EN);
not U293 (_net_216, SI);
and U294 (cond36, RD, _net_215, SE, _net_216);
not U295 (_net_217, D);
not U296 (_net_218, SE);
and U297 (cond44, _net_217, CK, EN, _net_218);
not U298 (_net_219, D);
not U299 (_net_220, SE);
and U300 (cond44, _net_219, CK, EN, _net_220);
not U301 (_net_221, D);
not U302 (_net_222, SE);
and U303 (cond60, _net_221, CK, EN, RD, _net_222);
not U304 (_net_223, D);
and U305 (cond59, _net_223, CK, EN, RD, SE);
not U306 (_net_224, D);
and U307 (cond43, _net_224, CK, EN, SE);
not U308 (_net_225, D);
and U309 (cond43, _net_225, CK, EN, SE);
not U310 (_net_226, EN);
not U311 (_net_227, SE);
and U312 (cond42, _net_226, CK, _net_227);
not U313 (_net_228, EN);
not U314 (_net_229, SE);
and U315 (cond42, _net_228, CK, _net_229);
not U316 (_net_230, EN);
not U317 (_net_231, SE);
and U318 (cond58, _net_230, CK, RD, _net_231);
not U319 (_net_232, EN);
and U320 (cond57, _net_232, CK, RD, SE);
not U321 (_net_233, EN);
and U322 (cond41, _net_233, CK, SE);
not U323 (_net_234, EN);
and U324 (cond41, _net_234, CK, SE);
not U325 (_net_235, SE);
and U326 (cond40, D, CK, EN, _net_235);
not U327 (_net_236, SE);
and U328 (cond40, D, CK, EN, _net_236);
not U329 (_net_237, SE);
and U330 (cond56, D, CK, EN, RD, _net_237);
and U331 (cond55, D, CK, EN, RD, SE);
and U332 (cond39, D, CK, EN, SE);
and U333 (cond39, D, CK, EN, SE);
not U334 (_net_238, SI);
and U335 (cond35, EN, D, RD, SE, _net_238);
not U336 (_net_239, SI);
and U337 (cond35, EN, D, RD, SE, _net_239);
not U338 (_net_240, EN);
not U339 (_net_241, D);
and U340 (cond5, _net_240, _net_241, RD, SD, SI);
not U341 (_net_242, EN);
not U342 (_net_243, D);
and U343 (cond5, _net_242, _net_243, RD, SD, SI);
not U344 (_net_244, D);
not U345 (_net_245, SI);
and U346 (cond8, EN, _net_244, RD, SD, _net_245);
not U347 (_net_246, D);
not U348 (_net_247, SI);
and U349 (cond8, EN, _net_246, RD, SD, _net_247);
not U350 (_net_248, D);
and U351 (cond4, EN, _net_248, RD, SD, SI);
not U352 (_net_249, D);
and U353 (cond4, EN, _net_249, RD, SD, SI);
not U354 (_net_250, EN);
not U355 (_net_251, SI);
and U356 (cond7, _net_250, D, RD, SD, _net_251);
not U357 (_net_252, EN);
not U358 (_net_253, SI);
and U359 (cond7, _net_252, D, RD, SD, _net_253);
not U360 (_net_254, SI);
and U361 (cond6, EN, D, RD, SD, _net_254);
not U362 (_net_255, SI);
and U363 (cond6, EN, D, RD, SD, _net_255);
and U364 (cond3, EN, D, RD, SD, SI);
and U365 (cond3, EN, D, RD, SD, SI);
not U366 (_net_256, EN);
not U367 (_net_257, D);
and U368 (cond12, _net_256, _net_257, RD, SD, SE);
not U369 (_net_258, EN);
not U370 (_net_259, D);
and U371 (cond12, _net_258, _net_259, RD, SD, SE);
not U372 (_net_260, D);
and U373 (cond11, EN, _net_260, RD, SD, SE);
not U374 (_net_261, D);
and U375 (cond11, EN, _net_261, RD, SD, SE);
not U376 (_net_262, EN);
and U377 (cond10, _net_262, D, RD, SD, SE);
not U378 (_net_263, EN);
and U379 (cond10, _net_263, D, RD, SD, SE);
and U380 (cond9, EN, D, RD, SD, SE);
and U381 (cond9, EN, D, RD, SD, SE);

specify
if ((~(CK) & ~(D) & ~(EN) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & EN & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & EN & RD & SE & ~(SI))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & EN & RD & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & ~(EN) & RD & SE & ~(SI))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & ~(EN) & RD & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & ~(EN) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & EN & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & EN & RD & SE & ~(SI))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & EN & RD & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & ~(D) & EN & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & ~(D) & EN & RD & SE)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & ~(EN) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & ~(EN) & RD & SE)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & D & EN & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & D & EN & RD & SE)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & ~(EN) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & EN & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & EN & SD & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & EN & SD & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(EN) & SD & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(EN) & SD & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & D & ~(EN) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & EN & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & EN & SD & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & EN & SD & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & EN & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & EN & SD & SE)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(EN) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(EN) & SD & SE)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & D & EN & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & EN & SD & SE)) (negedge RD => (Q +: 1'b0))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond78 , 0 ,0, viol_0);
$width(negedge CK &&& cond78 , 0 ,0, viol_0);
$width(posedge CK &&& cond77 , 0 ,0, viol_0);
$width(negedge CK &&& cond77 , 0 ,0, viol_0);
$width(posedge CK &&& cond74 , 0 ,0, viol_0);
$width(negedge CK &&& cond74 , 0 ,0, viol_0);
$width(posedge CK &&& cond76 , 0 ,0, viol_0);
$width(negedge CK &&& cond76 , 0 ,0, viol_0);
$width(posedge CK &&& cond72 , 0 ,0, viol_0);
$width(negedge CK &&& cond72 , 0 ,0, viol_0);
$width(posedge CK &&& cond73 , 0 ,0, viol_0);
$width(negedge CK &&& cond73 , 0 ,0, viol_0);
$width(posedge CK &&& cond75 , 0 ,0, viol_0);
$width(negedge CK &&& cond75 , 0 ,0, viol_0);
$width(posedge CK &&& cond71 , 0 ,0, viol_0);
$width(negedge CK &&& cond71 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond2 , posedge EN &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond2 , negedge EN &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond1 , posedge EN &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond1 , negedge EN &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$width(negedge RD &&& cond34 , 0 ,0, viol_0);
$width(negedge RD &&& cond33 , 0 ,0, viol_0);
$width(negedge RD &&& cond32 , 0 ,0, viol_0);
$width(negedge RD &&& cond31 , 0 ,0, viol_0);
$width(negedge RD &&& cond29 , 0 ,0, viol_0);
$width(negedge RD &&& cond28 , 0 ,0, viol_0);
$width(negedge RD &&& cond30 , 0 ,0, viol_0);
$width(negedge RD &&& cond27 , 0 ,0, viol_0);
$width(negedge RD &&& cond26 , 0 ,0, viol_0);
$width(negedge RD &&& cond25 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond18 , posedge RD &&& cond18 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$setuphold(posedge SD &&& cond17 , posedge RD &&& cond17 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$recrem(posedge RD &&& cond16 , posedge CK &&& cond16 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond14 , posedge CK &&& cond14 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond24 , 0 ,0, viol_0);
$width(negedge RD &&& cond23 , 0 ,0, viol_0);
$width(negedge RD &&& cond22 , 0 ,0, viol_0);
$width(negedge RD &&& cond21 , 0 ,0, viol_0);
$width(negedge RD &&& cond20 , 0 ,0, viol_0);
$width(negedge RD &&& cond19 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond15 , posedge CK &&& cond15 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond13 , posedge CK &&& cond13 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge SD &&& CK , posedge RD &&& CK , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$setuphold(posedge RD &&& cond54 , posedge SD &&& cond54 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond70 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond53 , posedge SD &&& cond53 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond69 , 0 ,0, viol_0);
$width(negedge SD &&& cond68 , 0 ,0, viol_0);
$width(negedge SD &&& cond67 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond52 , posedge SD &&& cond52 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond51 , posedge SD &&& cond51 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond65 , 0 ,0, viol_0);
$width(negedge SD &&& cond64 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond49 , posedge SD &&& cond49 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond48 , posedge SD &&& cond48 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond50 , posedge SD &&& cond50 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond66 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond47 , posedge SD &&& cond47 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond63 , 0 ,0, viol_0);
$width(negedge SD &&& cond62 , 0 ,0, viol_0);
$width(negedge SD &&& cond61 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond46 , posedge SD &&& cond46 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond45 , posedge SD &&& cond45 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$recrem(posedge SD &&& cond38 , posedge CK &&& cond38 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond37 , posedge CK &&& cond37 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond36 , posedge CK &&& cond36 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$setuphold(posedge RD &&& cond44 , posedge SD &&& cond44 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond60 , 0 ,0, viol_0);
$width(negedge SD &&& cond59 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond43 , posedge SD &&& cond43 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond42 , posedge SD &&& cond42 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond58 , 0 ,0, viol_0);
$width(negedge SD &&& cond57 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond41 , posedge SD &&& cond41 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond40 , posedge SD &&& cond40 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond56 , 0 ,0, viol_0);
$width(negedge SD &&& cond55 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond39 , posedge SD &&& cond39 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$recrem(posedge SD &&& cond35 , posedge CK &&& cond35 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$setuphold(posedge CK &&& cond5 , posedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , negedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , negedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , posedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , negedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , posedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , negedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , posedge SI &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond12 , negedge SI &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond11 , posedge SI &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond11 , negedge SI &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond10 , posedge SI &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond10 , negedge SI &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , posedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , negedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_FSDPHRBSBQ_DL50_1

//%BEGIN SEH_FSDPHRBSBQ_DL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPHRBSBQ_DL50_2 (Q, CK, D, SI, SE, EN, RD, SD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, EN, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_EN, delayed_RD,
        delayed_SD;
   wire int_res__D, int_res__S, int_res__RD, int_res__SD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPHRBSBQ_DL50_2 (Q, CK, D, SI, SE, EN, RD, SD, VDD, VSS);
   output Q;
   input CK, D, SI, SE, EN, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_EN, delayed_RD,
        delayed_SD;
   wire int_res__D, int_res__S, int_res__RD, int_res__SD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_EN, EN_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif

   scl40_htc50_mux2 (int_res__D, int_res_iq, delayed_D, delayed_EN);
   scl40_htc50_mux2 (int_res__S, delayed_SI, int_res__D, delayed_SE);
   not (int_res__RD, delayed_RD);
   not (int_res__SD, delayed_SD);
   scl40_htc50_dff_sr_err (xcr_0, delayed_CK, int_res__S, int_res__SD, int_res__RD);
   scl40_htc50_dff_sr_0 (int_res_iq, viol_0, delayed_CK, int_res__S, int_res__SD, int_res__RD, xcr_0);

   `ifdef VIRL_functiononly
       buf #1 (Q, int_res_iq);
   `else
       buf (Q, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else
   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
not U0 (_net_0, EN);
not U1 (_net_1, D);
not U2 (_net_2, SE);
and U3 (cond78, _net_0, _net_1, RD, SD, _net_2);
not U4 (_net_3, D);
not U5 (_net_4, SI);
and U6 (cond77, EN, _net_3, RD, SD, SE, _net_4);
not U7 (_net_5, D);
and U8 (cond74, EN, _net_5, RD, SD, SE, SI);
not U9 (_net_6, EN);
not U10 (_net_7, SI);
and U11 (cond76, RD, _net_6, SD, SE, _net_7);
not U12 (_net_8, EN);
and U13 (cond72, RD, _net_8, SD, SE, SI);
not U14 (_net_9, EN);
not U15 (_net_10, SE);
and U16 (cond73, _net_9, D, RD, SD, _net_10);
not U17 (_net_11, SI);
and U18 (cond75, EN, D, RD, SD, SE, _net_11);
and U19 (cond71, EN, D, RD, SD, SE, SI);
not U20 (_net_12, EN);
not U21 (_net_13, SE);
and U22 (cond0, RD, _net_12, SD, _net_13);
not U23 (_net_14, EN);
not U24 (_net_15, SE);
and U25 (cond0, RD, _net_14, SD, _net_15);
not U26 (_net_16, D);
not U27 (_net_17, SE);
and U28 (cond2, RD, _net_16, SD, _net_17);
not U29 (_net_18, D);
not U30 (_net_19, SE);
and U31 (cond2, RD, _net_18, SD, _net_19);
not U32 (_net_20, SE);
and U33 (cond1, RD, D, SD, _net_20);
not U34 (_net_21, SE);
and U35 (cond1, RD, D, SD, _net_21);
not U36 (_net_22, D);
not U37 (_net_23, CK);
not U38 (_net_24, EN);
not U39 (_net_25, SE);
and U40 (cond34, _net_22, _net_23, _net_24, SD, _net_25);
not U41 (_net_26, D);
not U42 (_net_27, CK);
not U43 (_net_28, SE);
and U44 (cond33, _net_26, _net_27, EN, SD, _net_28);
not U45 (_net_29, D);
not U46 (_net_30, CK);
not U47 (_net_31, SI);
and U48 (cond32, _net_29, _net_30, EN, SD, SE, _net_31);
not U49 (_net_32, D);
not U50 (_net_33, CK);
and U51 (cond31, _net_32, _net_33, EN, SD, SE, SI);
not U52 (_net_34, EN);
not U53 (_net_35, CK);
not U54 (_net_36, SI);
and U55 (cond29, _net_34, _net_35, SD, SE, _net_36);
not U56 (_net_37, EN);
not U57 (_net_38, CK);
and U58 (cond28, _net_37, _net_38, SD, SE, SI);
not U59 (_net_39, CK);
not U60 (_net_40, EN);
not U61 (_net_41, SE);
and U62 (cond30, D, _net_39, _net_40, SD, _net_41);
not U63 (_net_42, CK);
not U64 (_net_43, SE);
and U65 (cond27, D, _net_42, EN, SD, _net_43);
not U66 (_net_44, CK);
not U67 (_net_45, SI);
and U68 (cond26, D, _net_44, EN, SD, SE, _net_45);
not U69 (_net_46, CK);
and U70 (cond25, D, _net_46, EN, SD, SE, SI);
not U71 (_net_47, D);
not U72 (_net_48, CK);
not U73 (_net_49, SI);
and U74 (_net_50, _net_47, _net_48, EN, SE, _net_49);
not U75 (_net_51, CK);
not U76 (_net_52, SI);
and U77 (_net_53, D, _net_51, SE, _net_52);
not U78 (_net_54, D);
not U79 (_net_55, CK);
not U80 (_net_56, EN);
not U81 (_net_57, SI);
and U82 (_net_58, _net_54, _net_55, _net_56, SE, _net_57);
not U83 (_net_59, D);
not U84 (_net_60, CK);
not U85 (_net_61, EN);
not U86 (_net_62, SE);
and U87 (_net_63, _net_59, _net_60, _net_61, _net_62);
or U88 (cond18, _net_50, _net_53, _net_58, _net_63);
not U89 (_net_64, D);
not U90 (_net_65, CK);
not U91 (_net_66, SI);
and U92 (_net_67, _net_64, _net_65, EN, SE, _net_66);
not U93 (_net_68, CK);
not U94 (_net_69, SI);
and U95 (_net_70, D, _net_68, SE, _net_69);
not U96 (_net_71, D);
not U97 (_net_72, CK);
not U98 (_net_73, EN);
not U99 (_net_74, SI);
and U100 (_net_75, _net_71, _net_72, _net_73, SE, _net_74);
not U101 (_net_76, D);
not U102 (_net_77, CK);
not U103 (_net_78, EN);
not U104 (_net_79, SE);
and U105 (_net_80, _net_76, _net_77, _net_78, _net_79);
or U106 (cond18, _net_67, _net_70, _net_75, _net_80);
not U107 (_net_81, CK);
not U108 (_net_82, SE);
and U109 (_net_83, D, _net_81, _net_82);
not U110 (_net_84, CK);
and U111 (_net_85, D, _net_84, SE, SI);
not U112 (_net_86, D);
not U113 (_net_87, CK);
and U114 (_net_88, _net_86, _net_87, EN, SE, SI);
not U115 (_net_89, D);
not U116 (_net_90, CK);
not U117 (_net_91, SE);
and U118 (_net_92, _net_89, _net_90, EN, _net_91);
not U119 (_net_93, D);
not U120 (_net_94, CK);
not U121 (_net_95, EN);
and U122 (_net_96, _net_93, _net_94, _net_95, SE, SI);
or U123 (cond17, _net_83, _net_85, _net_88, _net_92, _net_96);
not U124 (_net_97, CK);
not U125 (_net_98, SE);
and U126 (_net_99, D, _net_97, _net_98);
not U127 (_net_100, CK);
and U128 (_net_101, D, _net_100, SE, SI);
not U129 (_net_102, D);
not U130 (_net_103, CK);
and U131 (_net_104, _net_102, _net_103, EN, SE, SI);
not U132 (_net_105, D);
not U133 (_net_106, CK);
not U134 (_net_107, SE);
and U135 (_net_108, _net_105, _net_106, EN, _net_107);
not U136 (_net_109, D);
not U137 (_net_110, CK);
not U138 (_net_111, EN);
and U139 (_net_112, _net_109, _net_110, _net_111, SE, SI);
or U140 (cond17, _net_99, _net_101, _net_104, _net_108, _net_112);
not U141 (_net_113, D);
and U142 (cond16, EN, _net_113, SD, SE, SI);
not U143 (_net_114, D);
and U144 (cond16, EN, _net_114, SD, SE, SI);
not U145 (_net_115, EN);
and U146 (cond14, SD, _net_115, SE, SI);
not U147 (_net_116, EN);
and U148 (cond14, SD, _net_116, SE, SI);
not U149 (_net_117, D);
not U150 (_net_118, SE);
and U151 (cond24, _net_117, CK, EN, SD, _net_118);
not U152 (_net_119, D);
and U153 (cond23, _net_119, CK, EN, SD, SE);
not U154 (_net_120, EN);
not U155 (_net_121, SE);
and U156 (cond22, _net_120, CK, SD, _net_121);
not U157 (_net_122, EN);
and U158 (cond21, _net_122, CK, SD, SE);
not U159 (_net_123, SE);
and U160 (cond20, D, CK, EN, SD, _net_123);
and U161 (cond19, D, CK, EN, SD, SE);
not U162 (_net_124, EN);
not U163 (_net_125, SE);
and U164 (cond15, _net_124, D, SD, _net_125);
not U165 (_net_126, EN);
not U166 (_net_127, SE);
and U167 (cond15, _net_126, D, SD, _net_127);
and U168 (cond13, EN, D, SD, SE, SI);
and U169 (cond13, EN, D, SD, SE, SI);
not U170 (_net_128, D);
not U171 (_net_129, CK);
not U172 (_net_130, EN);
not U173 (_net_131, SE);
and U174 (cond54, _net_128, _net_129, _net_130, _net_131);
not U175 (_net_132, D);
not U176 (_net_133, CK);
not U177 (_net_134, EN);
not U178 (_net_135, SE);
and U179 (cond54, _net_132, _net_133, _net_134, _net_135);
not U180 (_net_136, D);
not U181 (_net_137, CK);
not U182 (_net_138, EN);
not U183 (_net_139, SE);
and U184 (cond70, _net_136, _net_137, _net_138, RD, _net_139);
not U185 (_net_140, D);
not U186 (_net_141, CK);
not U187 (_net_142, SE);
and U188 (cond53, _net_140, _net_141, EN, _net_142);
not U189 (_net_143, D);
not U190 (_net_144, CK);
not U191 (_net_145, SE);
and U192 (cond53, _net_143, _net_144, EN, _net_145);
not U193 (_net_146, D);
not U194 (_net_147, CK);
not U195 (_net_148, SE);
and U196 (cond69, _net_146, _net_147, EN, RD, _net_148);
not U197 (_net_149, D);
not U198 (_net_150, CK);
not U199 (_net_151, SI);
and U200 (cond68, _net_149, _net_150, EN, RD, SE, _net_151);
not U201 (_net_152, D);
not U202 (_net_153, CK);
and U203 (cond67, _net_152, _net_153, EN, RD, SE, SI);
not U204 (_net_154, D);
not U205 (_net_155, CK);
not U206 (_net_156, SI);
and U207 (cond52, _net_154, _net_155, EN, SE, _net_156);
not U208 (_net_157, D);
not U209 (_net_158, CK);
not U210 (_net_159, SI);
and U211 (cond52, _net_157, _net_158, EN, SE, _net_159);
not U212 (_net_160, D);
not U213 (_net_161, CK);
and U214 (cond51, _net_160, _net_161, EN, SE, SI);
not U215 (_net_162, D);
not U216 (_net_163, CK);
and U217 (cond51, _net_162, _net_163, EN, SE, SI);
not U218 (_net_164, EN);
not U219 (_net_165, CK);
not U220 (_net_166, SI);
and U221 (cond65, _net_164, _net_165, RD, SE, _net_166);
not U222 (_net_167, EN);
not U223 (_net_168, CK);
and U224 (cond64, _net_167, _net_168, RD, SE, SI);
not U225 (_net_169, EN);
not U226 (_net_170, CK);
not U227 (_net_171, SI);
and U228 (cond49, _net_169, _net_170, SE, _net_171);
not U229 (_net_172, EN);
not U230 (_net_173, CK);
not U231 (_net_174, SI);
and U232 (cond49, _net_172, _net_173, SE, _net_174);
not U233 (_net_175, EN);
not U234 (_net_176, CK);
and U235 (cond48, _net_175, _net_176, SE, SI);
not U236 (_net_177, EN);
not U237 (_net_178, CK);
and U238 (cond48, _net_177, _net_178, SE, SI);
not U239 (_net_179, CK);
not U240 (_net_180, EN);
not U241 (_net_181, SE);
and U242 (cond50, D, _net_179, _net_180, _net_181);
not U243 (_net_182, CK);
not U244 (_net_183, EN);
not U245 (_net_184, SE);
and U246 (cond50, D, _net_182, _net_183, _net_184);
not U247 (_net_185, CK);
not U248 (_net_186, EN);
not U249 (_net_187, SE);
and U250 (cond66, D, _net_185, _net_186, RD, _net_187);
not U251 (_net_188, CK);
not U252 (_net_189, SE);
and U253 (cond47, D, _net_188, EN, _net_189);
not U254 (_net_190, CK);
not U255 (_net_191, SE);
and U256 (cond47, D, _net_190, EN, _net_191);
not U257 (_net_192, CK);
not U258 (_net_193, SE);
and U259 (cond63, D, _net_192, EN, RD, _net_193);
not U260 (_net_194, CK);
not U261 (_net_195, SI);
and U262 (cond62, D, _net_194, EN, RD, SE, _net_195);
not U263 (_net_196, CK);
and U264 (cond61, D, _net_196, EN, RD, SE, SI);
not U265 (_net_197, CK);
not U266 (_net_198, SI);
and U267 (cond46, D, _net_197, EN, SE, _net_198);
not U268 (_net_199, CK);
not U269 (_net_200, SI);
and U270 (cond46, D, _net_199, EN, SE, _net_200);
not U271 (_net_201, CK);
and U272 (cond45, D, _net_201, EN, SE, SI);
not U273 (_net_202, CK);
and U274 (cond45, D, _net_202, EN, SE, SI);
not U275 (_net_203, EN);
not U276 (_net_204, D);
not U277 (_net_205, SE);
and U278 (cond38, _net_203, _net_204, RD, _net_205);
not U279 (_net_206, EN);
not U280 (_net_207, D);
not U281 (_net_208, SE);
and U282 (cond38, _net_206, _net_207, RD, _net_208);
not U283 (_net_209, D);
not U284 (_net_210, SI);
and U285 (cond37, EN, _net_209, RD, SE, _net_210);
not U286 (_net_211, D);
not U287 (_net_212, SI);
and U288 (cond37, EN, _net_211, RD, SE, _net_212);
not U289 (_net_213, EN);
not U290 (_net_214, SI);
and U291 (cond36, RD, _net_213, SE, _net_214);
not U292 (_net_215, EN);
not U293 (_net_216, SI);
and U294 (cond36, RD, _net_215, SE, _net_216);
not U295 (_net_217, D);
not U296 (_net_218, SE);
and U297 (cond44, _net_217, CK, EN, _net_218);
not U298 (_net_219, D);
not U299 (_net_220, SE);
and U300 (cond44, _net_219, CK, EN, _net_220);
not U301 (_net_221, D);
not U302 (_net_222, SE);
and U303 (cond60, _net_221, CK, EN, RD, _net_222);
not U304 (_net_223, D);
and U305 (cond59, _net_223, CK, EN, RD, SE);
not U306 (_net_224, D);
and U307 (cond43, _net_224, CK, EN, SE);
not U308 (_net_225, D);
and U309 (cond43, _net_225, CK, EN, SE);
not U310 (_net_226, EN);
not U311 (_net_227, SE);
and U312 (cond42, _net_226, CK, _net_227);
not U313 (_net_228, EN);
not U314 (_net_229, SE);
and U315 (cond42, _net_228, CK, _net_229);
not U316 (_net_230, EN);
not U317 (_net_231, SE);
and U318 (cond58, _net_230, CK, RD, _net_231);
not U319 (_net_232, EN);
and U320 (cond57, _net_232, CK, RD, SE);
not U321 (_net_233, EN);
and U322 (cond41, _net_233, CK, SE);
not U323 (_net_234, EN);
and U324 (cond41, _net_234, CK, SE);
not U325 (_net_235, SE);
and U326 (cond40, D, CK, EN, _net_235);
not U327 (_net_236, SE);
and U328 (cond40, D, CK, EN, _net_236);
not U329 (_net_237, SE);
and U330 (cond56, D, CK, EN, RD, _net_237);
and U331 (cond55, D, CK, EN, RD, SE);
and U332 (cond39, D, CK, EN, SE);
and U333 (cond39, D, CK, EN, SE);
not U334 (_net_238, SI);
and U335 (cond35, EN, D, RD, SE, _net_238);
not U336 (_net_239, SI);
and U337 (cond35, EN, D, RD, SE, _net_239);
not U338 (_net_240, EN);
not U339 (_net_241, D);
and U340 (cond5, _net_240, _net_241, RD, SD, SI);
not U341 (_net_242, EN);
not U342 (_net_243, D);
and U343 (cond5, _net_242, _net_243, RD, SD, SI);
not U344 (_net_244, D);
not U345 (_net_245, SI);
and U346 (cond8, EN, _net_244, RD, SD, _net_245);
not U347 (_net_246, D);
not U348 (_net_247, SI);
and U349 (cond8, EN, _net_246, RD, SD, _net_247);
not U350 (_net_248, D);
and U351 (cond4, EN, _net_248, RD, SD, SI);
not U352 (_net_249, D);
and U353 (cond4, EN, _net_249, RD, SD, SI);
not U354 (_net_250, EN);
not U355 (_net_251, SI);
and U356 (cond7, _net_250, D, RD, SD, _net_251);
not U357 (_net_252, EN);
not U358 (_net_253, SI);
and U359 (cond7, _net_252, D, RD, SD, _net_253);
not U360 (_net_254, SI);
and U361 (cond6, EN, D, RD, SD, _net_254);
not U362 (_net_255, SI);
and U363 (cond6, EN, D, RD, SD, _net_255);
and U364 (cond3, EN, D, RD, SD, SI);
and U365 (cond3, EN, D, RD, SD, SI);
not U366 (_net_256, EN);
not U367 (_net_257, D);
and U368 (cond12, _net_256, _net_257, RD, SD, SE);
not U369 (_net_258, EN);
not U370 (_net_259, D);
and U371 (cond12, _net_258, _net_259, RD, SD, SE);
not U372 (_net_260, D);
and U373 (cond11, EN, _net_260, RD, SD, SE);
not U374 (_net_261, D);
and U375 (cond11, EN, _net_261, RD, SD, SE);
not U376 (_net_262, EN);
and U377 (cond10, _net_262, D, RD, SD, SE);
not U378 (_net_263, EN);
and U379 (cond10, _net_263, D, RD, SD, SE);
and U380 (cond9, EN, D, RD, SD, SE);
and U381 (cond9, EN, D, RD, SD, SE);

specify
if ((~(CK) & ~(D) & ~(EN) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & EN & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & EN & RD & SE & ~(SI))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & EN & RD & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & ~(EN) & RD & SE & ~(SI))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & ~(EN) & RD & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & ~(EN) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & EN & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & EN & RD & SE & ~(SI))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & EN & RD & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & ~(D) & EN & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & ~(D) & EN & RD & SE)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & ~(EN) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & ~(EN) & RD & SE)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & D & EN & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & D & EN & RD & SE)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & ~(EN) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & EN & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & EN & SD & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & EN & SD & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(EN) & SD & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(EN) & SD & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & D & ~(EN) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & EN & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & EN & SD & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & EN & SD & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & EN & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & EN & SD & SE)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(EN) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(EN) & SD & SE)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & D & EN & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & EN & SD & SE)) (negedge RD => (Q +: 1'b0))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond78 , 0 ,0, viol_0);
$width(negedge CK &&& cond78 , 0 ,0, viol_0);
$width(posedge CK &&& cond77 , 0 ,0, viol_0);
$width(negedge CK &&& cond77 , 0 ,0, viol_0);
$width(posedge CK &&& cond74 , 0 ,0, viol_0);
$width(negedge CK &&& cond74 , 0 ,0, viol_0);
$width(posedge CK &&& cond76 , 0 ,0, viol_0);
$width(negedge CK &&& cond76 , 0 ,0, viol_0);
$width(posedge CK &&& cond72 , 0 ,0, viol_0);
$width(negedge CK &&& cond72 , 0 ,0, viol_0);
$width(posedge CK &&& cond73 , 0 ,0, viol_0);
$width(negedge CK &&& cond73 , 0 ,0, viol_0);
$width(posedge CK &&& cond75 , 0 ,0, viol_0);
$width(negedge CK &&& cond75 , 0 ,0, viol_0);
$width(posedge CK &&& cond71 , 0 ,0, viol_0);
$width(negedge CK &&& cond71 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond2 , posedge EN &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond2 , negedge EN &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond1 , posedge EN &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond1 , negedge EN &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$width(negedge RD &&& cond34 , 0 ,0, viol_0);
$width(negedge RD &&& cond33 , 0 ,0, viol_0);
$width(negedge RD &&& cond32 , 0 ,0, viol_0);
$width(negedge RD &&& cond31 , 0 ,0, viol_0);
$width(negedge RD &&& cond29 , 0 ,0, viol_0);
$width(negedge RD &&& cond28 , 0 ,0, viol_0);
$width(negedge RD &&& cond30 , 0 ,0, viol_0);
$width(negedge RD &&& cond27 , 0 ,0, viol_0);
$width(negedge RD &&& cond26 , 0 ,0, viol_0);
$width(negedge RD &&& cond25 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond18 , posedge RD &&& cond18 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$setuphold(posedge SD &&& cond17 , posedge RD &&& cond17 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$recrem(posedge RD &&& cond16 , posedge CK &&& cond16 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond14 , posedge CK &&& cond14 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond24 , 0 ,0, viol_0);
$width(negedge RD &&& cond23 , 0 ,0, viol_0);
$width(negedge RD &&& cond22 , 0 ,0, viol_0);
$width(negedge RD &&& cond21 , 0 ,0, viol_0);
$width(negedge RD &&& cond20 , 0 ,0, viol_0);
$width(negedge RD &&& cond19 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond15 , posedge CK &&& cond15 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond13 , posedge CK &&& cond13 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge SD &&& CK , posedge RD &&& CK , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$setuphold(posedge RD &&& cond54 , posedge SD &&& cond54 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond70 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond53 , posedge SD &&& cond53 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond69 , 0 ,0, viol_0);
$width(negedge SD &&& cond68 , 0 ,0, viol_0);
$width(negedge SD &&& cond67 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond52 , posedge SD &&& cond52 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond51 , posedge SD &&& cond51 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond65 , 0 ,0, viol_0);
$width(negedge SD &&& cond64 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond49 , posedge SD &&& cond49 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond48 , posedge SD &&& cond48 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond50 , posedge SD &&& cond50 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond66 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond47 , posedge SD &&& cond47 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond63 , 0 ,0, viol_0);
$width(negedge SD &&& cond62 , 0 ,0, viol_0);
$width(negedge SD &&& cond61 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond46 , posedge SD &&& cond46 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond45 , posedge SD &&& cond45 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$recrem(posedge SD &&& cond38 , posedge CK &&& cond38 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond37 , posedge CK &&& cond37 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond36 , posedge CK &&& cond36 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$setuphold(posedge RD &&& cond44 , posedge SD &&& cond44 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond60 , 0 ,0, viol_0);
$width(negedge SD &&& cond59 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond43 , posedge SD &&& cond43 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond42 , posedge SD &&& cond42 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond58 , 0 ,0, viol_0);
$width(negedge SD &&& cond57 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond41 , posedge SD &&& cond41 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond40 , posedge SD &&& cond40 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond56 , 0 ,0, viol_0);
$width(negedge SD &&& cond55 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond39 , posedge SD &&& cond39 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$recrem(posedge SD &&& cond35 , posedge CK &&& cond35 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$setuphold(posedge CK &&& cond5 , posedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , negedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , negedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , posedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , negedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , posedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , negedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , posedge SI &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond12 , negedge SI &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond11 , posedge SI &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond11 , negedge SI &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond10 , posedge SI &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond10 , negedge SI &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , posedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , negedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_FSDPHRBSBQ_DL50_2

//%BEGIN SEH_FSDPHRBSBQO_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPHRBSBQO_L50_1 (Q, SO, CK, D, SI, SE, EN, RD, SD, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, EN, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_EN, delayed_RD,
        delayed_SD;
   wire int_res__D, int_res__S, int_res__RD, int_res__SD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPHRBSBQO_L50_1 (Q, SO, CK, D, SI, SE, EN, RD, SD, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, EN, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_EN, delayed_RD,
        delayed_SD;
   wire int_res__D, int_res__S, int_res__RD, int_res__SD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_EN, EN_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif


   scl40_htc50_mux2 (int_res__D, int_res_iq, delayed_D, delayed_EN);
   scl40_htc50_mux2 (int_res__S, delayed_SI, int_res__D, delayed_SE);
   not (int_res__RD, delayed_RD);
   not (int_res__SD, delayed_SD);
   scl40_htc50_dff_sr_err (xcr_0, delayed_CK, int_res__S, int_res__SD, int_res__RD);
   scl40_htc50_dff_sr_0 (int_res_iq, viol_0, delayed_CK, int_res__S, int_res__SD, int_res__RD, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
        buf #1 (SO, int_res_iq);

   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, EN);
not U1 (_net_1, D);
not U2 (_net_2, SE);
and U3 (cond52, _net_0, _net_1, RD, SD, _net_2);
not U4 (_net_3, EN);
not U5 (_net_4, SE);
and U6 (cond50, _net_3, D, RD, SD, _net_4);
not U7 (_net_5, SI);
and U8 (cond51, SD, RD, SE, _net_5);
and U9 (cond49, SD, RD, SE, SI);
not U10 (_net_6, EN);
not U11 (_net_7, SE);
and U12 (cond0, RD, _net_6, SD, _net_7);
not U13 (_net_8, EN);
not U14 (_net_9, SE);
and U15 (cond0, RD, _net_8, SD, _net_9);
not U16 (_net_10, D);
not U17 (_net_11, SE);
and U18 (cond2, RD, _net_10, SD, _net_11);
not U19 (_net_12, D);
not U20 (_net_13, SE);
and U21 (cond2, RD, _net_12, SD, _net_13);
not U22 (_net_14, SE);
and U23 (cond1, RD, D, SD, _net_14);
not U24 (_net_15, SE);
and U25 (cond1, RD, D, SD, _net_15);
not U26 (_net_16, D);
not U27 (_net_17, CK);
not U28 (_net_18, EN);
not U29 (_net_19, SE);
and U30 (cond23, _net_16, _net_17, _net_18, _net_19);
not U31 (_net_20, D);
not U32 (_net_21, CK);
not U33 (_net_22, EN);
not U34 (_net_23, SE);
and U35 (cond23, _net_20, _net_21, _net_22, _net_23);
not U36 (_net_24, D);
not U37 (_net_25, CK);
not U38 (_net_26, EN);
not U39 (_net_27, SE);
and U40 (cond33, _net_24, _net_25, _net_26, SD, _net_27);
not U41 (_net_28, D);
not U42 (_net_29, CK);
not U43 (_net_30, SE);
and U44 (cond22, _net_28, _net_29, EN, _net_30);
not U45 (_net_31, D);
not U46 (_net_32, CK);
not U47 (_net_33, SE);
and U48 (cond22, _net_31, _net_32, EN, _net_33);
not U49 (_net_34, D);
not U50 (_net_35, CK);
not U51 (_net_36, SE);
and U52 (cond32, _net_34, _net_35, EN, SD, _net_36);
not U53 (_net_37, CK);
not U54 (_net_38, EN);
not U55 (_net_39, SE);
and U56 (cond21, D, _net_37, _net_38, _net_39);
not U57 (_net_40, CK);
not U58 (_net_41, EN);
not U59 (_net_42, SE);
and U60 (cond21, D, _net_40, _net_41, _net_42);
not U61 (_net_43, CK);
not U62 (_net_44, EN);
not U63 (_net_45, SE);
and U64 (cond31, D, _net_43, _net_44, SD, _net_45);
not U65 (_net_46, CK);
not U66 (_net_47, SE);
and U67 (cond20, D, _net_46, EN, _net_47);
not U68 (_net_48, CK);
not U69 (_net_49, SE);
and U70 (cond20, D, _net_48, EN, _net_49);
not U71 (_net_50, CK);
not U72 (_net_51, SE);
and U73 (cond30, D, _net_50, EN, SD, _net_51);
not U74 (_net_52, CK);
not U75 (_net_53, SI);
and U76 (cond29, SD, _net_52, SE, _net_53);
not U77 (_net_54, CK);
and U78 (cond28, SD, _net_54, SE, SI);
not U79 (_net_55, CK);
not U80 (_net_56, SI);
and U81 (cond19, SE, _net_55, _net_56);
not U82 (_net_57, CK);
not U83 (_net_58, SI);
and U84 (cond19, SE, _net_57, _net_58);
not U85 (_net_59, CK);
and U86 (cond18, SE, _net_59, SI);
not U87 (_net_60, CK);
and U88 (cond18, SE, _net_60, SI);
not U89 (_net_61, D);
and U90 (cond13, SD, _net_61, SE, SI);
not U91 (_net_62, D);
and U92 (cond13, SD, _net_62, SE, SI);
not U93 (_net_63, D);
not U94 (_net_64, SE);
and U95 (cond17, _net_63, CK, EN, _net_64);
not U96 (_net_65, D);
not U97 (_net_66, SE);
and U98 (cond17, _net_65, CK, EN, _net_66);
not U99 (_net_67, D);
not U100 (_net_68, SE);
and U101 (cond27, _net_67, CK, EN, SD, _net_68);
not U102 (_net_69, EN);
not U103 (_net_70, SE);
and U104 (cond16, _net_69, CK, _net_70);
not U105 (_net_71, EN);
not U106 (_net_72, SE);
and U107 (cond16, _net_71, CK, _net_72);
not U108 (_net_73, EN);
not U109 (_net_74, SE);
and U110 (cond26, _net_73, CK, SD, _net_74);
not U111 (_net_75, SE);
and U112 (cond15, D, CK, EN, _net_75);
not U113 (_net_76, SE);
and U114 (cond15, D, CK, EN, _net_76);
not U115 (_net_77, SE);
and U116 (cond25, D, CK, EN, SD, _net_77);
and U117 (cond24, SD, CK, SE);
and U118 (cond14, SE, CK);
and U119 (cond14, SE, CK);
not U120 (_net_78, EN);
not U121 (_net_79, SE);
and U122 (cond12, _net_78, D, SD, _net_79);
not U123 (_net_80, EN);
not U124 (_net_81, SE);
and U125 (cond12, _net_80, D, SD, _net_81);
and U126 (cond11, SD, D, SE, SI);
and U127 (cond11, SD, D, SE, SI);
not U128 (_net_82, D);
not U129 (_net_83, CK);
not U130 (_net_84, EN);
not U131 (_net_85, SE);
and U132 (cond48, _net_82, _net_83, _net_84, RD, _net_85);
not U133 (_net_86, D);
not U134 (_net_87, CK);
not U135 (_net_88, SE);
and U136 (cond47, _net_86, _net_87, EN, RD, _net_88);
not U137 (_net_89, CK);
not U138 (_net_90, EN);
not U139 (_net_91, SE);
and U140 (cond46, D, _net_89, _net_90, RD, _net_91);
not U141 (_net_92, CK);
not U142 (_net_93, SE);
and U143 (cond45, D, _net_92, EN, RD, _net_93);
not U144 (_net_94, CK);
not U145 (_net_95, SE);
and U146 (_net_96, D, _net_94, EN, _net_95);
not U147 (_net_97, CK);
not U148 (_net_98, SI);
and U149 (_net_99, D, _net_97, EN, SE, _net_98);
not U150 (_net_100, CK);
not U151 (_net_101, EN);
not U152 (_net_102, SI);
and U153 (_net_103, D, _net_100, _net_101, SE, _net_102);
not U154 (_net_104, D);
not U155 (_net_105, CK);
not U156 (_net_106, SI);
and U157 (_net_107, _net_104, _net_105, SE, _net_106);
not U158 (_net_108, D);
not U159 (_net_109, CK);
not U160 (_net_110, SE);
and U161 (_net_111, _net_108, _net_109, _net_110);
or U162 (cond37, _net_96, _net_99, _net_103, _net_107, _net_111);
not U163 (_net_112, CK);
not U164 (_net_113, SE);
and U165 (_net_114, D, _net_112, EN, _net_113);
not U166 (_net_115, CK);
not U167 (_net_116, SI);
and U168 (_net_117, D, _net_115, EN, SE, _net_116);
not U169 (_net_118, CK);
not U170 (_net_119, EN);
not U171 (_net_120, SI);
and U172 (_net_121, D, _net_118, _net_119, SE, _net_120);
not U173 (_net_122, D);
not U174 (_net_123, CK);
not U175 (_net_124, SI);
and U176 (_net_125, _net_122, _net_123, SE, _net_124);
not U177 (_net_126, D);
not U178 (_net_127, CK);
not U179 (_net_128, SE);
and U180 (_net_129, _net_126, _net_127, _net_128);
or U181 (cond37, _net_114, _net_117, _net_121, _net_125, _net_129);
not U182 (_net_130, CK);
not U183 (_net_131, EN);
and U184 (_net_132, D, _net_130, _net_131, SE, SI);
not U185 (_net_133, CK);
and U186 (_net_134, D, _net_133, EN, SE, SI);
not U187 (_net_135, CK);
not U188 (_net_136, EN);
not U189 (_net_137, SE);
and U190 (_net_138, D, _net_135, _net_136, _net_137);
not U191 (_net_139, D);
not U192 (_net_140, CK);
and U193 (_net_141, _net_139, _net_140, SE, SI);
or U194 (cond38, _net_132, _net_134, _net_138, _net_141);
not U195 (_net_142, CK);
not U196 (_net_143, EN);
and U197 (_net_144, D, _net_142, _net_143, SE, SI);
not U198 (_net_145, CK);
and U199 (_net_146, D, _net_145, EN, SE, SI);
not U200 (_net_147, CK);
not U201 (_net_148, EN);
not U202 (_net_149, SE);
and U203 (_net_150, D, _net_147, _net_148, _net_149);
not U204 (_net_151, D);
not U205 (_net_152, CK);
and U206 (_net_153, _net_151, _net_152, SE, SI);
or U207 (cond38, _net_144, _net_146, _net_150, _net_153);
not U208 (_net_154, CK);
not U209 (_net_155, SI);
and U210 (cond44, RD, _net_154, SE, _net_155);
not U211 (_net_156, CK);
and U212 (cond43, RD, _net_156, SE, SI);
not U213 (_net_157, EN);
not U214 (_net_158, D);
not U215 (_net_159, SE);
and U216 (cond36, _net_157, _net_158, RD, _net_159);
not U217 (_net_160, EN);
not U218 (_net_161, D);
not U219 (_net_162, SE);
and U220 (cond36, _net_160, _net_161, RD, _net_162);
not U221 (_net_163, D);
not U222 (_net_164, SI);
and U223 (cond35, RD, _net_163, SE, _net_164);
not U224 (_net_165, D);
not U225 (_net_166, SI);
and U226 (cond35, RD, _net_165, SE, _net_166);
not U227 (_net_167, D);
not U228 (_net_168, SE);
and U229 (cond42, _net_167, CK, EN, RD, _net_168);
not U230 (_net_169, EN);
not U231 (_net_170, SE);
and U232 (cond41, _net_169, CK, RD, _net_170);
not U233 (_net_171, SE);
and U234 (cond40, D, CK, EN, RD, _net_171);
and U235 (cond39, RD, CK, SE);
not U236 (_net_172, SI);
and U237 (cond34, RD, D, SE, _net_172);
not U238 (_net_173, SI);
and U239 (cond34, RD, D, SE, _net_173);
not U240 (_net_174, EN);
not U241 (_net_175, D);
and U242 (cond5, _net_174, _net_175, RD, SD, SI);
not U243 (_net_176, EN);
not U244 (_net_177, D);
and U245 (cond5, _net_176, _net_177, RD, SD, SI);
not U246 (_net_178, D);
not U247 (_net_179, SI);
and U248 (cond8, EN, _net_178, RD, SD, _net_179);
not U249 (_net_180, D);
not U250 (_net_181, SI);
and U251 (cond8, EN, _net_180, RD, SD, _net_181);
not U252 (_net_182, D);
and U253 (cond4, EN, _net_182, RD, SD, SI);
not U254 (_net_183, D);
and U255 (cond4, EN, _net_183, RD, SD, SI);
not U256 (_net_184, EN);
not U257 (_net_185, SI);
and U258 (cond7, _net_184, D, RD, SD, _net_185);
not U259 (_net_186, EN);
not U260 (_net_187, SI);
and U261 (cond7, _net_186, D, RD, SD, _net_187);
not U262 (_net_188, SI);
and U263 (cond6, EN, D, RD, SD, _net_188);
not U264 (_net_189, SI);
and U265 (cond6, EN, D, RD, SD, _net_189);
and U266 (cond3, EN, D, RD, SD, SI);
and U267 (cond3, EN, D, RD, SD, SI);
not U268 (_net_190, D);
and U269 (cond10, RD, _net_190, SD, SE);
not U270 (_net_191, D);
and U271 (cond10, RD, _net_191, SD, SE);
and U272 (cond9, RD, D, SD, SE);
and U273 (cond9, RD, D, SD, SE);

specify
if ((~(CK) & ~(D) & ~(EN) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & EN & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & ~(EN) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & EN & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & RD & SE & ~(SI))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & RD & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & ~(D) & EN & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & ~(EN) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & D & EN & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & RD & SE)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & ~(EN) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & EN & ~(SD) & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & EN & ~(SD) & ~(SE))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & EN & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(EN) & ~(SD) & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(EN) & ~(SD) & ~(SE))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & ~(SD) & SE)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD) & SE)) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & D & ~(EN) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & EN & ~(SD) & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & EN & ~(SD) & ~(SE))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & D & EN & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & SD & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & SD & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & EN & ~(SD) & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & EN & ~(SD) & ~(SE))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & ~(D) & EN & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(EN) & ~(SD) & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(EN) & ~(SD) & ~(SE))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & ~(EN) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD) & SE)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD) & SE)) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & D & EN & ~(SD) & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & EN & ~(SD) & ~(SE))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & D & EN & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & SD & SE)) (negedge RD => (Q +: 1'b0))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
if ((~(CK) & ~(D) & ~(EN) & RD & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & EN & RD & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((~(CK) & D & ~(EN) & RD & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((~(CK) & D & EN & RD & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((~(CK) & RD & SE & ~(SI))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((~(CK) & RD & SE & SI)) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((CK & ~(D) & EN & RD & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((CK & ~(EN) & RD & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((CK & D & EN & RD & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((CK & RD & SE)) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & ~(EN) & SD & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & EN & ~(SD) & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & EN & ~(SD) & ~(SE))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & EN & SD & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(EN) & ~(SD) & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(EN) & ~(SD) & ~(SE))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((~(CK) & ~(SD) & SE)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD) & SE)) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((~(CK) & D & ~(EN) & SD & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & EN & ~(SD) & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & EN & ~(SD) & ~(SE))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((~(CK) & D & EN & SD & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & SD & SE & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & SD & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(D) & EN & ~(SD) & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(D) & EN & ~(SD) & ~(SE))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((CK & ~(D) & EN & SD & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(EN) & ~(SD) & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(EN) & ~(SD) & ~(SE))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((CK & ~(EN) & SD & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(SD) & SE)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(SD) & SE)) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((CK & D & EN & ~(SD) & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & D & EN & ~(SD) & ~(SE))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((CK & D & EN & SD & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & SD & SE)) (negedge RD => (SO +: 1'b0))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond52 , 0 ,0, viol_0);
$width(negedge CK &&& cond52 , 0 ,0, viol_0);
$width(posedge CK &&& cond50 , 0 ,0, viol_0);
$width(negedge CK &&& cond50 , 0 ,0, viol_0);
$width(posedge CK &&& cond51 , 0 ,0, viol_0);
$width(negedge CK &&& cond51 , 0 ,0, viol_0);
$width(posedge CK &&& cond49 , 0 ,0, viol_0);
$width(negedge CK &&& cond49 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond2 , posedge EN &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond2 , negedge EN &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond1 , posedge EN &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond1 , negedge EN &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge SD &&& cond23 , posedge RD &&& cond23 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond33 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond22 , posedge RD &&& cond22 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond32 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond21 , posedge RD &&& cond21 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond31 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond20 , posedge RD &&& cond20 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond30 , 0 ,0, viol_0);
$width(negedge RD &&& cond29 , 0 ,0, viol_0);
$width(negedge RD &&& cond28 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond19 , posedge RD &&& cond19 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$setuphold(posedge SD &&& cond18 , posedge RD &&& cond18 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$recrem(posedge RD &&& cond13 , posedge CK &&& cond13 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge SD &&& cond17 , posedge RD &&& cond17 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond27 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond16 , posedge RD &&& cond16 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond26 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond15 , posedge RD &&& cond15 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond25 , 0 ,0, viol_0);
$width(negedge RD &&& cond24 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond14 , posedge RD &&& cond14 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$recrem(posedge RD &&& cond12 , posedge CK &&& cond12 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond11 , posedge CK &&& cond11 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge SD &&& cond48 , 0 ,0, viol_0);
$width(negedge SD &&& cond47 , 0 ,0, viol_0);
$width(negedge SD &&& cond46 , 0 ,0, viol_0);
$width(negedge SD &&& cond45 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond37 , posedge SD &&& cond37 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond38 , posedge SD &&& cond38 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond44 , 0 ,0, viol_0);
$width(negedge SD &&& cond43 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond36 , posedge CK &&& cond36 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond35 , posedge CK &&& cond35 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond42 , 0 ,0, viol_0);
$width(negedge SD &&& cond41 , 0 ,0, viol_0);
$width(negedge SD &&& cond40 , 0 ,0, viol_0);
$width(negedge SD &&& cond39 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond34 , posedge CK &&& cond34 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$setuphold(posedge RD &&& CK , posedge SD &&& CK , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge CK &&& cond5 , posedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , negedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , negedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , posedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , negedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , posedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , negedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond10 , posedge SI &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond10 , negedge SI &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , posedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , negedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPHRBSBQO_L50_1

//%BEGIN SEH_FSDPHRBSBQO_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPHRBSBQO_L50_2 (Q, SO, CK, D, SI, SE, EN, RD, SD, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, EN, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_EN, delayed_RD,
        delayed_SD;
   wire int_res__D, int_res__S, int_res__RD, int_res__SD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPHRBSBQO_L50_2 (Q, SO, CK, D, SI, SE, EN, RD, SD, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, EN, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_EN, delayed_RD,
        delayed_SD;
   wire int_res__D, int_res__S, int_res__RD, int_res__SD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (EN_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (EN_org, EN, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_EN, EN_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif


   scl40_htc50_mux2 (int_res__D, int_res_iq, delayed_D, delayed_EN);
   scl40_htc50_mux2 (int_res__S, delayed_SI, int_res__D, delayed_SE);
   not (int_res__RD, delayed_RD);
   not (int_res__SD, delayed_SD);
   scl40_htc50_dff_sr_err (xcr_0, delayed_CK, int_res__S, int_res__SD, int_res__RD);
   scl40_htc50_dff_sr_0 (int_res_iq, viol_0, delayed_CK, int_res__S, int_res__SD, int_res__RD, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
        buf #1 (SO, int_res_iq);

   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, EN);
not U1 (_net_1, D);
not U2 (_net_2, SE);
and U3 (cond52, _net_0, _net_1, RD, SD, _net_2);
not U4 (_net_3, EN);
not U5 (_net_4, SE);
and U6 (cond50, _net_3, D, RD, SD, _net_4);
not U7 (_net_5, SI);
and U8 (cond51, SD, RD, SE, _net_5);
and U9 (cond49, SD, RD, SE, SI);
not U10 (_net_6, EN);
not U11 (_net_7, SE);
and U12 (cond0, RD, _net_6, SD, _net_7);
not U13 (_net_8, EN);
not U14 (_net_9, SE);
and U15 (cond0, RD, _net_8, SD, _net_9);
not U16 (_net_10, D);
not U17 (_net_11, SE);
and U18 (cond2, RD, _net_10, SD, _net_11);
not U19 (_net_12, D);
not U20 (_net_13, SE);
and U21 (cond2, RD, _net_12, SD, _net_13);
not U22 (_net_14, SE);
and U23 (cond1, RD, D, SD, _net_14);
not U24 (_net_15, SE);
and U25 (cond1, RD, D, SD, _net_15);
not U26 (_net_16, D);
not U27 (_net_17, CK);
not U28 (_net_18, EN);
not U29 (_net_19, SE);
and U30 (cond23, _net_16, _net_17, _net_18, _net_19);
not U31 (_net_20, D);
not U32 (_net_21, CK);
not U33 (_net_22, EN);
not U34 (_net_23, SE);
and U35 (cond23, _net_20, _net_21, _net_22, _net_23);
not U36 (_net_24, D);
not U37 (_net_25, CK);
not U38 (_net_26, EN);
not U39 (_net_27, SE);
and U40 (cond33, _net_24, _net_25, _net_26, SD, _net_27);
not U41 (_net_28, D);
not U42 (_net_29, CK);
not U43 (_net_30, SE);
and U44 (cond22, _net_28, _net_29, EN, _net_30);
not U45 (_net_31, D);
not U46 (_net_32, CK);
not U47 (_net_33, SE);
and U48 (cond22, _net_31, _net_32, EN, _net_33);
not U49 (_net_34, D);
not U50 (_net_35, CK);
not U51 (_net_36, SE);
and U52 (cond32, _net_34, _net_35, EN, SD, _net_36);
not U53 (_net_37, CK);
not U54 (_net_38, EN);
not U55 (_net_39, SE);
and U56 (cond21, D, _net_37, _net_38, _net_39);
not U57 (_net_40, CK);
not U58 (_net_41, EN);
not U59 (_net_42, SE);
and U60 (cond21, D, _net_40, _net_41, _net_42);
not U61 (_net_43, CK);
not U62 (_net_44, EN);
not U63 (_net_45, SE);
and U64 (cond31, D, _net_43, _net_44, SD, _net_45);
not U65 (_net_46, CK);
not U66 (_net_47, SE);
and U67 (cond20, D, _net_46, EN, _net_47);
not U68 (_net_48, CK);
not U69 (_net_49, SE);
and U70 (cond20, D, _net_48, EN, _net_49);
not U71 (_net_50, CK);
not U72 (_net_51, SE);
and U73 (cond30, D, _net_50, EN, SD, _net_51);
not U74 (_net_52, CK);
not U75 (_net_53, SI);
and U76 (cond29, SD, _net_52, SE, _net_53);
not U77 (_net_54, CK);
and U78 (cond28, SD, _net_54, SE, SI);
not U79 (_net_55, CK);
not U80 (_net_56, SI);
and U81 (cond19, SE, _net_55, _net_56);
not U82 (_net_57, CK);
not U83 (_net_58, SI);
and U84 (cond19, SE, _net_57, _net_58);
not U85 (_net_59, CK);
and U86 (cond18, SE, _net_59, SI);
not U87 (_net_60, CK);
and U88 (cond18, SE, _net_60, SI);
not U89 (_net_61, D);
and U90 (cond13, SD, _net_61, SE, SI);
not U91 (_net_62, D);
and U92 (cond13, SD, _net_62, SE, SI);
not U93 (_net_63, D);
not U94 (_net_64, SE);
and U95 (cond17, _net_63, CK, EN, _net_64);
not U96 (_net_65, D);
not U97 (_net_66, SE);
and U98 (cond17, _net_65, CK, EN, _net_66);
not U99 (_net_67, D);
not U100 (_net_68, SE);
and U101 (cond27, _net_67, CK, EN, SD, _net_68);
not U102 (_net_69, EN);
not U103 (_net_70, SE);
and U104 (cond16, _net_69, CK, _net_70);
not U105 (_net_71, EN);
not U106 (_net_72, SE);
and U107 (cond16, _net_71, CK, _net_72);
not U108 (_net_73, EN);
not U109 (_net_74, SE);
and U110 (cond26, _net_73, CK, SD, _net_74);
not U111 (_net_75, SE);
and U112 (cond15, D, CK, EN, _net_75);
not U113 (_net_76, SE);
and U114 (cond15, D, CK, EN, _net_76);
not U115 (_net_77, SE);
and U116 (cond25, D, CK, EN, SD, _net_77);
and U117 (cond24, SD, CK, SE);
and U118 (cond14, SE, CK);
and U119 (cond14, SE, CK);
not U120 (_net_78, EN);
not U121 (_net_79, SE);
and U122 (cond12, _net_78, D, SD, _net_79);
not U123 (_net_80, EN);
not U124 (_net_81, SE);
and U125 (cond12, _net_80, D, SD, _net_81);
and U126 (cond11, SD, D, SE, SI);
and U127 (cond11, SD, D, SE, SI);
not U128 (_net_82, D);
not U129 (_net_83, CK);
not U130 (_net_84, EN);
not U131 (_net_85, SE);
and U132 (cond48, _net_82, _net_83, _net_84, RD, _net_85);
not U133 (_net_86, D);
not U134 (_net_87, CK);
not U135 (_net_88, SE);
and U136 (cond47, _net_86, _net_87, EN, RD, _net_88);
not U137 (_net_89, CK);
not U138 (_net_90, EN);
not U139 (_net_91, SE);
and U140 (cond46, D, _net_89, _net_90, RD, _net_91);
not U141 (_net_92, CK);
not U142 (_net_93, SE);
and U143 (cond45, D, _net_92, EN, RD, _net_93);
not U144 (_net_94, CK);
not U145 (_net_95, SE);
and U146 (_net_96, D, _net_94, EN, _net_95);
not U147 (_net_97, CK);
not U148 (_net_98, SI);
and U149 (_net_99, D, _net_97, EN, SE, _net_98);
not U150 (_net_100, CK);
not U151 (_net_101, EN);
not U152 (_net_102, SI);
and U153 (_net_103, D, _net_100, _net_101, SE, _net_102);
not U154 (_net_104, D);
not U155 (_net_105, CK);
not U156 (_net_106, SI);
and U157 (_net_107, _net_104, _net_105, SE, _net_106);
not U158 (_net_108, D);
not U159 (_net_109, CK);
not U160 (_net_110, SE);
and U161 (_net_111, _net_108, _net_109, _net_110);
or U162 (cond37, _net_96, _net_99, _net_103, _net_107, _net_111);
not U163 (_net_112, CK);
not U164 (_net_113, SE);
and U165 (_net_114, D, _net_112, EN, _net_113);
not U166 (_net_115, CK);
not U167 (_net_116, SI);
and U168 (_net_117, D, _net_115, EN, SE, _net_116);
not U169 (_net_118, CK);
not U170 (_net_119, EN);
not U171 (_net_120, SI);
and U172 (_net_121, D, _net_118, _net_119, SE, _net_120);
not U173 (_net_122, D);
not U174 (_net_123, CK);
not U175 (_net_124, SI);
and U176 (_net_125, _net_122, _net_123, SE, _net_124);
not U177 (_net_126, D);
not U178 (_net_127, CK);
not U179 (_net_128, SE);
and U180 (_net_129, _net_126, _net_127, _net_128);
or U181 (cond37, _net_114, _net_117, _net_121, _net_125, _net_129);
not U182 (_net_130, CK);
not U183 (_net_131, EN);
and U184 (_net_132, D, _net_130, _net_131, SE, SI);
not U185 (_net_133, CK);
and U186 (_net_134, D, _net_133, EN, SE, SI);
not U187 (_net_135, CK);
not U188 (_net_136, EN);
not U189 (_net_137, SE);
and U190 (_net_138, D, _net_135, _net_136, _net_137);
not U191 (_net_139, D);
not U192 (_net_140, CK);
and U193 (_net_141, _net_139, _net_140, SE, SI);
or U194 (cond38, _net_132, _net_134, _net_138, _net_141);
not U195 (_net_142, CK);
not U196 (_net_143, EN);
and U197 (_net_144, D, _net_142, _net_143, SE, SI);
not U198 (_net_145, CK);
and U199 (_net_146, D, _net_145, EN, SE, SI);
not U200 (_net_147, CK);
not U201 (_net_148, EN);
not U202 (_net_149, SE);
and U203 (_net_150, D, _net_147, _net_148, _net_149);
not U204 (_net_151, D);
not U205 (_net_152, CK);
and U206 (_net_153, _net_151, _net_152, SE, SI);
or U207 (cond38, _net_144, _net_146, _net_150, _net_153);
not U208 (_net_154, CK);
not U209 (_net_155, SI);
and U210 (cond44, RD, _net_154, SE, _net_155);
not U211 (_net_156, CK);
and U212 (cond43, RD, _net_156, SE, SI);
not U213 (_net_157, EN);
not U214 (_net_158, D);
not U215 (_net_159, SE);
and U216 (cond36, _net_157, _net_158, RD, _net_159);
not U217 (_net_160, EN);
not U218 (_net_161, D);
not U219 (_net_162, SE);
and U220 (cond36, _net_160, _net_161, RD, _net_162);
not U221 (_net_163, D);
not U222 (_net_164, SI);
and U223 (cond35, RD, _net_163, SE, _net_164);
not U224 (_net_165, D);
not U225 (_net_166, SI);
and U226 (cond35, RD, _net_165, SE, _net_166);
not U227 (_net_167, D);
not U228 (_net_168, SE);
and U229 (cond42, _net_167, CK, EN, RD, _net_168);
not U230 (_net_169, EN);
not U231 (_net_170, SE);
and U232 (cond41, _net_169, CK, RD, _net_170);
not U233 (_net_171, SE);
and U234 (cond40, D, CK, EN, RD, _net_171);
and U235 (cond39, RD, CK, SE);
not U236 (_net_172, SI);
and U237 (cond34, RD, D, SE, _net_172);
not U238 (_net_173, SI);
and U239 (cond34, RD, D, SE, _net_173);
not U240 (_net_174, EN);
not U241 (_net_175, D);
and U242 (cond5, _net_174, _net_175, RD, SD, SI);
not U243 (_net_176, EN);
not U244 (_net_177, D);
and U245 (cond5, _net_176, _net_177, RD, SD, SI);
not U246 (_net_178, D);
not U247 (_net_179, SI);
and U248 (cond8, EN, _net_178, RD, SD, _net_179);
not U249 (_net_180, D);
not U250 (_net_181, SI);
and U251 (cond8, EN, _net_180, RD, SD, _net_181);
not U252 (_net_182, D);
and U253 (cond4, EN, _net_182, RD, SD, SI);
not U254 (_net_183, D);
and U255 (cond4, EN, _net_183, RD, SD, SI);
not U256 (_net_184, EN);
not U257 (_net_185, SI);
and U258 (cond7, _net_184, D, RD, SD, _net_185);
not U259 (_net_186, EN);
not U260 (_net_187, SI);
and U261 (cond7, _net_186, D, RD, SD, _net_187);
not U262 (_net_188, SI);
and U263 (cond6, EN, D, RD, SD, _net_188);
not U264 (_net_189, SI);
and U265 (cond6, EN, D, RD, SD, _net_189);
and U266 (cond3, EN, D, RD, SD, SI);
and U267 (cond3, EN, D, RD, SD, SI);
not U268 (_net_190, D);
and U269 (cond10, RD, _net_190, SD, SE);
not U270 (_net_191, D);
and U271 (cond10, RD, _net_191, SD, SE);
and U272 (cond9, RD, D, SD, SE);
and U273 (cond9, RD, D, SD, SE);

specify
if ((~(CK) & ~(D) & ~(EN) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & EN & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & ~(EN) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & EN & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & RD & SE & ~(SI))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & RD & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & ~(D) & EN & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & ~(EN) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & D & EN & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & RD & SE)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & ~(EN) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & EN & ~(SD) & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & EN & ~(SD) & ~(SE))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & EN & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(EN) & ~(SD) & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(EN) & ~(SD) & ~(SE))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & ~(SD) & SE)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD) & SE)) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & D & ~(EN) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & EN & ~(SD) & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & EN & ~(SD) & ~(SE))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & D & EN & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & SD & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & SD & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & EN & ~(SD) & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & EN & ~(SD) & ~(SE))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & ~(D) & EN & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(EN) & ~(SD) & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(EN) & ~(SD) & ~(SE))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & ~(EN) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD) & SE)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD) & SE)) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & D & EN & ~(SD) & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & EN & ~(SD) & ~(SE))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & D & EN & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & SD & SE)) (negedge RD => (Q +: 1'b0))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
if ((~(CK) & ~(D) & ~(EN) & RD & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & EN & RD & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((~(CK) & D & ~(EN) & RD & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((~(CK) & D & EN & RD & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((~(CK) & RD & SE & ~(SI))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((~(CK) & RD & SE & SI)) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((CK & ~(D) & EN & RD & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((CK & ~(EN) & RD & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((CK & D & EN & RD & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((CK & RD & SE)) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & ~(EN) & SD & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & EN & ~(SD) & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & EN & ~(SD) & ~(SE))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((~(CK) & ~(D) & EN & SD & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(EN) & ~(SD) & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(EN) & ~(SD) & ~(SE))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((~(CK) & ~(SD) & SE)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD) & SE)) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((~(CK) & D & ~(EN) & SD & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & EN & ~(SD) & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & EN & ~(SD) & ~(SE))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((~(CK) & D & EN & SD & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & SD & SE & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & SD & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(D) & EN & ~(SD) & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(D) & EN & ~(SD) & ~(SE))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((CK & ~(D) & EN & SD & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(EN) & ~(SD) & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(EN) & ~(SD) & ~(SE))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((CK & ~(EN) & SD & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(SD) & SE)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(SD) & SE)) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((CK & D & EN & ~(SD) & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & D & EN & ~(SD) & ~(SE))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((CK & D & EN & SD & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & SD & SE)) (negedge RD => (SO +: 1'b0))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond52 , 0 ,0, viol_0);
$width(negedge CK &&& cond52 , 0 ,0, viol_0);
$width(posedge CK &&& cond50 , 0 ,0, viol_0);
$width(negedge CK &&& cond50 , 0 ,0, viol_0);
$width(posedge CK &&& cond51 , 0 ,0, viol_0);
$width(negedge CK &&& cond51 , 0 ,0, viol_0);
$width(posedge CK &&& cond49 , 0 ,0, viol_0);
$width(negedge CK &&& cond49 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond2 , posedge EN &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond2 , negedge EN &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond1 , posedge EN &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge CK &&& cond1 , negedge EN &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_EN);
$setuphold(posedge SD &&& cond23 , posedge RD &&& cond23 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond33 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond22 , posedge RD &&& cond22 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond32 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond21 , posedge RD &&& cond21 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond31 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond20 , posedge RD &&& cond20 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond30 , 0 ,0, viol_0);
$width(negedge RD &&& cond29 , 0 ,0, viol_0);
$width(negedge RD &&& cond28 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond19 , posedge RD &&& cond19 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$setuphold(posedge SD &&& cond18 , posedge RD &&& cond18 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$recrem(posedge RD &&& cond13 , posedge CK &&& cond13 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge SD &&& cond17 , posedge RD &&& cond17 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond27 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond16 , posedge RD &&& cond16 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond26 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond15 , posedge RD &&& cond15 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge RD &&& cond25 , 0 ,0, viol_0);
$width(negedge RD &&& cond24 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond14 , posedge RD &&& cond14 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$recrem(posedge RD &&& cond12 , posedge CK &&& cond12 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond11 , posedge CK &&& cond11 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge SD &&& cond48 , 0 ,0, viol_0);
$width(negedge SD &&& cond47 , 0 ,0, viol_0);
$width(negedge SD &&& cond46 , 0 ,0, viol_0);
$width(negedge SD &&& cond45 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond37 , posedge SD &&& cond37 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond38 , posedge SD &&& cond38 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$width(negedge SD &&& cond44 , 0 ,0, viol_0);
$width(negedge SD &&& cond43 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond36 , posedge CK &&& cond36 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond35 , posedge CK &&& cond35 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond42 , 0 ,0, viol_0);
$width(negedge SD &&& cond41 , 0 ,0, viol_0);
$width(negedge SD &&& cond40 , 0 ,0, viol_0);
$width(negedge SD &&& cond39 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond34 , posedge CK &&& cond34 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$setuphold(posedge RD &&& CK , posedge SD &&& CK , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge CK &&& cond5 , posedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , negedge SE &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , negedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , posedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , negedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , posedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , negedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond10 , posedge SI &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond10 , negedge SI &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , posedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , negedge SI &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPHRBSBQO_L50_2

//%BEGIN SEH_FSDPMQ_DL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPMQ_DL50_1 (Q, CK, D0, D1, S, SI, SE, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D0, D1, S, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D0, delayed_D1,
	delayed_S, delayed_SI, delayed_SE;

   wire int_res__D, int_res__S, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPMQ_DL50_1 (Q, CK, D0, D1, S, SI, SE, VDD, VSS);
   output Q;
   input CK, D0, D1, S, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D0, delayed_D1,
	delayed_S, delayed_SI, delayed_SE;

   wire int_res__D, int_res__S, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D0, D0_org);
   buf (delayed_D1, D1_org);
   buf (delayed_S, S_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_D1, delayed_D0, delayed_S);
   scl40_htc50_mux2 (int_res__S, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__S);

   `ifdef VIRL_functiononly
      scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res__S, xcr_0);
   `else
      scl40_htc50_dff (Q, viol_0, delayed_CK, int_res__S, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
not U0 (_net_0, D1);
not U1 (_net_1, SI);
and U2 (_net_2, _net_0, D0, S, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, D1, D0, SE, _net_3);
not U5 (_net_5, D1);
not U6 (_net_6, SE);
and U7 (_net_7, _net_5, D0, S, _net_6);
not U8 (_net_8, D1);
not U9 (_net_9, S);
not U10 (_net_10, SI);
and U11 (_net_11, _net_8, D0, _net_9, SE, _net_10);
not U12 (_net_12, D0);
not U13 (_net_13, SI);
and U14 (_net_14, D1, _net_12, S, SE, _net_13);
not U15 (_net_15, D0);
not U16 (_net_16, S);
not U17 (_net_17, SI);
and U18 (_net_18, D1, _net_15, _net_16, SE, _net_17);
not U19 (_net_19, D0);
not U20 (_net_20, S);
not U21 (_net_21, SE);
and U22 (_net_22, D1, _net_19, _net_20, _net_21);
not U23 (_net_23, D1);
not U24 (_net_24, D0);
not U25 (_net_25, SI);
and U26 (_net_26, _net_23, _net_24, SE, _net_25);
not U27 (_net_27, D1);
not U28 (_net_28, D0);
not U29 (_net_29, SE);
and U30 (_net_30, _net_27, _net_28, _net_29);
or U31 (cond22, _net_2, _net_4, _net_7, _net_11, _net_14, _net_18, _net_22, _net_26, _net_30);
not U32 (_net_31, SE);
and U33 (_net_32, D1, D0, _net_31);
and U34 (_net_33, D1, D0, SE, SI);
not U35 (_net_34, D1);
and U36 (_net_35, _net_34, D0, S, SE, SI);
not U37 (_net_36, D1);
not U38 (_net_37, S);
and U39 (_net_38, _net_36, D0, _net_37, SE, SI);
not U40 (_net_39, D1);
not U41 (_net_40, S);
not U42 (_net_41, SE);
and U43 (_net_42, _net_39, D0, _net_40, _net_41);
not U44 (_net_43, D0);
and U45 (_net_44, D1, _net_43, S, SE, SI);
not U46 (_net_45, D0);
not U47 (_net_46, SE);
and U48 (_net_47, D1, _net_45, S, _net_46);
not U49 (_net_48, D0);
not U50 (_net_49, S);
and U51 (_net_50, D1, _net_48, _net_49, SE, SI);
not U52 (_net_51, D1);
not U53 (_net_52, D0);
and U54 (_net_53, _net_51, _net_52, SE, SI);
or U55 (cond21, _net_32, _net_33, _net_35, _net_38, _net_42, _net_44, _net_47, _net_50, _net_53);
not U56 (_net_54, S);
not U57 (_net_55, D1);
not U58 (_net_56, SE);
and U59 (cond1, _net_54, _net_55, _net_56);
not U60 (_net_57, S);
not U61 (_net_58, D1);
not U62 (_net_59, SE);
and U63 (cond1, _net_57, _net_58, _net_59);
not U64 (_net_60, S);
not U65 (_net_61, SE);
and U66 (cond0, _net_60, D1, _net_61);
not U67 (_net_62, S);
not U68 (_net_63, SE);
and U69 (cond0, _net_62, D1, _net_63);
not U70 (_net_64, D0);
not U71 (_net_65, SE);
and U72 (cond3, S, _net_64, _net_65);
not U73 (_net_66, D0);
not U74 (_net_67, SE);
and U75 (cond3, S, _net_66, _net_67);
not U76 (_net_68, SE);
and U77 (cond2, S, D0, _net_68);
not U78 (_net_69, SE);
and U79 (cond2, S, D0, _net_69);
not U80 (_net_70, D0);
not U81 (_net_71, SE);
and U82 (cond4, D1, _net_70, _net_71);
not U83 (_net_72, D0);
not U84 (_net_73, SE);
and U85 (cond4, D1, _net_72, _net_73);
not U86 (_net_74, D1);
not U87 (_net_75, SE);
and U88 (cond5, _net_74, D0, _net_75);
not U89 (_net_76, D1);
not U90 (_net_77, SE);
and U91 (cond5, _net_76, D0, _net_77);
not U92 (_net_78, D1);
not U93 (_net_79, D0);
not U94 (_net_80, S);
and U95 (cond9, _net_78, _net_79, _net_80, SI);
not U96 (_net_81, D1);
not U97 (_net_82, D0);
not U98 (_net_83, S);
and U99 (cond9, _net_81, _net_82, _net_83, SI);
not U100 (_net_84, D1);
not U101 (_net_85, D0);
and U102 (cond8, _net_84, _net_85, S, SI);
not U103 (_net_86, D1);
not U104 (_net_87, D0);
and U105 (cond8, _net_86, _net_87, S, SI);
not U106 (_net_88, D0);
not U107 (_net_89, S);
and U108 (cond7, D1, _net_88, _net_89, SI);
not U109 (_net_90, D0);
not U110 (_net_91, S);
and U111 (cond7, D1, _net_90, _net_91, SI);
not U112 (_net_92, D0);
not U113 (_net_93, SI);
and U114 (cond13, D1, _net_92, S, _net_93);
not U115 (_net_94, D0);
not U116 (_net_95, SI);
and U117 (cond13, D1, _net_94, S, _net_95);
not U118 (_net_96, D1);
not U119 (_net_97, S);
not U120 (_net_98, SI);
and U121 (cond12, _net_96, D0, _net_97, _net_98);
not U122 (_net_99, D1);
not U123 (_net_100, S);
not U124 (_net_101, SI);
and U125 (cond12, _net_99, D0, _net_100, _net_101);
not U126 (_net_102, D1);
and U127 (cond6, _net_102, D0, S, SI);
not U128 (_net_103, D1);
and U129 (cond6, _net_103, D0, S, SI);
not U130 (_net_104, S);
not U131 (_net_105, SI);
and U132 (cond11, D1, D0, _net_104, _net_105);
not U133 (_net_106, S);
not U134 (_net_107, SI);
and U135 (cond11, D1, D0, _net_106, _net_107);
not U136 (_net_108, SI);
and U137 (cond10, D1, D0, S, _net_108);
not U138 (_net_109, SI);
and U139 (cond10, D1, D0, S, _net_109);
not U140 (_net_110, D1);
not U141 (_net_111, D0);
and U142 (cond20, _net_110, _net_111, SE);
not U143 (_net_112, D1);
not U144 (_net_113, D0);
and U145 (cond20, _net_112, _net_113, SE);
not U146 (_net_114, D0);
not U147 (_net_115, S);
and U148 (cond19, D1, _net_114, _net_115, SE);
not U149 (_net_116, D0);
not U150 (_net_117, S);
and U151 (cond19, D1, _net_116, _net_117, SE);
not U152 (_net_118, D0);
and U153 (cond18, D1, _net_118, S, SE);
not U154 (_net_119, D0);
and U155 (cond18, D1, _net_119, S, SE);
not U156 (_net_120, D1);
not U157 (_net_121, S);
and U158 (cond17, _net_120, D0, _net_121, SE);
not U159 (_net_122, D1);
not U160 (_net_123, S);
and U161 (cond17, _net_122, D0, _net_123, SE);
not U162 (_net_124, D1);
and U163 (cond16, _net_124, D0, S, SE);
not U164 (_net_125, D1);
and U165 (cond16, _net_125, D0, S, SE);
not U166 (_net_126, S);
and U167 (cond15, D1, D0, _net_126, SE);
not U168 (_net_127, S);
and U169 (cond15, D1, D0, _net_127, SE);
and U170 (cond14, D1, D0, S, SE);
and U171 (cond14, D1, D0, S, SE);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond22 , 0 ,0, viol_0);
$width(negedge CK &&& cond22 , 0 ,0, viol_0);
$width(posedge CK &&& cond21 , 0 ,0, viol_0);
$width(negedge CK &&& cond21 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge D0 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond1 , negedge D0 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond0 , posedge D0 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond0 , negedge D0 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond3 , posedge D1 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond3 , negedge D1 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond2 , posedge D1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond2 , negedge D1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond4 , posedge S &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond4 , negedge S &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond5 , posedge S &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond5 , negedge S &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond9 , posedge SE &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond9 , negedge SE &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , negedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , posedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , negedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , posedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , negedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , posedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , negedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , posedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , negedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond11 , posedge SE &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond11 , negedge SE &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond10 , posedge SE &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond10 , negedge SE &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond20 , posedge SI &&& cond20 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond20 , negedge SI &&& cond20 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond19 , posedge SI &&& cond19 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond19 , negedge SI &&& cond19 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond18 , posedge SI &&& cond18 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond18 , negedge SI &&& cond18 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond17 , posedge SI &&& cond17 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond17 , negedge SI &&& cond17 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond16 , posedge SI &&& cond16 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond16 , negedge SI &&& cond16 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond15 , posedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond15 , negedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , posedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , negedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_FSDPMQ_DL50_1

//%BEGIN SEH_FSDPMQ_DL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPMQ_DL50_2 (Q, CK, D0, D1, S, SI, SE, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D0, D1, S, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D0, delayed_D1,
	delayed_S, delayed_SI, delayed_SE;

   wire int_res__D, int_res__S, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPMQ_DL50_2 (Q, CK, D0, D1, S, SI, SE, VDD, VSS);
   output Q;
   input CK, D0, D1, S, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D0, delayed_D1,
	delayed_S, delayed_SI, delayed_SE;

   wire int_res__D, int_res__S, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D0, D0_org);
   buf (delayed_D1, D1_org);
   buf (delayed_S, S_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_D1, delayed_D0, delayed_S);
   scl40_htc50_mux2 (int_res__S, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__S);

   `ifdef VIRL_functiononly
      scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res__S, xcr_0);
   `else
      scl40_htc50_dff (Q, viol_0, delayed_CK, int_res__S, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
not U0 (_net_0, D1);
not U1 (_net_1, SI);
and U2 (_net_2, _net_0, D0, S, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, D1, D0, SE, _net_3);
not U5 (_net_5, D1);
not U6 (_net_6, SE);
and U7 (_net_7, _net_5, D0, S, _net_6);
not U8 (_net_8, D1);
not U9 (_net_9, S);
not U10 (_net_10, SI);
and U11 (_net_11, _net_8, D0, _net_9, SE, _net_10);
not U12 (_net_12, D0);
not U13 (_net_13, SI);
and U14 (_net_14, D1, _net_12, S, SE, _net_13);
not U15 (_net_15, D0);
not U16 (_net_16, S);
not U17 (_net_17, SI);
and U18 (_net_18, D1, _net_15, _net_16, SE, _net_17);
not U19 (_net_19, D0);
not U20 (_net_20, S);
not U21 (_net_21, SE);
and U22 (_net_22, D1, _net_19, _net_20, _net_21);
not U23 (_net_23, D1);
not U24 (_net_24, D0);
not U25 (_net_25, SI);
and U26 (_net_26, _net_23, _net_24, SE, _net_25);
not U27 (_net_27, D1);
not U28 (_net_28, D0);
not U29 (_net_29, SE);
and U30 (_net_30, _net_27, _net_28, _net_29);
or U31 (cond21, _net_2, _net_4, _net_7, _net_11, _net_14, _net_18, _net_22, _net_26, _net_30);
not U32 (_net_31, SE);
and U33 (_net_32, D1, D0, _net_31);
and U34 (_net_33, D1, D0, SE, SI);
not U35 (_net_34, D1);
and U36 (_net_35, _net_34, D0, S, SE, SI);
not U37 (_net_36, D1);
not U38 (_net_37, S);
and U39 (_net_38, _net_36, D0, _net_37, SE, SI);
not U40 (_net_39, D1);
not U41 (_net_40, S);
not U42 (_net_41, SE);
and U43 (_net_42, _net_39, D0, _net_40, _net_41);
not U44 (_net_43, D0);
and U45 (_net_44, D1, _net_43, S, SE, SI);
not U46 (_net_45, D0);
not U47 (_net_46, SE);
and U48 (_net_47, D1, _net_45, S, _net_46);
not U49 (_net_48, D0);
not U50 (_net_49, S);
and U51 (_net_50, D1, _net_48, _net_49, SE, SI);
not U52 (_net_51, D1);
not U53 (_net_52, D0);
and U54 (_net_53, _net_51, _net_52, SE, SI);
or U55 (cond20, _net_32, _net_33, _net_35, _net_38, _net_42, _net_44, _net_47, _net_50, _net_53);
not U56 (_net_54, S);
not U57 (_net_55, D1);
not U58 (_net_56, SE);
and U59 (cond1, _net_54, _net_55, _net_56);
not U60 (_net_57, S);
not U61 (_net_58, D1);
not U62 (_net_59, SE);
and U63 (cond1, _net_57, _net_58, _net_59);
not U64 (_net_60, S);
not U65 (_net_61, SE);
and U66 (cond0, _net_60, D1, _net_61);
not U67 (_net_62, S);
not U68 (_net_63, SE);
and U69 (cond0, _net_62, D1, _net_63);
not U70 (_net_64, D0);
not U71 (_net_65, SE);
and U72 (cond3, S, _net_64, _net_65);
not U73 (_net_66, D0);
not U74 (_net_67, SE);
and U75 (cond3, S, _net_66, _net_67);
not U76 (_net_68, SE);
and U77 (cond2, S, D0, _net_68);
not U78 (_net_69, SE);
and U79 (cond2, S, D0, _net_69);
not U80 (_net_70, D0);
not U81 (_net_71, SE);
and U82 (cond4, D1, _net_70, _net_71);
not U83 (_net_72, D0);
not U84 (_net_73, SE);
and U85 (cond4, D1, _net_72, _net_73);
not U86 (_net_74, D1);
not U87 (_net_75, SE);
and U88 (cond5, _net_74, D0, _net_75);
not U89 (_net_76, D1);
not U90 (_net_77, SE);
and U91 (cond5, _net_76, D0, _net_77);
not U92 (_net_78, D1);
not U93 (_net_79, D0);
not U94 (_net_80, S);
and U95 (cond9, _net_78, _net_79, _net_80, SI);
not U96 (_net_81, D1);
not U97 (_net_82, D0);
not U98 (_net_83, S);
and U99 (cond9, _net_81, _net_82, _net_83, SI);
not U100 (_net_84, D1);
not U101 (_net_85, D0);
and U102 (cond8, _net_84, _net_85, S, SI);
not U103 (_net_86, D1);
not U104 (_net_87, D0);
and U105 (cond8, _net_86, _net_87, S, SI);
not U106 (_net_88, D0);
not U107 (_net_89, S);
and U108 (cond7, D1, _net_88, _net_89, SI);
not U109 (_net_90, D0);
not U110 (_net_91, S);
and U111 (cond7, D1, _net_90, _net_91, SI);
not U112 (_net_92, D0);
not U113 (_net_93, SI);
and U114 (cond13, D1, _net_92, S, _net_93);
not U115 (_net_94, D0);
not U116 (_net_95, SI);
and U117 (cond13, D1, _net_94, S, _net_95);
not U118 (_net_96, D1);
not U119 (_net_97, S);
not U120 (_net_98, SI);
and U121 (cond12, _net_96, D0, _net_97, _net_98);
not U122 (_net_99, D1);
not U123 (_net_100, S);
not U124 (_net_101, SI);
and U125 (cond12, _net_99, D0, _net_100, _net_101);
not U126 (_net_102, D1);
and U127 (cond6, _net_102, D0, S, SI);
not U128 (_net_103, D1);
and U129 (cond6, _net_103, D0, S, SI);
not U130 (_net_104, S);
not U131 (_net_105, SI);
and U132 (cond11, D1, D0, _net_104, _net_105);
not U133 (_net_106, S);
not U134 (_net_107, SI);
and U135 (cond11, D1, D0, _net_106, _net_107);
not U136 (_net_108, SI);
and U137 (cond10, D1, D0, S, _net_108);
not U138 (_net_109, SI);
and U139 (cond10, D1, D0, S, _net_109);
not U140 (_net_110, D1);
not U141 (_net_111, D0);
and U142 (cond19, _net_110, _net_111, SE);
not U143 (_net_112, D1);
not U144 (_net_113, D0);
and U145 (cond19, _net_112, _net_113, SE);
not U146 (_net_114, D0);
not U147 (_net_115, S);
and U148 (cond18, D1, _net_114, _net_115, SE);
not U149 (_net_116, D0);
not U150 (_net_117, S);
and U151 (cond18, D1, _net_116, _net_117, SE);
not U152 (_net_118, D0);
and U153 (cond17, D1, _net_118, S, SE);
not U154 (_net_119, D0);
and U155 (cond17, D1, _net_119, S, SE);
not U156 (_net_120, D1);
not U157 (_net_121, S);
and U158 (cond16, _net_120, D0, _net_121, SE);
not U159 (_net_122, D1);
not U160 (_net_123, S);
and U161 (cond16, _net_122, D0, _net_123, SE);
not U162 (_net_124, D1);
and U163 (cond15, _net_124, D0, S, SE);
not U164 (_net_125, D1);
and U165 (cond15, _net_125, D0, S, SE);
and U166 (cond14, D1, D0, SE);
and U167 (cond14, D1, D0, SE);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond21 , 0 ,0, viol_0);
$width(negedge CK &&& cond21 , 0 ,0, viol_0);
$width(posedge CK &&& cond20 , 0 ,0, viol_0);
$width(negedge CK &&& cond20 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge D0 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond1 , negedge D0 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond0 , posedge D0 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond0 , negedge D0 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond3 , posedge D1 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond3 , negedge D1 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond2 , posedge D1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond2 , negedge D1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond4 , posedge S &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond4 , negedge S &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond5 , posedge S &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond5 , negedge S &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond9 , posedge SE &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond9 , negedge SE &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , negedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , posedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , negedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , posedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , negedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , posedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , negedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , posedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , negedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond11 , posedge SE &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond11 , negedge SE &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond10 , posedge SE &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond10 , negedge SE &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond19 , posedge SI &&& cond19 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond19 , negedge SI &&& cond19 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond18 , posedge SI &&& cond18 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond18 , negedge SI &&& cond18 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond17 , posedge SI &&& cond17 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond17 , negedge SI &&& cond17 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond16 , posedge SI &&& cond16 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond16 , negedge SI &&& cond16 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond15 , posedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond15 , negedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , posedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , negedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_FSDPMQ_DL50_2

//%BEGIN SEH_FSDPMQ_DL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPMQ_DL50_4 (Q, CK, D0, D1, S, SI, SE, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D0, D1, S, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D0, delayed_D1,
	delayed_S, delayed_SI, delayed_SE;

   wire int_res__D, int_res__S, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPMQ_DL50_4 (Q, CK, D0, D1, S, SI, SE, VDD, VSS);
   output Q;
   input CK, D0, D1, S, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D0, delayed_D1,
	delayed_S, delayed_SI, delayed_SE;

   wire int_res__D, int_res__S, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D0, D0_org);
   buf (delayed_D1, D1_org);
   buf (delayed_S, S_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_D1, delayed_D0, delayed_S);
   scl40_htc50_mux2 (int_res__S, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__S);

   `ifdef VIRL_functiononly
      scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res__S, xcr_0);
   `else
      scl40_htc50_dff (Q, viol_0, delayed_CK, int_res__S, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
not U0 (_net_0, D1);
not U1 (_net_1, SI);
and U2 (_net_2, _net_0, D0, S, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, D1, D0, SE, _net_3);
not U5 (_net_5, D1);
not U6 (_net_6, SE);
and U7 (_net_7, _net_5, D0, S, _net_6);
not U8 (_net_8, D1);
not U9 (_net_9, S);
not U10 (_net_10, SI);
and U11 (_net_11, _net_8, D0, _net_9, SE, _net_10);
not U12 (_net_12, D0);
not U13 (_net_13, SI);
and U14 (_net_14, D1, _net_12, S, SE, _net_13);
not U15 (_net_15, D0);
not U16 (_net_16, S);
not U17 (_net_17, SI);
and U18 (_net_18, D1, _net_15, _net_16, SE, _net_17);
not U19 (_net_19, D0);
not U20 (_net_20, S);
not U21 (_net_21, SE);
and U22 (_net_22, D1, _net_19, _net_20, _net_21);
not U23 (_net_23, D1);
not U24 (_net_24, D0);
not U25 (_net_25, SI);
and U26 (_net_26, _net_23, _net_24, SE, _net_25);
not U27 (_net_27, D1);
not U28 (_net_28, D0);
not U29 (_net_29, SE);
and U30 (_net_30, _net_27, _net_28, _net_29);
or U31 (cond21, _net_2, _net_4, _net_7, _net_11, _net_14, _net_18, _net_22, _net_26, _net_30);
not U32 (_net_31, SE);
and U33 (_net_32, D1, D0, _net_31);
and U34 (_net_33, D1, D0, SE, SI);
not U35 (_net_34, D1);
and U36 (_net_35, _net_34, D0, S, SE, SI);
not U37 (_net_36, D1);
not U38 (_net_37, S);
and U39 (_net_38, _net_36, D0, _net_37, SE, SI);
not U40 (_net_39, D1);
not U41 (_net_40, S);
not U42 (_net_41, SE);
and U43 (_net_42, _net_39, D0, _net_40, _net_41);
not U44 (_net_43, D0);
and U45 (_net_44, D1, _net_43, S, SE, SI);
not U46 (_net_45, D0);
not U47 (_net_46, SE);
and U48 (_net_47, D1, _net_45, S, _net_46);
not U49 (_net_48, D0);
not U50 (_net_49, S);
and U51 (_net_50, D1, _net_48, _net_49, SE, SI);
not U52 (_net_51, D1);
not U53 (_net_52, D0);
and U54 (_net_53, _net_51, _net_52, SE, SI);
or U55 (cond20, _net_32, _net_33, _net_35, _net_38, _net_42, _net_44, _net_47, _net_50, _net_53);
not U56 (_net_54, S);
not U57 (_net_55, D1);
not U58 (_net_56, SE);
and U59 (cond1, _net_54, _net_55, _net_56);
not U60 (_net_57, S);
not U61 (_net_58, D1);
not U62 (_net_59, SE);
and U63 (cond1, _net_57, _net_58, _net_59);
not U64 (_net_60, S);
not U65 (_net_61, SE);
and U66 (cond0, _net_60, D1, _net_61);
not U67 (_net_62, S);
not U68 (_net_63, SE);
and U69 (cond0, _net_62, D1, _net_63);
not U70 (_net_64, D0);
not U71 (_net_65, SE);
and U72 (cond3, S, _net_64, _net_65);
not U73 (_net_66, D0);
not U74 (_net_67, SE);
and U75 (cond3, S, _net_66, _net_67);
not U76 (_net_68, SE);
and U77 (cond2, S, D0, _net_68);
not U78 (_net_69, SE);
and U79 (cond2, S, D0, _net_69);
not U80 (_net_70, D0);
not U81 (_net_71, SE);
and U82 (cond4, D1, _net_70, _net_71);
not U83 (_net_72, D0);
not U84 (_net_73, SE);
and U85 (cond4, D1, _net_72, _net_73);
not U86 (_net_74, D1);
not U87 (_net_75, SE);
and U88 (cond5, _net_74, D0, _net_75);
not U89 (_net_76, D1);
not U90 (_net_77, SE);
and U91 (cond5, _net_76, D0, _net_77);
not U92 (_net_78, D1);
not U93 (_net_79, D0);
not U94 (_net_80, S);
and U95 (cond9, _net_78, _net_79, _net_80, SI);
not U96 (_net_81, D1);
not U97 (_net_82, D0);
not U98 (_net_83, S);
and U99 (cond9, _net_81, _net_82, _net_83, SI);
not U100 (_net_84, D1);
not U101 (_net_85, D0);
and U102 (cond8, _net_84, _net_85, S, SI);
not U103 (_net_86, D1);
not U104 (_net_87, D0);
and U105 (cond8, _net_86, _net_87, S, SI);
not U106 (_net_88, D0);
not U107 (_net_89, S);
and U108 (cond7, D1, _net_88, _net_89, SI);
not U109 (_net_90, D0);
not U110 (_net_91, S);
and U111 (cond7, D1, _net_90, _net_91, SI);
not U112 (_net_92, D0);
not U113 (_net_93, SI);
and U114 (cond13, D1, _net_92, S, _net_93);
not U115 (_net_94, D0);
not U116 (_net_95, SI);
and U117 (cond13, D1, _net_94, S, _net_95);
not U118 (_net_96, D1);
not U119 (_net_97, S);
not U120 (_net_98, SI);
and U121 (cond12, _net_96, D0, _net_97, _net_98);
not U122 (_net_99, D1);
not U123 (_net_100, S);
not U124 (_net_101, SI);
and U125 (cond12, _net_99, D0, _net_100, _net_101);
not U126 (_net_102, D1);
and U127 (cond6, _net_102, D0, S, SI);
not U128 (_net_103, D1);
and U129 (cond6, _net_103, D0, S, SI);
not U130 (_net_104, S);
not U131 (_net_105, SI);
and U132 (cond11, D1, D0, _net_104, _net_105);
not U133 (_net_106, S);
not U134 (_net_107, SI);
and U135 (cond11, D1, D0, _net_106, _net_107);
not U136 (_net_108, SI);
and U137 (cond10, D1, D0, S, _net_108);
not U138 (_net_109, SI);
and U139 (cond10, D1, D0, S, _net_109);
not U140 (_net_110, D1);
not U141 (_net_111, D0);
and U142 (cond19, _net_110, _net_111, SE);
not U143 (_net_112, D1);
not U144 (_net_113, D0);
and U145 (cond19, _net_112, _net_113, SE);
not U146 (_net_114, D0);
not U147 (_net_115, S);
and U148 (cond18, D1, _net_114, _net_115, SE);
not U149 (_net_116, D0);
not U150 (_net_117, S);
and U151 (cond18, D1, _net_116, _net_117, SE);
not U152 (_net_118, D0);
and U153 (cond17, D1, _net_118, S, SE);
not U154 (_net_119, D0);
and U155 (cond17, D1, _net_119, S, SE);
not U156 (_net_120, D1);
not U157 (_net_121, S);
and U158 (cond16, _net_120, D0, _net_121, SE);
not U159 (_net_122, D1);
not U160 (_net_123, S);
and U161 (cond16, _net_122, D0, _net_123, SE);
not U162 (_net_124, D1);
and U163 (cond15, _net_124, D0, S, SE);
not U164 (_net_125, D1);
and U165 (cond15, _net_125, D0, S, SE);
and U166 (cond14, D1, D0, SE);
and U167 (cond14, D1, D0, SE);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond21 , 0 ,0, viol_0);
$width(negedge CK &&& cond21 , 0 ,0, viol_0);
$width(posedge CK &&& cond20 , 0 ,0, viol_0);
$width(negedge CK &&& cond20 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge D0 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond1 , negedge D0 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond0 , posedge D0 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond0 , negedge D0 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond3 , posedge D1 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond3 , negedge D1 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond2 , posedge D1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond2 , negedge D1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond4 , posedge S &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond4 , negedge S &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond5 , posedge S &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond5 , negedge S &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond9 , posedge SE &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond9 , negedge SE &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , negedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , posedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , negedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , posedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , negedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , posedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , negedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , posedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , negedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond11 , posedge SE &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond11 , negedge SE &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond10 , posedge SE &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond10 , negedge SE &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond19 , posedge SI &&& cond19 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond19 , negedge SI &&& cond19 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond18 , posedge SI &&& cond18 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond18 , negedge SI &&& cond18 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond17 , posedge SI &&& cond17 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond17 , negedge SI &&& cond17 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond16 , posedge SI &&& cond16 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond16 , negedge SI &&& cond16 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond15 , posedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond15 , negedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , posedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , negedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_FSDPMQ_DL50_4

//%BEGIN SEH_FSDPMQO_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPMQO_L50_1 (Q, SO, CK, D0, D1, S, SI, SE, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D0, D1, S, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D0, delayed_D1,
	delayed_S, delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, int_res__S, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPMQO_L50_1 (Q, SO, CK, D0, D1, S, SI, SE, VDD, VSS);
   output Q, SO;
   input CK, D0, D1, S, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D0, delayed_D1,
	delayed_S, delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, int_res__S, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D0, D0_org);
   buf (delayed_D1, D1_org);
   buf (delayed_S, S_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_D1, delayed_D0, delayed_S);
   scl40_htc50_mux2 (int_res__S, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__S);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__S, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
        buf #1 (SO, int_res_iq);
   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);
    `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D1);
not U1 (_net_1, SI);
and U2 (_net_2, _net_0, D0, S, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, D1, D0, SE, _net_3);
not U5 (_net_5, D1);
not U6 (_net_6, SE);
and U7 (_net_7, _net_5, D0, S, _net_6);
not U8 (_net_8, D1);
not U9 (_net_9, S);
not U10 (_net_10, SI);
and U11 (_net_11, _net_8, D0, _net_9, SE, _net_10);
not U12 (_net_12, D0);
not U13 (_net_13, SI);
and U14 (_net_14, D1, _net_12, S, SE, _net_13);
not U15 (_net_15, D0);
not U16 (_net_16, S);
not U17 (_net_17, SI);
and U18 (_net_18, D1, _net_15, _net_16, SE, _net_17);
not U19 (_net_19, D0);
not U20 (_net_20, S);
not U21 (_net_21, SE);
and U22 (_net_22, D1, _net_19, _net_20, _net_21);
not U23 (_net_23, D1);
not U24 (_net_24, D0);
not U25 (_net_25, SI);
and U26 (_net_26, _net_23, _net_24, SE, _net_25);
not U27 (_net_27, D1);
not U28 (_net_28, D0);
not U29 (_net_29, SE);
and U30 (_net_30, _net_27, _net_28, _net_29);
or U31 (cond21, _net_2, _net_4, _net_7, _net_11, _net_14, _net_18, _net_22, _net_26, _net_30);
not U32 (_net_31, SE);
and U33 (_net_32, D1, D0, _net_31);
and U34 (_net_33, D1, D0, SE, SI);
not U35 (_net_34, D1);
and U36 (_net_35, _net_34, D0, S, SE, SI);
not U37 (_net_36, D1);
not U38 (_net_37, S);
and U39 (_net_38, _net_36, D0, _net_37, SE, SI);
not U40 (_net_39, D1);
not U41 (_net_40, S);
not U42 (_net_41, SE);
and U43 (_net_42, _net_39, D0, _net_40, _net_41);
not U44 (_net_43, D0);
and U45 (_net_44, D1, _net_43, S, SE, SI);
not U46 (_net_45, D0);
not U47 (_net_46, SE);
and U48 (_net_47, D1, _net_45, S, _net_46);
not U49 (_net_48, D0);
not U50 (_net_49, S);
and U51 (_net_50, D1, _net_48, _net_49, SE, SI);
not U52 (_net_51, D1);
not U53 (_net_52, D0);
and U54 (_net_53, _net_51, _net_52, SE, SI);
or U55 (cond20, _net_32, _net_33, _net_35, _net_38, _net_42, _net_44, _net_47, _net_50, _net_53);
not U56 (_net_54, S);
not U57 (_net_55, D1);
not U58 (_net_56, SE);
and U59 (cond1, _net_54, _net_55, _net_56);
not U60 (_net_57, S);
not U61 (_net_58, D1);
not U62 (_net_59, SE);
and U63 (cond1, _net_57, _net_58, _net_59);
not U64 (_net_60, S);
not U65 (_net_61, SE);
and U66 (cond0, _net_60, D1, _net_61);
not U67 (_net_62, S);
not U68 (_net_63, SE);
and U69 (cond0, _net_62, D1, _net_63);
not U70 (_net_64, D0);
not U71 (_net_65, SE);
and U72 (cond3, S, _net_64, _net_65);
not U73 (_net_66, D0);
not U74 (_net_67, SE);
and U75 (cond3, S, _net_66, _net_67);
not U76 (_net_68, SE);
and U77 (cond2, S, D0, _net_68);
not U78 (_net_69, SE);
and U79 (cond2, S, D0, _net_69);
not U80 (_net_70, D0);
not U81 (_net_71, SE);
and U82 (cond4, D1, _net_70, _net_71);
not U83 (_net_72, D0);
not U84 (_net_73, SE);
and U85 (cond4, D1, _net_72, _net_73);
not U86 (_net_74, D1);
not U87 (_net_75, SE);
and U88 (cond5, _net_74, D0, _net_75);
not U89 (_net_76, D1);
not U90 (_net_77, SE);
and U91 (cond5, _net_76, D0, _net_77);
not U92 (_net_78, D1);
not U93 (_net_79, D0);
not U94 (_net_80, S);
and U95 (cond9, _net_78, _net_79, _net_80, SI);
not U96 (_net_81, D1);
not U97 (_net_82, D0);
not U98 (_net_83, S);
and U99 (cond9, _net_81, _net_82, _net_83, SI);
not U100 (_net_84, D1);
not U101 (_net_85, D0);
and U102 (cond8, _net_84, _net_85, S, SI);
not U103 (_net_86, D1);
not U104 (_net_87, D0);
and U105 (cond8, _net_86, _net_87, S, SI);
not U106 (_net_88, D0);
not U107 (_net_89, S);
and U108 (cond7, D1, _net_88, _net_89, SI);
not U109 (_net_90, D0);
not U110 (_net_91, S);
and U111 (cond7, D1, _net_90, _net_91, SI);
not U112 (_net_92, D0);
not U113 (_net_93, SI);
and U114 (cond13, D1, _net_92, S, _net_93);
not U115 (_net_94, D0);
not U116 (_net_95, SI);
and U117 (cond13, D1, _net_94, S, _net_95);
not U118 (_net_96, D1);
not U119 (_net_97, S);
not U120 (_net_98, SI);
and U121 (cond12, _net_96, D0, _net_97, _net_98);
not U122 (_net_99, D1);
not U123 (_net_100, S);
not U124 (_net_101, SI);
and U125 (cond12, _net_99, D0, _net_100, _net_101);
not U126 (_net_102, D1);
and U127 (cond6, _net_102, D0, S, SI);
not U128 (_net_103, D1);
and U129 (cond6, _net_103, D0, S, SI);
not U130 (_net_104, S);
not U131 (_net_105, SI);
and U132 (cond11, D1, D0, _net_104, _net_105);
not U133 (_net_106, S);
not U134 (_net_107, SI);
and U135 (cond11, D1, D0, _net_106, _net_107);
not U136 (_net_108, SI);
and U137 (cond10, D1, D0, S, _net_108);
not U138 (_net_109, SI);
and U139 (cond10, D1, D0, S, _net_109);
not U140 (_net_110, D1);
not U141 (_net_111, D0);
and U142 (cond19, _net_110, _net_111, SE);
not U143 (_net_112, D1);
not U144 (_net_113, D0);
and U145 (cond19, _net_112, _net_113, SE);
not U146 (_net_114, D0);
not U147 (_net_115, S);
and U148 (cond18, D1, _net_114, _net_115, SE);
not U149 (_net_116, D0);
not U150 (_net_117, S);
and U151 (cond18, D1, _net_116, _net_117, SE);
not U152 (_net_118, D0);
and U153 (cond17, D1, _net_118, S, SE);
not U154 (_net_119, D0);
and U155 (cond17, D1, _net_119, S, SE);
not U156 (_net_120, D1);
not U157 (_net_121, S);
and U158 (cond16, _net_120, D0, _net_121, SE);
not U159 (_net_122, D1);
not U160 (_net_123, S);
and U161 (cond16, _net_122, D0, _net_123, SE);
not U162 (_net_124, D1);
and U163 (cond15, _net_124, D0, S, SE);
not U164 (_net_125, D1);
and U165 (cond15, _net_125, D0, S, SE);
and U166 (cond14, D1, D0, SE);
and U167 (cond14, D1, D0, SE);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond21 , 0 ,0, viol_0);
$width(negedge CK &&& cond21 , 0 ,0, viol_0);
$width(posedge CK &&& cond20 , 0 ,0, viol_0);
$width(negedge CK &&& cond20 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge D0 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond1 , negedge D0 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond0 , posedge D0 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond0 , negedge D0 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond3 , posedge D1 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond3 , negedge D1 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond2 , posedge D1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond2 , negedge D1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond4 , posedge S &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond4 , negedge S &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond5 , posedge S &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond5 , negedge S &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond9 , posedge SE &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond9 , negedge SE &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , negedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , posedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , negedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , posedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , negedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , posedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , negedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , posedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , negedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond11 , posedge SE &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond11 , negedge SE &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond10 , posedge SE &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond10 , negedge SE &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond19 , posedge SI &&& cond19 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond19 , negedge SI &&& cond19 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond18 , posedge SI &&& cond18 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond18 , negedge SI &&& cond18 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond17 , posedge SI &&& cond17 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond17 , negedge SI &&& cond17 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond16 , posedge SI &&& cond16 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond16 , negedge SI &&& cond16 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond15 , posedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond15 , negedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , posedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , negedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPMQO_L50_1

//%BEGIN SEH_FSDPMQO_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPMQO_L50_2 (Q, SO, CK, D0, D1, S, SI, SE, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D0, D1, S, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D0, delayed_D1,
	delayed_S, delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, int_res__S, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPMQO_L50_2 (Q, SO, CK, D0, D1, S, SI, SE, VDD, VSS);
   output Q, SO;
   input CK, D0, D1, S, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D0, delayed_D1,
	delayed_S, delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, int_res__S, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D0, D0_org);
   buf (delayed_D1, D1_org);
   buf (delayed_S, S_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_D1, delayed_D0, delayed_S);
   scl40_htc50_mux2 (int_res__S, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__S);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__S, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
        buf #1 (SO, int_res_iq);
   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);
    `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D1);
not U1 (_net_1, SI);
and U2 (_net_2, _net_0, D0, S, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, D1, D0, SE, _net_3);
not U5 (_net_5, D1);
not U6 (_net_6, SE);
and U7 (_net_7, _net_5, D0, S, _net_6);
not U8 (_net_8, D1);
not U9 (_net_9, S);
not U10 (_net_10, SI);
and U11 (_net_11, _net_8, D0, _net_9, SE, _net_10);
not U12 (_net_12, D0);
not U13 (_net_13, SI);
and U14 (_net_14, D1, _net_12, S, SE, _net_13);
not U15 (_net_15, D0);
not U16 (_net_16, S);
not U17 (_net_17, SI);
and U18 (_net_18, D1, _net_15, _net_16, SE, _net_17);
not U19 (_net_19, D0);
not U20 (_net_20, S);
not U21 (_net_21, SE);
and U22 (_net_22, D1, _net_19, _net_20, _net_21);
not U23 (_net_23, D1);
not U24 (_net_24, D0);
not U25 (_net_25, SI);
and U26 (_net_26, _net_23, _net_24, SE, _net_25);
not U27 (_net_27, D1);
not U28 (_net_28, D0);
not U29 (_net_29, SE);
and U30 (_net_30, _net_27, _net_28, _net_29);
or U31 (cond21, _net_2, _net_4, _net_7, _net_11, _net_14, _net_18, _net_22, _net_26, _net_30);
not U32 (_net_31, SE);
and U33 (_net_32, D1, D0, _net_31);
and U34 (_net_33, D1, D0, SE, SI);
not U35 (_net_34, D1);
and U36 (_net_35, _net_34, D0, S, SE, SI);
not U37 (_net_36, D1);
not U38 (_net_37, S);
and U39 (_net_38, _net_36, D0, _net_37, SE, SI);
not U40 (_net_39, D1);
not U41 (_net_40, S);
not U42 (_net_41, SE);
and U43 (_net_42, _net_39, D0, _net_40, _net_41);
not U44 (_net_43, D0);
and U45 (_net_44, D1, _net_43, S, SE, SI);
not U46 (_net_45, D0);
not U47 (_net_46, SE);
and U48 (_net_47, D1, _net_45, S, _net_46);
not U49 (_net_48, D0);
not U50 (_net_49, S);
and U51 (_net_50, D1, _net_48, _net_49, SE, SI);
not U52 (_net_51, D1);
not U53 (_net_52, D0);
and U54 (_net_53, _net_51, _net_52, SE, SI);
or U55 (cond20, _net_32, _net_33, _net_35, _net_38, _net_42, _net_44, _net_47, _net_50, _net_53);
not U56 (_net_54, S);
not U57 (_net_55, D1);
not U58 (_net_56, SE);
and U59 (cond1, _net_54, _net_55, _net_56);
not U60 (_net_57, S);
not U61 (_net_58, D1);
not U62 (_net_59, SE);
and U63 (cond1, _net_57, _net_58, _net_59);
not U64 (_net_60, S);
not U65 (_net_61, SE);
and U66 (cond0, _net_60, D1, _net_61);
not U67 (_net_62, S);
not U68 (_net_63, SE);
and U69 (cond0, _net_62, D1, _net_63);
not U70 (_net_64, D0);
not U71 (_net_65, SE);
and U72 (cond3, S, _net_64, _net_65);
not U73 (_net_66, D0);
not U74 (_net_67, SE);
and U75 (cond3, S, _net_66, _net_67);
not U76 (_net_68, SE);
and U77 (cond2, S, D0, _net_68);
not U78 (_net_69, SE);
and U79 (cond2, S, D0, _net_69);
not U80 (_net_70, D0);
not U81 (_net_71, SE);
and U82 (cond4, D1, _net_70, _net_71);
not U83 (_net_72, D0);
not U84 (_net_73, SE);
and U85 (cond4, D1, _net_72, _net_73);
not U86 (_net_74, D1);
not U87 (_net_75, SE);
and U88 (cond5, _net_74, D0, _net_75);
not U89 (_net_76, D1);
not U90 (_net_77, SE);
and U91 (cond5, _net_76, D0, _net_77);
not U92 (_net_78, D1);
not U93 (_net_79, D0);
not U94 (_net_80, S);
and U95 (cond9, _net_78, _net_79, _net_80, SI);
not U96 (_net_81, D1);
not U97 (_net_82, D0);
not U98 (_net_83, S);
and U99 (cond9, _net_81, _net_82, _net_83, SI);
not U100 (_net_84, D1);
not U101 (_net_85, D0);
and U102 (cond8, _net_84, _net_85, S, SI);
not U103 (_net_86, D1);
not U104 (_net_87, D0);
and U105 (cond8, _net_86, _net_87, S, SI);
not U106 (_net_88, D0);
not U107 (_net_89, S);
and U108 (cond7, D1, _net_88, _net_89, SI);
not U109 (_net_90, D0);
not U110 (_net_91, S);
and U111 (cond7, D1, _net_90, _net_91, SI);
not U112 (_net_92, D0);
not U113 (_net_93, SI);
and U114 (cond13, D1, _net_92, S, _net_93);
not U115 (_net_94, D0);
not U116 (_net_95, SI);
and U117 (cond13, D1, _net_94, S, _net_95);
not U118 (_net_96, D1);
not U119 (_net_97, S);
not U120 (_net_98, SI);
and U121 (cond12, _net_96, D0, _net_97, _net_98);
not U122 (_net_99, D1);
not U123 (_net_100, S);
not U124 (_net_101, SI);
and U125 (cond12, _net_99, D0, _net_100, _net_101);
not U126 (_net_102, D1);
and U127 (cond6, _net_102, D0, S, SI);
not U128 (_net_103, D1);
and U129 (cond6, _net_103, D0, S, SI);
not U130 (_net_104, S);
not U131 (_net_105, SI);
and U132 (cond11, D1, D0, _net_104, _net_105);
not U133 (_net_106, S);
not U134 (_net_107, SI);
and U135 (cond11, D1, D0, _net_106, _net_107);
not U136 (_net_108, SI);
and U137 (cond10, D1, D0, S, _net_108);
not U138 (_net_109, SI);
and U139 (cond10, D1, D0, S, _net_109);
not U140 (_net_110, D1);
not U141 (_net_111, D0);
and U142 (cond19, _net_110, _net_111, SE);
not U143 (_net_112, D1);
not U144 (_net_113, D0);
and U145 (cond19, _net_112, _net_113, SE);
not U146 (_net_114, D0);
not U147 (_net_115, S);
and U148 (cond18, D1, _net_114, _net_115, SE);
not U149 (_net_116, D0);
not U150 (_net_117, S);
and U151 (cond18, D1, _net_116, _net_117, SE);
not U152 (_net_118, D0);
and U153 (cond17, D1, _net_118, S, SE);
not U154 (_net_119, D0);
and U155 (cond17, D1, _net_119, S, SE);
not U156 (_net_120, D1);
not U157 (_net_121, S);
and U158 (cond16, _net_120, D0, _net_121, SE);
not U159 (_net_122, D1);
not U160 (_net_123, S);
and U161 (cond16, _net_122, D0, _net_123, SE);
not U162 (_net_124, D1);
and U163 (cond15, _net_124, D0, S, SE);
not U164 (_net_125, D1);
and U165 (cond15, _net_125, D0, S, SE);
and U166 (cond14, D1, D0, SE);
and U167 (cond14, D1, D0, SE);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond21 , 0 ,0, viol_0);
$width(negedge CK &&& cond21 , 0 ,0, viol_0);
$width(posedge CK &&& cond20 , 0 ,0, viol_0);
$width(negedge CK &&& cond20 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge D0 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond1 , negedge D0 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond0 , posedge D0 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond0 , negedge D0 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond3 , posedge D1 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond3 , negedge D1 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond2 , posedge D1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond2 , negedge D1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond4 , posedge S &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond4 , negedge S &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond5 , posedge S &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond5 , negedge S &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond9 , posedge SE &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond9 , negedge SE &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , negedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , posedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , negedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , posedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , negedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , posedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , negedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , posedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , negedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond11 , posedge SE &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond11 , negedge SE &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond10 , posedge SE &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond10 , negedge SE &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond19 , posedge SI &&& cond19 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond19 , negedge SI &&& cond19 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond18 , posedge SI &&& cond18 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond18 , negedge SI &&& cond18 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond17 , posedge SI &&& cond17 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond17 , negedge SI &&& cond17 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond16 , posedge SI &&& cond16 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond16 , negedge SI &&& cond16 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond15 , posedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond15 , negedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , posedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , negedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPMQO_L50_2

//%BEGIN SEH_FSDPMQO_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPMQO_L50_4 (Q, SO, CK, D0, D1, S, SI, SE, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D0, D1, S, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D0, delayed_D1,
	delayed_S, delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, int_res__S, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPMQO_L50_4 (Q, SO, CK, D0, D1, S, SI, SE, VDD, VSS);
   output Q, SO;
   input CK, D0, D1, S, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D0, delayed_D1,
	delayed_S, delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, int_res__S, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D0, D0_org);
   buf (delayed_D1, D1_org);
   buf (delayed_S, S_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_D1, delayed_D0, delayed_S);
   scl40_htc50_mux2 (int_res__S, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__S);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__S, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
        buf #1 (SO, int_res_iq);
   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);
    `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D1);
not U1 (_net_1, SI);
and U2 (_net_2, _net_0, D0, S, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, D1, D0, SE, _net_3);
not U5 (_net_5, D1);
not U6 (_net_6, SE);
and U7 (_net_7, _net_5, D0, S, _net_6);
not U8 (_net_8, D1);
not U9 (_net_9, S);
not U10 (_net_10, SI);
and U11 (_net_11, _net_8, D0, _net_9, SE, _net_10);
not U12 (_net_12, D0);
not U13 (_net_13, SI);
and U14 (_net_14, D1, _net_12, S, SE, _net_13);
not U15 (_net_15, D0);
not U16 (_net_16, S);
not U17 (_net_17, SI);
and U18 (_net_18, D1, _net_15, _net_16, SE, _net_17);
not U19 (_net_19, D0);
not U20 (_net_20, S);
not U21 (_net_21, SE);
and U22 (_net_22, D1, _net_19, _net_20, _net_21);
not U23 (_net_23, D1);
not U24 (_net_24, D0);
not U25 (_net_25, SI);
and U26 (_net_26, _net_23, _net_24, SE, _net_25);
not U27 (_net_27, D1);
not U28 (_net_28, D0);
not U29 (_net_29, SE);
and U30 (_net_30, _net_27, _net_28, _net_29);
or U31 (cond21, _net_2, _net_4, _net_7, _net_11, _net_14, _net_18, _net_22, _net_26, _net_30);
not U32 (_net_31, SE);
and U33 (_net_32, D1, D0, _net_31);
and U34 (_net_33, D1, D0, SE, SI);
not U35 (_net_34, D1);
and U36 (_net_35, _net_34, D0, S, SE, SI);
not U37 (_net_36, D1);
not U38 (_net_37, S);
and U39 (_net_38, _net_36, D0, _net_37, SE, SI);
not U40 (_net_39, D1);
not U41 (_net_40, S);
not U42 (_net_41, SE);
and U43 (_net_42, _net_39, D0, _net_40, _net_41);
not U44 (_net_43, D0);
and U45 (_net_44, D1, _net_43, S, SE, SI);
not U46 (_net_45, D0);
not U47 (_net_46, SE);
and U48 (_net_47, D1, _net_45, S, _net_46);
not U49 (_net_48, D0);
not U50 (_net_49, S);
and U51 (_net_50, D1, _net_48, _net_49, SE, SI);
not U52 (_net_51, D1);
not U53 (_net_52, D0);
and U54 (_net_53, _net_51, _net_52, SE, SI);
or U55 (cond20, _net_32, _net_33, _net_35, _net_38, _net_42, _net_44, _net_47, _net_50, _net_53);
not U56 (_net_54, S);
not U57 (_net_55, D1);
not U58 (_net_56, SE);
and U59 (cond1, _net_54, _net_55, _net_56);
not U60 (_net_57, S);
not U61 (_net_58, D1);
not U62 (_net_59, SE);
and U63 (cond1, _net_57, _net_58, _net_59);
not U64 (_net_60, S);
not U65 (_net_61, SE);
and U66 (cond0, _net_60, D1, _net_61);
not U67 (_net_62, S);
not U68 (_net_63, SE);
and U69 (cond0, _net_62, D1, _net_63);
not U70 (_net_64, D0);
not U71 (_net_65, SE);
and U72 (cond3, S, _net_64, _net_65);
not U73 (_net_66, D0);
not U74 (_net_67, SE);
and U75 (cond3, S, _net_66, _net_67);
not U76 (_net_68, SE);
and U77 (cond2, S, D0, _net_68);
not U78 (_net_69, SE);
and U79 (cond2, S, D0, _net_69);
not U80 (_net_70, D0);
not U81 (_net_71, SE);
and U82 (cond4, D1, _net_70, _net_71);
not U83 (_net_72, D0);
not U84 (_net_73, SE);
and U85 (cond4, D1, _net_72, _net_73);
not U86 (_net_74, D1);
not U87 (_net_75, SE);
and U88 (cond5, _net_74, D0, _net_75);
not U89 (_net_76, D1);
not U90 (_net_77, SE);
and U91 (cond5, _net_76, D0, _net_77);
not U92 (_net_78, D1);
not U93 (_net_79, D0);
not U94 (_net_80, S);
and U95 (cond9, _net_78, _net_79, _net_80, SI);
not U96 (_net_81, D1);
not U97 (_net_82, D0);
not U98 (_net_83, S);
and U99 (cond9, _net_81, _net_82, _net_83, SI);
not U100 (_net_84, D1);
not U101 (_net_85, D0);
and U102 (cond8, _net_84, _net_85, S, SI);
not U103 (_net_86, D1);
not U104 (_net_87, D0);
and U105 (cond8, _net_86, _net_87, S, SI);
not U106 (_net_88, D0);
not U107 (_net_89, S);
and U108 (cond7, D1, _net_88, _net_89, SI);
not U109 (_net_90, D0);
not U110 (_net_91, S);
and U111 (cond7, D1, _net_90, _net_91, SI);
not U112 (_net_92, D0);
not U113 (_net_93, SI);
and U114 (cond13, D1, _net_92, S, _net_93);
not U115 (_net_94, D0);
not U116 (_net_95, SI);
and U117 (cond13, D1, _net_94, S, _net_95);
not U118 (_net_96, D1);
not U119 (_net_97, S);
not U120 (_net_98, SI);
and U121 (cond12, _net_96, D0, _net_97, _net_98);
not U122 (_net_99, D1);
not U123 (_net_100, S);
not U124 (_net_101, SI);
and U125 (cond12, _net_99, D0, _net_100, _net_101);
not U126 (_net_102, D1);
and U127 (cond6, _net_102, D0, S, SI);
not U128 (_net_103, D1);
and U129 (cond6, _net_103, D0, S, SI);
not U130 (_net_104, S);
not U131 (_net_105, SI);
and U132 (cond11, D1, D0, _net_104, _net_105);
not U133 (_net_106, S);
not U134 (_net_107, SI);
and U135 (cond11, D1, D0, _net_106, _net_107);
not U136 (_net_108, SI);
and U137 (cond10, D1, D0, S, _net_108);
not U138 (_net_109, SI);
and U139 (cond10, D1, D0, S, _net_109);
not U140 (_net_110, D1);
not U141 (_net_111, D0);
and U142 (cond19, _net_110, _net_111, SE);
not U143 (_net_112, D1);
not U144 (_net_113, D0);
and U145 (cond19, _net_112, _net_113, SE);
not U146 (_net_114, D0);
not U147 (_net_115, S);
and U148 (cond18, D1, _net_114, _net_115, SE);
not U149 (_net_116, D0);
not U150 (_net_117, S);
and U151 (cond18, D1, _net_116, _net_117, SE);
not U152 (_net_118, D0);
and U153 (cond17, D1, _net_118, S, SE);
not U154 (_net_119, D0);
and U155 (cond17, D1, _net_119, S, SE);
not U156 (_net_120, D1);
not U157 (_net_121, S);
and U158 (cond16, _net_120, D0, _net_121, SE);
not U159 (_net_122, D1);
not U160 (_net_123, S);
and U161 (cond16, _net_122, D0, _net_123, SE);
not U162 (_net_124, D1);
and U163 (cond15, _net_124, D0, S, SE);
not U164 (_net_125, D1);
and U165 (cond15, _net_125, D0, S, SE);
and U166 (cond14, D1, D0, SE);
and U167 (cond14, D1, D0, SE);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond21 , 0 ,0, viol_0);
$width(negedge CK &&& cond21 , 0 ,0, viol_0);
$width(posedge CK &&& cond20 , 0 ,0, viol_0);
$width(negedge CK &&& cond20 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge D0 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond1 , negedge D0 &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond0 , posedge D0 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond0 , negedge D0 &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D0);
$setuphold(posedge CK &&& cond3 , posedge D1 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond3 , negedge D1 &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond2 , posedge D1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond2 , negedge D1 &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_D1);
$setuphold(posedge CK &&& cond4 , posedge S &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond4 , negedge S &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond5 , posedge S &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond5 , negedge S &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_S);
$setuphold(posedge CK &&& cond9 , posedge SE &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond9 , negedge SE &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , negedge SE &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , posedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , negedge SE &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , posedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond13 , negedge SE &&& cond13 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , posedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond12 , negedge SE &&& cond12 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , posedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond6 , negedge SE &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond11 , posedge SE &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond11 , negedge SE &&& cond11 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond10 , posedge SE &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond10 , negedge SE &&& cond10 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond19 , posedge SI &&& cond19 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond19 , negedge SI &&& cond19 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond18 , posedge SI &&& cond18 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond18 , negedge SI &&& cond18 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond17 , posedge SI &&& cond17 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond17 , negedge SI &&& cond17 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond16 , posedge SI &&& cond16 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond16 , negedge SI &&& cond16 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond15 , posedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond15 , negedge SI &&& cond15 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , posedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond14 , negedge SI &&& cond14 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPMQO_L50_4

//%BEGIN SEH_FSDPQ_DL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPQ_DL50_1 (Q, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPQ_DL50_1 (Q, CK, D, SI, SE, VDD, VSS);
   output Q;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `else
        scl40_htc50_dff (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond5, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond4, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond0, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond0, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond1, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond1, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPQ_DL50_1

//%BEGIN SEH_FSDPQ_DL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPQ_DL50_2 (Q, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPQ_DL50_2 (Q, CK, D, SI, SE, VDD, VSS);
   output Q;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `else
        scl40_htc50_dff (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond5, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond4, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond0, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond0, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond1, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond1, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPQ_DL50_2

//%BEGIN SEH_FSDPQ_DL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPQ_DL50_4 (Q, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPQ_DL50_4 (Q, CK, D, SI, SE, VDD, VSS);
   output Q;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `else
        scl40_htc50_dff (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond5, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond4, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond0, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond0, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond1, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond1, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPQ_DL50_4

//%BEGIN SEH_FSDPQ_V2L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPQ_V2L50_1 (Q, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPQ_V2L50_1 (Q, CK, D, SI, SE, VDD, VSS);
   output Q;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `else
        scl40_htc50_dff (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond5, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond4, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond0, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond0, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond1, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond1, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPQ_V2L50_1

//%BEGIN SEH_FSDPQ_V2L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPQ_V2L50_2 (Q, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPQ_V2L50_2 (Q, CK, D, SI, SE, VDD, VSS);
   output Q;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `else
        scl40_htc50_dff (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond5, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond4, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond0, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond0, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond1, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond1, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPQ_V2L50_2

//%BEGIN SEH_FSDPQ_V2L50_3

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPQ_V2L50_3 (Q, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPQ_V2L50_3 (Q, CK, D, SI, SE, VDD, VSS);
   output Q;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `else
        scl40_htc50_dff (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond5, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond4, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond0, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond0, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond1, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond1, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPQ_V2L50_3

//%BEGIN SEH_FSDPQ_V2L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPQ_V2L50_4 (Q, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPQ_V2L50_4 (Q, CK, D, SI, SE, VDD, VSS);
   output Q;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `else
        scl40_htc50_dff (Q, viol_0, delayed_CK, int_res__D, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond5, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond4, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond0, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond0, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond1, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond1, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPQ_V2L50_4

//%BEGIN SEH_FSDPQB_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPQB_L50_1 (QN, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output QN;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, 
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPQB_L50_1 (QN, CK, D, SI, SE, VDD, VSS);
   output QN;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, 
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        not #1 (QN, int_res_iq);
   `else
        not (QN, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond4, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond5, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond1, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond1, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond0, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond0, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(posedge CK => (QN : 1'b1))=(0, 0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPQB_L50_1

//%BEGIN SEH_FSDPQB_L50_1P5

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPQB_L50_1P5 (QN, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output QN;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, 
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPQB_L50_1P5 (QN, CK, D, SI, SE, VDD, VSS);
   output QN;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, 
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        not #1 (QN, int_res_iq);
   `else
        not (QN, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond4, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond5, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond1, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond1, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond0, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond0, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(posedge CK => (QN : 1'b1))=(0, 0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPQB_L50_1P5

//%BEGIN SEH_FSDPQB_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPQB_L50_2 (QN, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output QN;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, 
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPQB_L50_2 (QN, CK, D, SI, SE, VDD, VSS);
   output QN;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, 
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        not #1 (QN, int_res_iq);
   `else
        not (QN, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond4, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond5, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond1, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond1, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond0, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond0, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(posedge CK => (QN : 1'b1))=(0, 0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPQB_L50_2

//%BEGIN SEH_FSDPQB_L50_3

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPQB_L50_3 (QN, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output QN;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, 
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPQB_L50_3 (QN, CK, D, SI, SE, VDD, VSS);
   output QN;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, 
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        not #1 (QN, int_res_iq);
   `else
        not (QN, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond4, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond5, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond1, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond1, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond0, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond0, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(posedge CK => (QN : 1'b1))=(0, 0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPQB_L50_3

//%BEGIN SEH_FSDPQB_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPQB_L50_4 (QN, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output QN;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, 
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPQB_L50_4 (QN, CK, D, SI, SE, VDD, VSS);
   output QN;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, 
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        not #1 (QN, int_res_iq);
   `else
        not (QN, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond4, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond5, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond1, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond1, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond0, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond0, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(posedge CK => (QN : 1'b1))=(0, 0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPQB_L50_4

//%BEGIN SEH_FSDPQB_V2L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPQB_V2L50_1 (QN, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output QN;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, 
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPQB_V2L50_1 (QN, CK, D, SI, SE, VDD, VSS);
   output QN;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, 
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        not #1 (QN, int_res_iq);
   `else
        not (QN, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond4, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond5, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond1, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond1, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond0, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond0, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(posedge CK => (QN : 1'b1))=(0, 0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPQB_V2L50_1

//%BEGIN SEH_FSDPQB_V2L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPQB_V2L50_2 (QN, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output QN;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, 
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPQB_V2L50_2 (QN, CK, D, SI, SE, VDD, VSS);
   output QN;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, 
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        not #1 (QN, int_res_iq);
   `else
        not (QN, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond4, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond5, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond1, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond1, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond0, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond0, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(posedge CK => (QN : 1'b1))=(0, 0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPQB_V2L50_2

//%BEGIN SEH_FSDPQB_V2L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPQB_V2L50_4 (QN, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output QN;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, 
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPQB_V2L50_4 (QN, CK, D, SI, SE, VDD, VSS);
   output QN;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, 
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        not #1 (QN, int_res_iq);
   `else
        not (QN, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond4, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond5, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond1, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond1, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond0, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond0, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(posedge CK => (QN : 1'b1))=(0, 0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPQB_V2L50_4

//%BEGIN SEH_FSDPQO_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPQO_L50_1 (Q, SO, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPQO_L50_1 (Q, SO, CK, D, SI, SE, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
        buf #1 (SO, int_res_iq);
   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond5, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond4, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond0, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond0, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond1, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond1, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPQO_L50_1

//%BEGIN SEH_FSDPQO_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPQO_L50_2 (Q, SO, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPQO_L50_2 (Q, SO, CK, D, SI, SE, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
        buf #1 (SO, int_res_iq);
   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond5, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond4, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond0, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond0, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond1, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond1, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPQO_L50_2

//%BEGIN SEH_FSDPQO_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPQO_L50_4 (Q, SO, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPQO_L50_4 (Q, SO, CK, D, SI, SE, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
        buf #1 (SO, int_res_iq);
   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond5, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond4, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond0, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond0, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond1, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond1, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPQO_L50_4

//%BEGIN SEH_FSDPQO_L50_8

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPQO_L50_8 (Q, SO, CK, D, SI, SE, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPQO_L50_8 (Q, SO, CK, D, SI, SE, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D,
	delayed_SI, delayed_SE;

   wire int_res__D, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res__D);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res__D, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
        buf #1 (SO, int_res_iq);
   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
and U7 (_net_7, _net_5, _net_6);
or U8 (cond5, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, _net_8, D);
and U11 (_net_10, SE, D, SI);
not U12 (_net_11, D);
and U13 (_net_12, SE, _net_11, SI);
or U14 (cond4, _net_9, _net_10, _net_12);
not U15 (_net_13, D);
and U16 (cond0, SI, _net_13);
not U17 (_net_14, D);
and U18 (cond0, SI, _net_14);
not U19 (_net_15, SI);
and U20 (cond1, _net_15, D);
not U21 (_net_16, SI);
and U22 (cond1, _net_16, D);
not U23 (_net_17, D);
and U24 (cond3, SE, _net_17);
not U25 (_net_18, D);
and U26 (cond3, SE, _net_18);
and U27 (cond2, SE, D);
and U28 (cond2, SE, D);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond5 , 0 ,0, viol_0);
$width(negedge CK &&& cond5 , 0 ,0, viol_0);
$width(posedge CK &&& cond4 , 0 ,0, viol_0);
$width(negedge CK &&& cond4 , 0 ,0, viol_0);
$setuphold(posedge CK &&& ~SE , posedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& ~SE , negedge D &&& ~SE , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , posedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond0 , negedge SE &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , posedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond2 , negedge SI &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPQO_L50_8

//%BEGIN SEH_FSDPRBQ_DL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPRBQ_DL50_1 (Q, CK, D, SI, SE, RD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__D, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPRBQ_DL50_1 (Q, CK, D, SI, SE, RD, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__D, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_r_err (xcr_0, delayed_CK, int_res__D, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff_r #1 (Q, viol_0, delayed_CK, int_res__D, int_res__RD, xcr_0);

   `else
        scl40_htc50_dff_r (Q, viol_0, delayed_CK, int_res__D, int_res__RD, xcr_0);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, _net_6);
or U8 (cond11, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, _net_8);
and U11 (_net_10, RD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SE, SI);
or U14 (cond10, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, _net_13, RD);
not U17 (_net_14, SE);
and U18 (cond0, _net_14, RD);
not U19 (_net_15, D);
not U20 (_net_16, CK);
not U21 (_net_17, SI);
and U22 (_net_18, _net_15, _net_16, SE, _net_17);
not U23 (_net_19, CK);
not U24 (_net_20, SI);
and U25 (_net_21, D, _net_19, SE, _net_20);
not U26 (_net_22, D);
not U27 (_net_23, CK);
not U28 (_net_24, SE);
and U29 (_net_25, _net_22, _net_23, _net_24);
or U30 (cond9, _net_18, _net_21, _net_25);
not U31 (_net_26, CK);
not U32 (_net_27, SE);
and U33 (_net_28, D, _net_26, _net_27);
not U34 (_net_29, CK);
and U35 (_net_30, D, _net_29, SE, SI);
not U36 (_net_31, D);
not U37 (_net_32, CK);
and U38 (_net_33, _net_31, _net_32, SE, SI);
or U39 (cond8, _net_28, _net_30, _net_33);
not U40 (_net_34, D);
and U41 (cond7, SE, _net_34, SI);
not U42 (_net_35, D);
and U43 (cond7, SE, _net_35, SI);
not U44 (_net_36, SE);
and U45 (cond6, _net_36, D);
not U46 (_net_37, SE);
and U47 (cond6, _net_37, D);
and U48 (cond5, SE, D, SI);
and U49 (cond5, SE, D, SI);
not U50 (_net_38, D);
and U51 (cond1, RD, _net_38, SI);
not U52 (_net_39, D);
and U53 (cond1, RD, _net_39, SI);
not U54 (_net_40, SI);
and U55 (cond2, RD, D, _net_40);
not U56 (_net_41, SI);
and U57 (cond2, RD, D, _net_41);
not U58 (_net_42, D);
and U59 (cond4, RD, _net_42, SE);
not U60 (_net_43, D);
and U61 (cond4, RD, _net_43, SE);
and U62 (cond3, RD, D, SE);
and U63 (cond3, RD, D, SE);

specify
if ((~(CK) & D & SE & ~(SI)) | (~(CK) & ~(D) & SE & ~(SI)) | (~(CK) & ~(D) & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & SI) | (~(CK) & D & ~(SE)) | (~(CK) & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if (CK) (negedge RD => (Q +: 1'b0))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond9 , 0 ,0, viol_0);
$width(negedge RD &&& cond8 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond5 , posedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& CK , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPRBQ_DL50_1

//%BEGIN SEH_FSDPRBQ_DL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPRBQ_DL50_2 (Q, CK, D, SI, SE, RD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__D, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPRBQ_DL50_2 (Q, CK, D, SI, SE, RD, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__D, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_r_err (xcr_0, delayed_CK, int_res__D, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff_r #1 (Q, viol_0, delayed_CK, int_res__D, int_res__RD, xcr_0);

   `else
        scl40_htc50_dff_r (Q, viol_0, delayed_CK, int_res__D, int_res__RD, xcr_0);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, _net_6);
or U8 (cond11, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, _net_8);
and U11 (_net_10, RD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SE, SI);
or U14 (cond10, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, _net_13, RD);
not U17 (_net_14, SE);
and U18 (cond0, _net_14, RD);
not U19 (_net_15, D);
not U20 (_net_16, CK);
not U21 (_net_17, SI);
and U22 (_net_18, _net_15, _net_16, SE, _net_17);
not U23 (_net_19, CK);
not U24 (_net_20, SI);
and U25 (_net_21, D, _net_19, SE, _net_20);
not U26 (_net_22, D);
not U27 (_net_23, CK);
not U28 (_net_24, SE);
and U29 (_net_25, _net_22, _net_23, _net_24);
or U30 (cond9, _net_18, _net_21, _net_25);
not U31 (_net_26, CK);
not U32 (_net_27, SE);
and U33 (_net_28, D, _net_26, _net_27);
not U34 (_net_29, CK);
and U35 (_net_30, D, _net_29, SE, SI);
not U36 (_net_31, D);
not U37 (_net_32, CK);
and U38 (_net_33, _net_31, _net_32, SE, SI);
or U39 (cond8, _net_28, _net_30, _net_33);
not U40 (_net_34, D);
and U41 (cond7, SE, _net_34, SI);
not U42 (_net_35, D);
and U43 (cond7, SE, _net_35, SI);
not U44 (_net_36, SE);
and U45 (cond6, _net_36, D);
not U46 (_net_37, SE);
and U47 (cond6, _net_37, D);
and U48 (cond5, SE, D, SI);
and U49 (cond5, SE, D, SI);
not U50 (_net_38, D);
and U51 (cond1, RD, _net_38, SI);
not U52 (_net_39, D);
and U53 (cond1, RD, _net_39, SI);
not U54 (_net_40, SI);
and U55 (cond2, RD, D, _net_40);
not U56 (_net_41, SI);
and U57 (cond2, RD, D, _net_41);
not U58 (_net_42, D);
and U59 (cond4, RD, _net_42, SE);
not U60 (_net_43, D);
and U61 (cond4, RD, _net_43, SE);
and U62 (cond3, RD, D, SE);
and U63 (cond3, RD, D, SE);

specify
if ((~(CK) & D & SE & ~(SI)) | (~(CK) & ~(D) & SE & ~(SI)) | (~(CK) & ~(D) & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & SI) | (~(CK) & D & ~(SE)) | (~(CK) & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if (CK) (negedge RD => (Q +: 1'b0))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond9 , 0 ,0, viol_0);
$width(negedge RD &&& cond8 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond5 , posedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& CK , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPRBQ_DL50_2

//%BEGIN SEH_FSDPRBQ_DL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPRBQ_DL50_4 (Q, CK, D, SI, SE, RD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__D, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPRBQ_DL50_4 (Q, CK, D, SI, SE, RD, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__D, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_r_err (xcr_0, delayed_CK, int_res__D, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff_r #1 (Q, viol_0, delayed_CK, int_res__D, int_res__RD, xcr_0);

   `else
        scl40_htc50_dff_r (Q, viol_0, delayed_CK, int_res__D, int_res__RD, xcr_0);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, _net_6);
or U8 (cond11, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, _net_8);
and U11 (_net_10, RD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SE, SI);
or U14 (cond10, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, _net_13, RD);
not U17 (_net_14, SE);
and U18 (cond0, _net_14, RD);
not U19 (_net_15, D);
not U20 (_net_16, CK);
not U21 (_net_17, SI);
and U22 (_net_18, _net_15, _net_16, SE, _net_17);
not U23 (_net_19, CK);
not U24 (_net_20, SI);
and U25 (_net_21, D, _net_19, SE, _net_20);
not U26 (_net_22, D);
not U27 (_net_23, CK);
not U28 (_net_24, SE);
and U29 (_net_25, _net_22, _net_23, _net_24);
or U30 (cond9, _net_18, _net_21, _net_25);
not U31 (_net_26, CK);
not U32 (_net_27, SE);
and U33 (_net_28, D, _net_26, _net_27);
not U34 (_net_29, CK);
and U35 (_net_30, D, _net_29, SE, SI);
not U36 (_net_31, D);
not U37 (_net_32, CK);
and U38 (_net_33, _net_31, _net_32, SE, SI);
or U39 (cond8, _net_28, _net_30, _net_33);
not U40 (_net_34, D);
and U41 (cond7, SE, _net_34, SI);
not U42 (_net_35, D);
and U43 (cond7, SE, _net_35, SI);
not U44 (_net_36, SE);
and U45 (cond6, _net_36, D);
not U46 (_net_37, SE);
and U47 (cond6, _net_37, D);
and U48 (cond5, SE, D, SI);
and U49 (cond5, SE, D, SI);
not U50 (_net_38, D);
and U51 (cond1, RD, _net_38, SI);
not U52 (_net_39, D);
and U53 (cond1, RD, _net_39, SI);
not U54 (_net_40, SI);
and U55 (cond2, RD, D, _net_40);
not U56 (_net_41, SI);
and U57 (cond2, RD, D, _net_41);
not U58 (_net_42, D);
and U59 (cond4, RD, _net_42, SE);
not U60 (_net_43, D);
and U61 (cond4, RD, _net_43, SE);
and U62 (cond3, RD, D, SE);
and U63 (cond3, RD, D, SE);

specify
if ((~(CK) & D & SE & ~(SI)) | (~(CK) & ~(D) & SE & ~(SI)) | (~(CK) & ~(D) & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & SI) | (~(CK) & D & ~(SE)) | (~(CK) & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if (CK) (negedge RD => (Q +: 1'b0))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond9 , 0 ,0, viol_0);
$width(negedge RD &&& cond8 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond5 , posedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& CK , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPRBQ_DL50_4

//%BEGIN SEH_FSDPRBQ_V2L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPRBQ_V2L50_1 (Q, CK, D, SI, SE, RD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__D, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPRBQ_V2L50_1 (Q, CK, D, SI, SE, RD, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__D, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_r_err (xcr_0, delayed_CK, int_res__D, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff_r #1 (Q, viol_0, delayed_CK, int_res__D, int_res__RD, xcr_0);

   `else
        scl40_htc50_dff_r (Q, viol_0, delayed_CK, int_res__D, int_res__RD, xcr_0);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, _net_6);
or U8 (cond11, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, _net_8);
and U11 (_net_10, RD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SE, SI);
or U14 (cond10, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, _net_13, RD);
not U17 (_net_14, SE);
and U18 (cond0, _net_14, RD);
not U19 (_net_15, D);
not U20 (_net_16, CK);
not U21 (_net_17, SI);
and U22 (_net_18, _net_15, _net_16, SE, _net_17);
not U23 (_net_19, CK);
not U24 (_net_20, SI);
and U25 (_net_21, D, _net_19, SE, _net_20);
not U26 (_net_22, D);
not U27 (_net_23, CK);
not U28 (_net_24, SE);
and U29 (_net_25, _net_22, _net_23, _net_24);
or U30 (cond9, _net_18, _net_21, _net_25);
not U31 (_net_26, CK);
not U32 (_net_27, SE);
and U33 (_net_28, D, _net_26, _net_27);
not U34 (_net_29, CK);
and U35 (_net_30, D, _net_29, SE, SI);
not U36 (_net_31, D);
not U37 (_net_32, CK);
and U38 (_net_33, _net_31, _net_32, SE, SI);
or U39 (cond8, _net_28, _net_30, _net_33);
not U40 (_net_34, D);
and U41 (cond7, SE, _net_34, SI);
not U42 (_net_35, D);
and U43 (cond7, SE, _net_35, SI);
not U44 (_net_36, SE);
and U45 (cond6, _net_36, D);
not U46 (_net_37, SE);
and U47 (cond6, _net_37, D);
and U48 (cond5, SE, D, SI);
and U49 (cond5, SE, D, SI);
not U50 (_net_38, D);
and U51 (cond1, RD, _net_38, SI);
not U52 (_net_39, D);
and U53 (cond1, RD, _net_39, SI);
not U54 (_net_40, SI);
and U55 (cond2, RD, D, _net_40);
not U56 (_net_41, SI);
and U57 (cond2, RD, D, _net_41);
not U58 (_net_42, D);
and U59 (cond4, RD, _net_42, SE);
not U60 (_net_43, D);
and U61 (cond4, RD, _net_43, SE);
and U62 (cond3, RD, D, SE);
and U63 (cond3, RD, D, SE);

specify
if ((~(CK) & D & SE & ~(SI)) | (~(CK) & ~(D) & SE & ~(SI)) | (~(CK) & ~(D) & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & SI) | (~(CK) & D & ~(SE)) | (~(CK) & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if (CK) (negedge RD => (Q +: 1'b0))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond9 , 0 ,0, viol_0);
$width(negedge RD &&& cond8 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond5 , posedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& CK , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPRBQ_V2L50_1

//%BEGIN SEH_FSDPRBQ_V2L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPRBQ_V2L50_2 (Q, CK, D, SI, SE, RD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__D, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPRBQ_V2L50_2 (Q, CK, D, SI, SE, RD, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__D, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_r_err (xcr_0, delayed_CK, int_res__D, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff_r #1 (Q, viol_0, delayed_CK, int_res__D, int_res__RD, xcr_0);

   `else
        scl40_htc50_dff_r (Q, viol_0, delayed_CK, int_res__D, int_res__RD, xcr_0);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, _net_6);
or U8 (cond11, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, _net_8);
and U11 (_net_10, RD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SE, SI);
or U14 (cond10, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, _net_13, RD);
not U17 (_net_14, SE);
and U18 (cond0, _net_14, RD);
not U19 (_net_15, D);
not U20 (_net_16, CK);
not U21 (_net_17, SI);
and U22 (_net_18, _net_15, _net_16, SE, _net_17);
not U23 (_net_19, CK);
not U24 (_net_20, SI);
and U25 (_net_21, D, _net_19, SE, _net_20);
not U26 (_net_22, D);
not U27 (_net_23, CK);
not U28 (_net_24, SE);
and U29 (_net_25, _net_22, _net_23, _net_24);
or U30 (cond9, _net_18, _net_21, _net_25);
not U31 (_net_26, CK);
not U32 (_net_27, SE);
and U33 (_net_28, D, _net_26, _net_27);
not U34 (_net_29, CK);
and U35 (_net_30, D, _net_29, SE, SI);
not U36 (_net_31, D);
not U37 (_net_32, CK);
and U38 (_net_33, _net_31, _net_32, SE, SI);
or U39 (cond8, _net_28, _net_30, _net_33);
not U40 (_net_34, D);
and U41 (cond7, SE, _net_34, SI);
not U42 (_net_35, D);
and U43 (cond7, SE, _net_35, SI);
not U44 (_net_36, SE);
and U45 (cond6, _net_36, D);
not U46 (_net_37, SE);
and U47 (cond6, _net_37, D);
and U48 (cond5, SE, D, SI);
and U49 (cond5, SE, D, SI);
not U50 (_net_38, D);
and U51 (cond1, RD, _net_38, SI);
not U52 (_net_39, D);
and U53 (cond1, RD, _net_39, SI);
not U54 (_net_40, SI);
and U55 (cond2, RD, D, _net_40);
not U56 (_net_41, SI);
and U57 (cond2, RD, D, _net_41);
not U58 (_net_42, D);
and U59 (cond4, RD, _net_42, SE);
not U60 (_net_43, D);
and U61 (cond4, RD, _net_43, SE);
and U62 (cond3, RD, D, SE);
and U63 (cond3, RD, D, SE);

specify
if ((~(CK) & D & SE & ~(SI)) | (~(CK) & ~(D) & SE & ~(SI)) | (~(CK) & ~(D) & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & SI) | (~(CK) & D & ~(SE)) | (~(CK) & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if (CK) (negedge RD => (Q +: 1'b0))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond9 , 0 ,0, viol_0);
$width(negedge RD &&& cond8 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond5 , posedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& CK , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPRBQ_V2L50_2

//%BEGIN SEH_FSDPRBQO_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPRBQO_L50_1 (Q, SO, CK, D, SI, SE, RD, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__D, int_res__RD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPRBQO_L50_1 (Q, SO, CK, D, SI, SE, RD, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__D, int_res__RD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_r_err (xcr_0, delayed_CK, int_res__D, int_res__RD);
   scl40_htc50_dff_r (int_res_iq, viol_0, delayed_CK, int_res__D, int_res__RD, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
        buf #1 (SO, int_res_iq);

   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, _net_6);
or U8 (cond26, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, _net_8);
and U11 (_net_10, RD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SE, SI);
or U14 (cond25, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
not U16 (_net_14, SI);
and U17 (cond1, _net_13, RD, _net_14);
not U18 (_net_15, SE);
not U19 (_net_16, SI);
and U20 (cond1, _net_15, RD, _net_16);
not U21 (_net_17, SE);
and U22 (cond0, _net_17, RD, SI);
not U23 (_net_18, SE);
and U24 (cond0, _net_18, RD, SI);
not U25 (_net_19, D);
not U26 (_net_20, CK);
not U27 (_net_21, SE);
not U28 (_net_22, SI);
and U29 (cond24, _net_19, _net_20, _net_21, _net_22);
not U30 (_net_23, D);
not U31 (_net_24, CK);
not U32 (_net_25, SE);
and U33 (cond23, _net_23, _net_24, _net_25, SI);
not U34 (_net_26, D);
not U35 (_net_27, CK);
not U36 (_net_28, SI);
and U37 (cond22, _net_26, _net_27, SE, _net_28);
not U38 (_net_29, D);
not U39 (_net_30, CK);
and U40 (cond21, _net_29, _net_30, SE, SI);
not U41 (_net_31, CK);
not U42 (_net_32, SE);
not U43 (_net_33, SI);
and U44 (cond20, D, _net_31, _net_32, _net_33);
not U45 (_net_34, CK);
not U46 (_net_35, SE);
and U47 (cond19, D, _net_34, _net_35, SI);
not U48 (_net_36, CK);
not U49 (_net_37, SI);
and U50 (cond18, D, _net_36, SE, _net_37);
not U51 (_net_38, CK);
and U52 (cond17, D, _net_38, SE, SI);
not U53 (_net_39, D);
and U54 (cond9, SE, _net_39, SI);
not U55 (_net_40, D);
and U56 (cond9, SE, _net_40, SI);
not U57 (_net_41, D);
not U58 (_net_42, SE);
not U59 (_net_43, SI);
and U60 (cond16, _net_41, CK, _net_42, _net_43);
not U61 (_net_44, D);
not U62 (_net_45, SE);
and U63 (cond15, _net_44, CK, _net_45, SI);
not U64 (_net_46, D);
and U65 (cond14, _net_46, CK, SE, SI);
not U66 (_net_47, SE);
not U67 (_net_48, SI);
and U68 (cond13, D, CK, _net_47, _net_48);
not U69 (_net_49, SE);
and U70 (cond12, D, CK, _net_49, SI);
and U71 (cond10, D, CK, SE, SI);
not U72 (_net_50, SI);
and U73 (cond11, SE, CK, _net_50);
not U74 (_net_51, SE);
not U75 (_net_52, SI);
and U76 (cond8, _net_51, D, _net_52);
not U77 (_net_53, SE);
not U78 (_net_54, SI);
and U79 (cond8, _net_53, D, _net_54);
not U80 (_net_55, SE);
and U81 (cond7, _net_55, D, SI);
not U82 (_net_56, SE);
and U83 (cond7, _net_56, D, SI);
and U84 (cond6, SE, D, SI);
and U85 (cond6, SE, D, SI);
not U86 (_net_57, D);
and U87 (cond2, RD, _net_57, SI);
not U88 (_net_58, D);
and U89 (cond2, RD, _net_58, SI);
not U90 (_net_59, SI);
and U91 (cond3, RD, D, _net_59);
not U92 (_net_60, SI);
and U93 (cond3, RD, D, _net_60);
not U94 (_net_61, D);
and U95 (cond5, RD, _net_61, SE);
not U96 (_net_62, D);
and U97 (cond5, RD, _net_62, SE);
and U98 (cond4, RD, D, SE);
and U99 (cond4, RD, D, SE);

specify
if ((~(CK) & ~(D) & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
if ((~(CK) & ~(D) & ~(SE) & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & ~(SE) & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & SE & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(D) & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & D & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & SE & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond26 , 0 ,0, viol_0);
$width(negedge CK &&& cond26 , 0 ,0, viol_0);
$width(posedge CK &&& cond25 , 0 ,0, viol_0);
$width(negedge CK &&& cond25 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge D &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , negedge D &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond24 , 0 ,0, viol_0);
$width(negedge RD &&& cond23 , 0 ,0, viol_0);
$width(negedge RD &&& cond22 , 0 ,0, viol_0);
$width(negedge RD &&& cond21 , 0 ,0, viol_0);
$width(negedge RD &&& cond20 , 0 ,0, viol_0);
$width(negedge RD &&& cond19 , 0 ,0, viol_0);
$width(negedge RD &&& cond18 , 0 ,0, viol_0);
$width(negedge RD &&& cond17 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond9 , posedge CK &&& cond9 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond16 , 0 ,0, viol_0);
$width(negedge RD &&& cond15 , 0 ,0, viol_0);
$width(negedge RD &&& cond14 , 0 ,0, viol_0);
$width(negedge RD &&& cond13 , 0 ,0, viol_0);
$width(negedge RD &&& cond12 , 0 ,0, viol_0);
$width(negedge RD &&& cond10 , 0 ,0, viol_0);
$width(negedge RD &&& cond11 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond8 , posedge CK &&& cond8 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , posedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond5 , negedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPRBQO_L50_1

//%BEGIN SEH_FSDPRBQO_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPRBQO_L50_2 (Q, SO, CK, D, SI, SE, RD, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__D, int_res__RD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPRBQO_L50_2 (Q, SO, CK, D, SI, SE, RD, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__D, int_res__RD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_r_err (xcr_0, delayed_CK, int_res__D, int_res__RD);
   scl40_htc50_dff_r (int_res_iq, viol_0, delayed_CK, int_res__D, int_res__RD, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
        buf #1 (SO, int_res_iq);

   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, _net_6);
or U8 (cond26, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, _net_8);
and U11 (_net_10, RD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SE, SI);
or U14 (cond25, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
not U16 (_net_14, SI);
and U17 (cond1, _net_13, RD, _net_14);
not U18 (_net_15, SE);
not U19 (_net_16, SI);
and U20 (cond1, _net_15, RD, _net_16);
not U21 (_net_17, SE);
and U22 (cond0, _net_17, RD, SI);
not U23 (_net_18, SE);
and U24 (cond0, _net_18, RD, SI);
not U25 (_net_19, D);
not U26 (_net_20, CK);
not U27 (_net_21, SE);
not U28 (_net_22, SI);
and U29 (cond24, _net_19, _net_20, _net_21, _net_22);
not U30 (_net_23, D);
not U31 (_net_24, CK);
not U32 (_net_25, SE);
and U33 (cond23, _net_23, _net_24, _net_25, SI);
not U34 (_net_26, D);
not U35 (_net_27, CK);
not U36 (_net_28, SI);
and U37 (cond22, _net_26, _net_27, SE, _net_28);
not U38 (_net_29, D);
not U39 (_net_30, CK);
and U40 (cond21, _net_29, _net_30, SE, SI);
not U41 (_net_31, CK);
not U42 (_net_32, SE);
not U43 (_net_33, SI);
and U44 (cond20, D, _net_31, _net_32, _net_33);
not U45 (_net_34, CK);
not U46 (_net_35, SE);
and U47 (cond19, D, _net_34, _net_35, SI);
not U48 (_net_36, CK);
not U49 (_net_37, SI);
and U50 (cond18, D, _net_36, SE, _net_37);
not U51 (_net_38, CK);
and U52 (cond17, D, _net_38, SE, SI);
not U53 (_net_39, D);
and U54 (cond9, SE, _net_39, SI);
not U55 (_net_40, D);
and U56 (cond9, SE, _net_40, SI);
not U57 (_net_41, D);
not U58 (_net_42, SE);
not U59 (_net_43, SI);
and U60 (cond16, _net_41, CK, _net_42, _net_43);
not U61 (_net_44, D);
not U62 (_net_45, SE);
and U63 (cond15, _net_44, CK, _net_45, SI);
not U64 (_net_46, D);
and U65 (cond14, _net_46, CK, SE, SI);
not U66 (_net_47, SE);
not U67 (_net_48, SI);
and U68 (cond13, D, CK, _net_47, _net_48);
not U69 (_net_49, SE);
and U70 (cond12, D, CK, _net_49, SI);
and U71 (cond10, D, CK, SE, SI);
not U72 (_net_50, SI);
and U73 (cond11, SE, CK, _net_50);
not U74 (_net_51, SE);
not U75 (_net_52, SI);
and U76 (cond8, _net_51, D, _net_52);
not U77 (_net_53, SE);
not U78 (_net_54, SI);
and U79 (cond8, _net_53, D, _net_54);
not U80 (_net_55, SE);
and U81 (cond7, _net_55, D, SI);
not U82 (_net_56, SE);
and U83 (cond7, _net_56, D, SI);
and U84 (cond6, SE, D, SI);
and U85 (cond6, SE, D, SI);
not U86 (_net_57, D);
and U87 (cond2, RD, _net_57, SI);
not U88 (_net_58, D);
and U89 (cond2, RD, _net_58, SI);
not U90 (_net_59, SI);
and U91 (cond3, RD, D, _net_59);
not U92 (_net_60, SI);
and U93 (cond3, RD, D, _net_60);
not U94 (_net_61, D);
and U95 (cond5, RD, _net_61, SE);
not U96 (_net_62, D);
and U97 (cond5, RD, _net_62, SE);
and U98 (cond4, RD, D, SE);
and U99 (cond4, RD, D, SE);

specify
if ((~(CK) & ~(D) & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
if ((~(CK) & ~(D) & ~(SE) & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & ~(SE) & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & SE & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(D) & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & D & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & SE & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond26 , 0 ,0, viol_0);
$width(negedge CK &&& cond26 , 0 ,0, viol_0);
$width(posedge CK &&& cond25 , 0 ,0, viol_0);
$width(negedge CK &&& cond25 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge D &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , negedge D &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond24 , 0 ,0, viol_0);
$width(negedge RD &&& cond23 , 0 ,0, viol_0);
$width(negedge RD &&& cond22 , 0 ,0, viol_0);
$width(negedge RD &&& cond21 , 0 ,0, viol_0);
$width(negedge RD &&& cond20 , 0 ,0, viol_0);
$width(negedge RD &&& cond19 , 0 ,0, viol_0);
$width(negedge RD &&& cond18 , 0 ,0, viol_0);
$width(negedge RD &&& cond17 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond9 , posedge CK &&& cond9 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond16 , 0 ,0, viol_0);
$width(negedge RD &&& cond15 , 0 ,0, viol_0);
$width(negedge RD &&& cond14 , 0 ,0, viol_0);
$width(negedge RD &&& cond13 , 0 ,0, viol_0);
$width(negedge RD &&& cond12 , 0 ,0, viol_0);
$width(negedge RD &&& cond10 , 0 ,0, viol_0);
$width(negedge RD &&& cond11 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond8 , posedge CK &&& cond8 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , posedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond5 , negedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPRBQO_L50_2

//%BEGIN SEH_FSDPRBQO_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPRBQO_L50_4 (Q, SO, CK, D, SI, SE, RD, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__D, int_res__RD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPRBQO_L50_4 (Q, SO, CK, D, SI, SE, RD, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__D, int_res__RD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_r_err (xcr_0, delayed_CK, int_res__D, int_res__RD);
   scl40_htc50_dff_r (int_res_iq, viol_0, delayed_CK, int_res__D, int_res__RD, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
        buf #1 (SO, int_res_iq);

   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, _net_6);
or U8 (cond26, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, _net_8);
and U11 (_net_10, RD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SE, SI);
or U14 (cond25, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
not U16 (_net_14, SI);
and U17 (cond1, _net_13, RD, _net_14);
not U18 (_net_15, SE);
not U19 (_net_16, SI);
and U20 (cond1, _net_15, RD, _net_16);
not U21 (_net_17, SE);
and U22 (cond0, _net_17, RD, SI);
not U23 (_net_18, SE);
and U24 (cond0, _net_18, RD, SI);
not U25 (_net_19, D);
not U26 (_net_20, CK);
not U27 (_net_21, SE);
not U28 (_net_22, SI);
and U29 (cond24, _net_19, _net_20, _net_21, _net_22);
not U30 (_net_23, D);
not U31 (_net_24, CK);
not U32 (_net_25, SE);
and U33 (cond23, _net_23, _net_24, _net_25, SI);
not U34 (_net_26, D);
not U35 (_net_27, CK);
not U36 (_net_28, SI);
and U37 (cond22, _net_26, _net_27, SE, _net_28);
not U38 (_net_29, D);
not U39 (_net_30, CK);
and U40 (cond21, _net_29, _net_30, SE, SI);
not U41 (_net_31, CK);
not U42 (_net_32, SE);
not U43 (_net_33, SI);
and U44 (cond20, D, _net_31, _net_32, _net_33);
not U45 (_net_34, CK);
not U46 (_net_35, SE);
and U47 (cond19, D, _net_34, _net_35, SI);
not U48 (_net_36, CK);
not U49 (_net_37, SI);
and U50 (cond18, D, _net_36, SE, _net_37);
not U51 (_net_38, CK);
and U52 (cond17, D, _net_38, SE, SI);
not U53 (_net_39, D);
and U54 (cond9, SE, _net_39, SI);
not U55 (_net_40, D);
and U56 (cond9, SE, _net_40, SI);
not U57 (_net_41, D);
not U58 (_net_42, SE);
not U59 (_net_43, SI);
and U60 (cond16, _net_41, CK, _net_42, _net_43);
not U61 (_net_44, D);
not U62 (_net_45, SE);
and U63 (cond15, _net_44, CK, _net_45, SI);
not U64 (_net_46, D);
and U65 (cond14, _net_46, CK, SE, SI);
not U66 (_net_47, SE);
not U67 (_net_48, SI);
and U68 (cond13, D, CK, _net_47, _net_48);
not U69 (_net_49, SE);
and U70 (cond12, D, CK, _net_49, SI);
and U71 (cond10, D, CK, SE, SI);
not U72 (_net_50, SI);
and U73 (cond11, SE, CK, _net_50);
not U74 (_net_51, SE);
not U75 (_net_52, SI);
and U76 (cond8, _net_51, D, _net_52);
not U77 (_net_53, SE);
not U78 (_net_54, SI);
and U79 (cond8, _net_53, D, _net_54);
not U80 (_net_55, SE);
and U81 (cond7, _net_55, D, SI);
not U82 (_net_56, SE);
and U83 (cond7, _net_56, D, SI);
and U84 (cond6, SE, D, SI);
and U85 (cond6, SE, D, SI);
not U86 (_net_57, D);
and U87 (cond2, RD, _net_57, SI);
not U88 (_net_58, D);
and U89 (cond2, RD, _net_58, SI);
not U90 (_net_59, SI);
and U91 (cond3, RD, D, _net_59);
not U92 (_net_60, SI);
and U93 (cond3, RD, D, _net_60);
not U94 (_net_61, D);
and U95 (cond5, RD, _net_61, SE);
not U96 (_net_62, D);
and U97 (cond5, RD, _net_62, SE);
and U98 (cond4, RD, D, SE);
and U99 (cond4, RD, D, SE);

specify
if ((~(CK) & ~(D) & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
if ((~(CK) & ~(D) & ~(SE) & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & ~(SE) & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & SE & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(D) & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & D & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & SE & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond26 , 0 ,0, viol_0);
$width(negedge CK &&& cond26 , 0 ,0, viol_0);
$width(posedge CK &&& cond25 , 0 ,0, viol_0);
$width(negedge CK &&& cond25 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge D &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , negedge D &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond24 , 0 ,0, viol_0);
$width(negedge RD &&& cond23 , 0 ,0, viol_0);
$width(negedge RD &&& cond22 , 0 ,0, viol_0);
$width(negedge RD &&& cond21 , 0 ,0, viol_0);
$width(negedge RD &&& cond20 , 0 ,0, viol_0);
$width(negedge RD &&& cond19 , 0 ,0, viol_0);
$width(negedge RD &&& cond18 , 0 ,0, viol_0);
$width(negedge RD &&& cond17 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond9 , posedge CK &&& cond9 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond16 , 0 ,0, viol_0);
$width(negedge RD &&& cond15 , 0 ,0, viol_0);
$width(negedge RD &&& cond14 , 0 ,0, viol_0);
$width(negedge RD &&& cond13 , 0 ,0, viol_0);
$width(negedge RD &&& cond12 , 0 ,0, viol_0);
$width(negedge RD &&& cond10 , 0 ,0, viol_0);
$width(negedge RD &&& cond11 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond8 , posedge CK &&& cond8 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , posedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond5 , negedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPRBQO_L50_4

//%BEGIN SEH_FSDPRBQO_L50_8

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPRBQO_L50_8 (Q, SO, CK, D, SI, SE, RD, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__D, int_res__RD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPRBQO_L50_8 (Q, SO, CK, D, SI, SE, RD, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, RD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD;

   wire int_res__D, int_res__RD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_r_err (xcr_0, delayed_CK, int_res__D, int_res__RD);
   scl40_htc50_dff_r (int_res_iq, viol_0, delayed_CK, int_res__D, int_res__RD, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        buf #1 (Q, int_res_iq);
        buf #1 (SO, int_res_iq);

   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, _net_6);
or U8 (cond26, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, _net_8);
and U11 (_net_10, RD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SE, SI);
or U14 (cond25, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
not U16 (_net_14, SI);
and U17 (cond1, _net_13, RD, _net_14);
not U18 (_net_15, SE);
not U19 (_net_16, SI);
and U20 (cond1, _net_15, RD, _net_16);
not U21 (_net_17, SE);
and U22 (cond0, _net_17, RD, SI);
not U23 (_net_18, SE);
and U24 (cond0, _net_18, RD, SI);
not U25 (_net_19, D);
not U26 (_net_20, CK);
not U27 (_net_21, SE);
not U28 (_net_22, SI);
and U29 (cond24, _net_19, _net_20, _net_21, _net_22);
not U30 (_net_23, D);
not U31 (_net_24, CK);
not U32 (_net_25, SE);
and U33 (cond23, _net_23, _net_24, _net_25, SI);
not U34 (_net_26, D);
not U35 (_net_27, CK);
not U36 (_net_28, SI);
and U37 (cond22, _net_26, _net_27, SE, _net_28);
not U38 (_net_29, D);
not U39 (_net_30, CK);
and U40 (cond21, _net_29, _net_30, SE, SI);
not U41 (_net_31, CK);
not U42 (_net_32, SE);
not U43 (_net_33, SI);
and U44 (cond20, D, _net_31, _net_32, _net_33);
not U45 (_net_34, CK);
not U46 (_net_35, SE);
and U47 (cond19, D, _net_34, _net_35, SI);
not U48 (_net_36, CK);
not U49 (_net_37, SI);
and U50 (cond18, D, _net_36, SE, _net_37);
not U51 (_net_38, CK);
and U52 (cond17, D, _net_38, SE, SI);
not U53 (_net_39, D);
and U54 (cond9, SE, _net_39, SI);
not U55 (_net_40, D);
and U56 (cond9, SE, _net_40, SI);
not U57 (_net_41, D);
not U58 (_net_42, SE);
not U59 (_net_43, SI);
and U60 (cond16, _net_41, CK, _net_42, _net_43);
not U61 (_net_44, D);
not U62 (_net_45, SE);
and U63 (cond15, _net_44, CK, _net_45, SI);
not U64 (_net_46, D);
and U65 (cond14, _net_46, CK, SE, SI);
not U66 (_net_47, SE);
not U67 (_net_48, SI);
and U68 (cond13, D, CK, _net_47, _net_48);
not U69 (_net_49, SE);
and U70 (cond12, D, CK, _net_49, SI);
and U71 (cond10, D, CK, SE, SI);
not U72 (_net_50, SI);
and U73 (cond11, SE, CK, _net_50);
not U74 (_net_51, SE);
not U75 (_net_52, SI);
and U76 (cond8, _net_51, D, _net_52);
not U77 (_net_53, SE);
not U78 (_net_54, SI);
and U79 (cond8, _net_53, D, _net_54);
not U80 (_net_55, SE);
and U81 (cond7, _net_55, D, SI);
not U82 (_net_56, SE);
and U83 (cond7, _net_56, D, SI);
and U84 (cond6, SE, D, SI);
and U85 (cond6, SE, D, SI);
not U86 (_net_57, D);
and U87 (cond2, RD, _net_57, SI);
not U88 (_net_58, D);
and U89 (cond2, RD, _net_58, SI);
not U90 (_net_59, SI);
and U91 (cond3, RD, D, _net_59);
not U92 (_net_60, SI);
and U93 (cond3, RD, D, _net_60);
not U94 (_net_61, D);
and U95 (cond5, RD, _net_61, SE);
not U96 (_net_62, D);
and U97 (cond5, RD, _net_62, SE);
and U98 (cond4, RD, D, SE);
and U99 (cond4, RD, D, SE);

specify
if ((~(CK) & ~(D) & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(D) & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & D & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & SE & ~(SI))) (negedge RD => (Q +: 1'b0))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
if ((~(CK) & ~(D) & ~(SE) & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & ~(SE) & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & SE & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(D) & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & ~(SE) & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(D) & ~(SE) & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(D) & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & D & ~(SE) & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & D & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & SE & ~(SI))) (negedge RD => (SO +: 1'b0))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond26 , 0 ,0, viol_0);
$width(negedge CK &&& cond26 , 0 ,0, viol_0);
$width(posedge CK &&& cond25 , 0 ,0, viol_0);
$width(negedge CK &&& cond25 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge D &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond1 , negedge D &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond24 , 0 ,0, viol_0);
$width(negedge RD &&& cond23 , 0 ,0, viol_0);
$width(negedge RD &&& cond22 , 0 ,0, viol_0);
$width(negedge RD &&& cond21 , 0 ,0, viol_0);
$width(negedge RD &&& cond20 , 0 ,0, viol_0);
$width(negedge RD &&& cond19 , 0 ,0, viol_0);
$width(negedge RD &&& cond18 , 0 ,0, viol_0);
$width(negedge RD &&& cond17 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond9 , posedge CK &&& cond9 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond16 , 0 ,0, viol_0);
$width(negedge RD &&& cond15 , 0 ,0, viol_0);
$width(negedge RD &&& cond14 , 0 ,0, viol_0);
$width(negedge RD &&& cond13 , 0 ,0, viol_0);
$width(negedge RD &&& cond12 , 0 ,0, viol_0);
$width(negedge RD &&& cond10 , 0 ,0, viol_0);
$width(negedge RD &&& cond11 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond8 , posedge CK &&& cond8 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond5 , posedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond5 , negedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPRBQO_L50_8

//%BEGIN SEH_FSDPRBSBQ_DL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPRBSBQ_DL50_1 (Q, CK, D, SI, SE, RD, SD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD, delayed_SD;

   wire int_res__D, int_res__SD, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPRBSBQ_DL50_1 (Q, CK, D, SI, SE, RD, SD, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD, delayed_SD;

   wire int_res__D, int_res__SD, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__SD, delayed_SD);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_sr_err (xcr_0, delayed_CK, int_res__D, int_res__SD, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff_sr_0 #1 (Q, viol_0, delayed_CK, int_res__D, int_res__SD, int_res__RD, xcr_0);
   `else
        scl40_htc50_dff_sr_0 (Q, viol_0, delayed_CK, int_res__D, int_res__SD, int_res__RD, xcr_0);
    `endif

    `ifdef VIRL_functiononly

    `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SD, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SD, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, SD, _net_6);
or U8 (cond20, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, SD, _net_8);
and U11 (_net_10, RD, D, SD, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SD, SE, SI);
or U14 (cond19, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, SD, RD, _net_13);
not U17 (_net_14, SE);
and U18 (cond0, SD, RD, _net_14);
not U19 (_net_15, D);
not U20 (_net_16, CK);
not U21 (_net_17, SI);
and U22 (_net_18, _net_15, _net_16, SD, SE, _net_17);
not U23 (_net_19, CK);
not U24 (_net_20, SI);
and U25 (_net_21, D, _net_19, SD, SE, _net_20);
not U26 (_net_22, D);
not U27 (_net_23, CK);
not U28 (_net_24, SE);
and U29 (_net_25, _net_22, _net_23, SD, _net_24);
or U30 (cond12, _net_18, _net_21, _net_25);
not U31 (_net_26, CK);
not U32 (_net_27, SE);
and U33 (_net_28, D, _net_26, SD, _net_27);
not U34 (_net_29, CK);
and U35 (_net_30, D, _net_29, SD, SE, SI);
not U36 (_net_31, D);
not U37 (_net_32, CK);
and U38 (_net_33, _net_31, _net_32, SD, SE, SI);
or U39 (cond11, _net_28, _net_30, _net_33);
not U40 (_net_34, D);
not U41 (_net_35, CK);
not U42 (_net_36, SI);
and U43 (_net_37, _net_34, _net_35, SE, _net_36);
not U44 (_net_38, CK);
not U45 (_net_39, SI);
and U46 (_net_40, D, _net_38, SE, _net_39);
not U47 (_net_41, D);
not U48 (_net_42, CK);
not U49 (_net_43, SE);
and U50 (_net_44, _net_41, _net_42, _net_43);
or U51 (cond9, _net_37, _net_40, _net_44);
not U52 (_net_45, D);
not U53 (_net_46, CK);
not U54 (_net_47, SI);
and U55 (_net_48, _net_45, _net_46, SE, _net_47);
not U56 (_net_49, CK);
not U57 (_net_50, SI);
and U58 (_net_51, D, _net_49, SE, _net_50);
not U59 (_net_52, D);
not U60 (_net_53, CK);
not U61 (_net_54, SE);
and U62 (_net_55, _net_52, _net_53, _net_54);
or U63 (cond9, _net_48, _net_51, _net_55);
not U64 (_net_56, CK);
not U65 (_net_57, SE);
and U66 (_net_58, D, _net_56, _net_57);
not U67 (_net_59, CK);
and U68 (_net_60, D, _net_59, SE, SI);
not U69 (_net_61, D);
not U70 (_net_62, CK);
and U71 (_net_63, _net_61, _net_62, SE, SI);
or U72 (cond8, _net_58, _net_60, _net_63);
not U73 (_net_64, CK);
not U74 (_net_65, SE);
and U75 (_net_66, D, _net_64, _net_65);
not U76 (_net_67, CK);
and U77 (_net_68, D, _net_67, SE, SI);
not U78 (_net_69, D);
not U79 (_net_70, CK);
and U80 (_net_71, _net_69, _net_70, SE, SI);
or U81 (cond8, _net_66, _net_68, _net_71);
not U82 (_net_72, D);
and U83 (cond7, SD, _net_72, SE, SI);
not U84 (_net_73, D);
and U85 (cond7, SD, _net_73, SE, SI);
and U86 (cond10, SD, CK);
not U87 (_net_74, SE);
and U88 (cond6, SD, D, _net_74);
not U89 (_net_75, SE);
and U90 (cond6, SD, D, _net_75);
and U91 (cond5, SD, D, SE, SI);
and U92 (cond5, SD, D, SE, SI);
not U93 (_net_76, D);
not U94 (_net_77, CK);
not U95 (_net_78, SI);
and U96 (_net_79, _net_76, _net_77, RD, SE, _net_78);
not U97 (_net_80, CK);
not U98 (_net_81, SI);
and U99 (_net_82, D, _net_80, RD, SE, _net_81);
not U100 (_net_83, D);
not U101 (_net_84, CK);
not U102 (_net_85, SE);
and U103 (_net_86, _net_83, _net_84, RD, _net_85);
or U104 (cond18, _net_79, _net_82, _net_86);
not U105 (_net_87, CK);
not U106 (_net_88, SE);
and U107 (_net_89, D, _net_87, RD, _net_88);
not U108 (_net_90, CK);
and U109 (_net_91, D, _net_90, RD, SE, SI);
not U110 (_net_92, D);
not U111 (_net_93, CK);
and U112 (_net_94, _net_92, _net_93, RD, SE, SI);
or U113 (cond17, _net_89, _net_91, _net_94);
not U114 (_net_95, D);
not U115 (_net_96, CK);
not U116 (_net_97, SI);
and U117 (_net_98, _net_95, _net_96, SE, _net_97);
not U118 (_net_99, CK);
not U119 (_net_100, SI);
and U120 (_net_101, D, _net_99, SE, _net_100);
not U121 (_net_102, D);
not U122 (_net_103, CK);
not U123 (_net_104, SE);
and U124 (_net_105, _net_102, _net_103, _net_104);
or U125 (cond9, _net_98, _net_101, _net_105);
not U126 (_net_106, D);
not U127 (_net_107, CK);
not U128 (_net_108, SI);
and U129 (_net_109, _net_106, _net_107, SE, _net_108);
not U130 (_net_110, CK);
not U131 (_net_111, SI);
and U132 (_net_112, D, _net_110, SE, _net_111);
not U133 (_net_113, D);
not U134 (_net_114, CK);
not U135 (_net_115, SE);
and U136 (_net_116, _net_113, _net_114, _net_115);
or U137 (cond9, _net_109, _net_112, _net_116);
not U138 (_net_117, CK);
not U139 (_net_118, SE);
and U140 (_net_119, D, _net_117, _net_118);
not U141 (_net_120, CK);
and U142 (_net_121, D, _net_120, SE, SI);
not U143 (_net_122, D);
not U144 (_net_123, CK);
and U145 (_net_124, _net_122, _net_123, SE, SI);
or U146 (cond8, _net_119, _net_121, _net_124);
not U147 (_net_125, CK);
not U148 (_net_126, SE);
and U149 (_net_127, D, _net_125, _net_126);
not U150 (_net_128, CK);
and U151 (_net_129, D, _net_128, SE, SI);
not U152 (_net_130, D);
not U153 (_net_131, CK);
and U154 (_net_132, _net_130, _net_131, SE, SI);
or U155 (cond8, _net_127, _net_129, _net_132);
not U156 (_net_133, D);
not U157 (_net_134, SE);
and U158 (cond15, RD, _net_133, _net_134);
not U159 (_net_135, D);
not U160 (_net_136, SE);
and U161 (cond15, RD, _net_135, _net_136);
not U162 (_net_137, D);
not U163 (_net_138, SI);
and U164 (cond14, RD, _net_137, SE, _net_138);
not U165 (_net_139, D);
not U166 (_net_140, SI);
and U167 (cond14, RD, _net_139, SE, _net_140);
and U168 (cond16, RD, CK);
not U169 (_net_141, SI);
and U170 (cond13, RD, D, SE, _net_141);
not U171 (_net_142, SI);
and U172 (cond13, RD, D, SE, _net_142);
not U173 (_net_143, D);
and U174 (cond1, RD, _net_143, SD, SI);
not U175 (_net_144, D);
and U176 (cond1, RD, _net_144, SD, SI);
not U177 (_net_145, SI);
and U178 (cond2, RD, D, SD, _net_145);
not U179 (_net_146, SI);
and U180 (cond2, RD, D, SD, _net_146);
not U181 (_net_147, D);
and U182 (cond4, RD, _net_147, SD, SE);
not U183 (_net_148, D);
and U184 (cond4, RD, _net_148, SD, SE);
and U185 (cond3, RD, D, SD, SE);
and U186 (cond3, RD, D, SD, SE);

specify
if ((~(CK) & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & D & SD & SE & ~(SI)) | (~(CK) & ~(D) & SD & SE & ~(SI)) | (~(CK) & ~(D) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SD & SE & SI) | (~(CK) & D & SD & ~(SE)) | (~(CK) & ~(D) & SD & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & RD & SE & ~(SI)) | (~(CK) & ~(D) & RD & SE & ~(SI)) | (~(CK) & ~(D) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & RD & SE & SI) | (~(CK) & D & RD & ~(SE)) | (~(CK) & ~(D) & RD & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond20 , 0 ,0, viol_0);
$width(negedge CK &&& cond20 , 0 ,0, viol_0);
$width(posedge CK &&& cond19 , 0 ,0, viol_0);
$width(negedge CK &&& cond19 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond12 , 0 ,0, viol_0);
$width(negedge RD &&& cond11 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond9 , posedge RD &&& cond9 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$setuphold(posedge SD &&& cond8 , posedge RD &&& cond8 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$recrem(posedge RD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond10 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond5 , posedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge SD &&& CK , posedge RD &&& CK , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge SD &&& cond18 , 0 ,0, viol_0);
$width(negedge SD &&& cond17 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond9 , posedge SD &&& cond9 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond8 , posedge SD &&& cond8 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$recrem(posedge SD &&& cond15 , posedge CK &&& cond15 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond14 , posedge CK &&& cond14 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond16 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond13 , posedge CK &&& cond13 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$setuphold(posedge RD &&& CK , posedge SD &&& CK , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_FSDPRBSBQ_DL50_1

//%BEGIN SEH_FSDPRBSBQ_DL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPRBSBQ_DL50_2 (Q, CK, D, SI, SE, RD, SD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD, delayed_SD;

   wire int_res__D, int_res__SD, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPRBSBQ_DL50_2 (Q, CK, D, SI, SE, RD, SD, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD, delayed_SD;

   wire int_res__D, int_res__SD, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__SD, delayed_SD);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_sr_err (xcr_0, delayed_CK, int_res__D, int_res__SD, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff_sr_0 #1 (Q, viol_0, delayed_CK, int_res__D, int_res__SD, int_res__RD, xcr_0);
   `else
        scl40_htc50_dff_sr_0 (Q, viol_0, delayed_CK, int_res__D, int_res__SD, int_res__RD, xcr_0);
    `endif

    `ifdef VIRL_functiononly

    `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SD, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SD, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, SD, _net_6);
or U8 (cond20, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, SD, _net_8);
and U11 (_net_10, RD, D, SD, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SD, SE, SI);
or U14 (cond19, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, SD, RD, _net_13);
not U17 (_net_14, SE);
and U18 (cond0, SD, RD, _net_14);
not U19 (_net_15, D);
not U20 (_net_16, CK);
not U21 (_net_17, SI);
and U22 (_net_18, _net_15, _net_16, SD, SE, _net_17);
not U23 (_net_19, CK);
not U24 (_net_20, SI);
and U25 (_net_21, D, _net_19, SD, SE, _net_20);
not U26 (_net_22, D);
not U27 (_net_23, CK);
not U28 (_net_24, SE);
and U29 (_net_25, _net_22, _net_23, SD, _net_24);
or U30 (cond12, _net_18, _net_21, _net_25);
not U31 (_net_26, CK);
not U32 (_net_27, SE);
and U33 (_net_28, D, _net_26, SD, _net_27);
not U34 (_net_29, CK);
and U35 (_net_30, D, _net_29, SD, SE, SI);
not U36 (_net_31, D);
not U37 (_net_32, CK);
and U38 (_net_33, _net_31, _net_32, SD, SE, SI);
or U39 (cond11, _net_28, _net_30, _net_33);
not U40 (_net_34, D);
not U41 (_net_35, CK);
not U42 (_net_36, SI);
and U43 (_net_37, _net_34, _net_35, SE, _net_36);
not U44 (_net_38, CK);
not U45 (_net_39, SI);
and U46 (_net_40, D, _net_38, SE, _net_39);
not U47 (_net_41, D);
not U48 (_net_42, CK);
not U49 (_net_43, SE);
and U50 (_net_44, _net_41, _net_42, _net_43);
or U51 (cond9, _net_37, _net_40, _net_44);
not U52 (_net_45, D);
not U53 (_net_46, CK);
not U54 (_net_47, SI);
and U55 (_net_48, _net_45, _net_46, SE, _net_47);
not U56 (_net_49, CK);
not U57 (_net_50, SI);
and U58 (_net_51, D, _net_49, SE, _net_50);
not U59 (_net_52, D);
not U60 (_net_53, CK);
not U61 (_net_54, SE);
and U62 (_net_55, _net_52, _net_53, _net_54);
or U63 (cond9, _net_48, _net_51, _net_55);
not U64 (_net_56, CK);
not U65 (_net_57, SE);
and U66 (_net_58, D, _net_56, _net_57);
not U67 (_net_59, CK);
and U68 (_net_60, D, _net_59, SE, SI);
not U69 (_net_61, D);
not U70 (_net_62, CK);
and U71 (_net_63, _net_61, _net_62, SE, SI);
or U72 (cond8, _net_58, _net_60, _net_63);
not U73 (_net_64, CK);
not U74 (_net_65, SE);
and U75 (_net_66, D, _net_64, _net_65);
not U76 (_net_67, CK);
and U77 (_net_68, D, _net_67, SE, SI);
not U78 (_net_69, D);
not U79 (_net_70, CK);
and U80 (_net_71, _net_69, _net_70, SE, SI);
or U81 (cond8, _net_66, _net_68, _net_71);
not U82 (_net_72, D);
and U83 (cond7, SD, _net_72, SE, SI);
not U84 (_net_73, D);
and U85 (cond7, SD, _net_73, SE, SI);
and U86 (cond10, SD, CK);
not U87 (_net_74, SE);
and U88 (cond6, SD, D, _net_74);
not U89 (_net_75, SE);
and U90 (cond6, SD, D, _net_75);
and U91 (cond5, SD, D, SE, SI);
and U92 (cond5, SD, D, SE, SI);
not U93 (_net_76, D);
not U94 (_net_77, CK);
not U95 (_net_78, SI);
and U96 (_net_79, _net_76, _net_77, RD, SE, _net_78);
not U97 (_net_80, CK);
not U98 (_net_81, SI);
and U99 (_net_82, D, _net_80, RD, SE, _net_81);
not U100 (_net_83, D);
not U101 (_net_84, CK);
not U102 (_net_85, SE);
and U103 (_net_86, _net_83, _net_84, RD, _net_85);
or U104 (cond18, _net_79, _net_82, _net_86);
not U105 (_net_87, CK);
not U106 (_net_88, SE);
and U107 (_net_89, D, _net_87, RD, _net_88);
not U108 (_net_90, CK);
and U109 (_net_91, D, _net_90, RD, SE, SI);
not U110 (_net_92, D);
not U111 (_net_93, CK);
and U112 (_net_94, _net_92, _net_93, RD, SE, SI);
or U113 (cond17, _net_89, _net_91, _net_94);
not U114 (_net_95, D);
not U115 (_net_96, CK);
not U116 (_net_97, SI);
and U117 (_net_98, _net_95, _net_96, SE, _net_97);
not U118 (_net_99, CK);
not U119 (_net_100, SI);
and U120 (_net_101, D, _net_99, SE, _net_100);
not U121 (_net_102, D);
not U122 (_net_103, CK);
not U123 (_net_104, SE);
and U124 (_net_105, _net_102, _net_103, _net_104);
or U125 (cond9, _net_98, _net_101, _net_105);
not U126 (_net_106, D);
not U127 (_net_107, CK);
not U128 (_net_108, SI);
and U129 (_net_109, _net_106, _net_107, SE, _net_108);
not U130 (_net_110, CK);
not U131 (_net_111, SI);
and U132 (_net_112, D, _net_110, SE, _net_111);
not U133 (_net_113, D);
not U134 (_net_114, CK);
not U135 (_net_115, SE);
and U136 (_net_116, _net_113, _net_114, _net_115);
or U137 (cond9, _net_109, _net_112, _net_116);
not U138 (_net_117, CK);
not U139 (_net_118, SE);
and U140 (_net_119, D, _net_117, _net_118);
not U141 (_net_120, CK);
and U142 (_net_121, D, _net_120, SE, SI);
not U143 (_net_122, D);
not U144 (_net_123, CK);
and U145 (_net_124, _net_122, _net_123, SE, SI);
or U146 (cond8, _net_119, _net_121, _net_124);
not U147 (_net_125, CK);
not U148 (_net_126, SE);
and U149 (_net_127, D, _net_125, _net_126);
not U150 (_net_128, CK);
and U151 (_net_129, D, _net_128, SE, SI);
not U152 (_net_130, D);
not U153 (_net_131, CK);
and U154 (_net_132, _net_130, _net_131, SE, SI);
or U155 (cond8, _net_127, _net_129, _net_132);
not U156 (_net_133, D);
not U157 (_net_134, SE);
and U158 (cond15, RD, _net_133, _net_134);
not U159 (_net_135, D);
not U160 (_net_136, SE);
and U161 (cond15, RD, _net_135, _net_136);
not U162 (_net_137, D);
not U163 (_net_138, SI);
and U164 (cond14, RD, _net_137, SE, _net_138);
not U165 (_net_139, D);
not U166 (_net_140, SI);
and U167 (cond14, RD, _net_139, SE, _net_140);
and U168 (cond16, RD, CK);
not U169 (_net_141, SI);
and U170 (cond13, RD, D, SE, _net_141);
not U171 (_net_142, SI);
and U172 (cond13, RD, D, SE, _net_142);
not U173 (_net_143, D);
and U174 (cond1, RD, _net_143, SD, SI);
not U175 (_net_144, D);
and U176 (cond1, RD, _net_144, SD, SI);
not U177 (_net_145, SI);
and U178 (cond2, RD, D, SD, _net_145);
not U179 (_net_146, SI);
and U180 (cond2, RD, D, SD, _net_146);
not U181 (_net_147, D);
and U182 (cond4, RD, _net_147, SD, SE);
not U183 (_net_148, D);
and U184 (cond4, RD, _net_148, SD, SE);
and U185 (cond3, RD, D, SD, SE);
and U186 (cond3, RD, D, SD, SE);

specify
if ((~(CK) & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & D & SD & SE & ~(SI)) | (~(CK) & ~(D) & SD & SE & ~(SI)) | (~(CK) & ~(D) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SD & SE & SI) | (~(CK) & D & SD & ~(SE)) | (~(CK) & ~(D) & SD & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & RD & SE & ~(SI)) | (~(CK) & ~(D) & RD & SE & ~(SI)) | (~(CK) & ~(D) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & RD & SE & SI) | (~(CK) & D & RD & ~(SE)) | (~(CK) & ~(D) & RD & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond20 , 0 ,0, viol_0);
$width(negedge CK &&& cond20 , 0 ,0, viol_0);
$width(posedge CK &&& cond19 , 0 ,0, viol_0);
$width(negedge CK &&& cond19 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond12 , 0 ,0, viol_0);
$width(negedge RD &&& cond11 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond9 , posedge RD &&& cond9 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$setuphold(posedge SD &&& cond8 , posedge RD &&& cond8 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$recrem(posedge RD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond10 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond5 , posedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge SD &&& CK , posedge RD &&& CK , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge SD &&& cond18 , 0 ,0, viol_0);
$width(negedge SD &&& cond17 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond9 , posedge SD &&& cond9 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond8 , posedge SD &&& cond8 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$recrem(posedge SD &&& cond15 , posedge CK &&& cond15 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond14 , posedge CK &&& cond14 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond16 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond13 , posedge CK &&& cond13 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$setuphold(posedge RD &&& CK , posedge SD &&& CK , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_FSDPRBSBQ_DL50_2

//%BEGIN SEH_FSDPRBSBQ_DL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPRBSBQ_DL50_4 (Q, CK, D, SI, SE, RD, SD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD, delayed_SD;

   wire int_res__D, int_res__SD, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPRBSBQ_DL50_4 (Q, CK, D, SI, SE, RD, SD, VDD, VSS);
   output Q;
   input CK, D, SI, SE, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD, delayed_SD;

   wire int_res__D, int_res__SD, int_res__RD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__SD, delayed_SD);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_sr_err (xcr_0, delayed_CK, int_res__D, int_res__SD, int_res__RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff_sr_0 #1 (Q, viol_0, delayed_CK, int_res__D, int_res__SD, int_res__RD, xcr_0);
   `else
        scl40_htc50_dff_sr_0 (Q, viol_0, delayed_CK, int_res__D, int_res__SD, int_res__RD, xcr_0);
    `endif

    `ifdef VIRL_functiononly

    `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SD, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SD, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, SD, _net_6);
or U8 (cond20, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, SD, _net_8);
and U11 (_net_10, RD, D, SD, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SD, SE, SI);
or U14 (cond19, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, SD, RD, _net_13);
not U17 (_net_14, SE);
and U18 (cond0, SD, RD, _net_14);
not U19 (_net_15, D);
not U20 (_net_16, CK);
not U21 (_net_17, SI);
and U22 (_net_18, _net_15, _net_16, SD, SE, _net_17);
not U23 (_net_19, CK);
not U24 (_net_20, SI);
and U25 (_net_21, D, _net_19, SD, SE, _net_20);
not U26 (_net_22, D);
not U27 (_net_23, CK);
not U28 (_net_24, SE);
and U29 (_net_25, _net_22, _net_23, SD, _net_24);
or U30 (cond12, _net_18, _net_21, _net_25);
not U31 (_net_26, CK);
not U32 (_net_27, SE);
and U33 (_net_28, D, _net_26, SD, _net_27);
not U34 (_net_29, CK);
and U35 (_net_30, D, _net_29, SD, SE, SI);
not U36 (_net_31, D);
not U37 (_net_32, CK);
and U38 (_net_33, _net_31, _net_32, SD, SE, SI);
or U39 (cond11, _net_28, _net_30, _net_33);
not U40 (_net_34, D);
not U41 (_net_35, CK);
not U42 (_net_36, SI);
and U43 (_net_37, _net_34, _net_35, SE, _net_36);
not U44 (_net_38, CK);
not U45 (_net_39, SI);
and U46 (_net_40, D, _net_38, SE, _net_39);
not U47 (_net_41, D);
not U48 (_net_42, CK);
not U49 (_net_43, SE);
and U50 (_net_44, _net_41, _net_42, _net_43);
or U51 (cond9, _net_37, _net_40, _net_44);
not U52 (_net_45, D);
not U53 (_net_46, CK);
not U54 (_net_47, SI);
and U55 (_net_48, _net_45, _net_46, SE, _net_47);
not U56 (_net_49, CK);
not U57 (_net_50, SI);
and U58 (_net_51, D, _net_49, SE, _net_50);
not U59 (_net_52, D);
not U60 (_net_53, CK);
not U61 (_net_54, SE);
and U62 (_net_55, _net_52, _net_53, _net_54);
or U63 (cond9, _net_48, _net_51, _net_55);
not U64 (_net_56, CK);
not U65 (_net_57, SE);
and U66 (_net_58, D, _net_56, _net_57);
not U67 (_net_59, CK);
and U68 (_net_60, D, _net_59, SE, SI);
not U69 (_net_61, D);
not U70 (_net_62, CK);
and U71 (_net_63, _net_61, _net_62, SE, SI);
or U72 (cond8, _net_58, _net_60, _net_63);
not U73 (_net_64, CK);
not U74 (_net_65, SE);
and U75 (_net_66, D, _net_64, _net_65);
not U76 (_net_67, CK);
and U77 (_net_68, D, _net_67, SE, SI);
not U78 (_net_69, D);
not U79 (_net_70, CK);
and U80 (_net_71, _net_69, _net_70, SE, SI);
or U81 (cond8, _net_66, _net_68, _net_71);
not U82 (_net_72, D);
and U83 (cond7, SD, _net_72, SE, SI);
not U84 (_net_73, D);
and U85 (cond7, SD, _net_73, SE, SI);
and U86 (cond10, SD, CK);
not U87 (_net_74, SE);
and U88 (cond6, SD, D, _net_74);
not U89 (_net_75, SE);
and U90 (cond6, SD, D, _net_75);
and U91 (cond5, SD, D, SE, SI);
and U92 (cond5, SD, D, SE, SI);
not U93 (_net_76, D);
not U94 (_net_77, CK);
not U95 (_net_78, SI);
and U96 (_net_79, _net_76, _net_77, RD, SE, _net_78);
not U97 (_net_80, CK);
not U98 (_net_81, SI);
and U99 (_net_82, D, _net_80, RD, SE, _net_81);
not U100 (_net_83, D);
not U101 (_net_84, CK);
not U102 (_net_85, SE);
and U103 (_net_86, _net_83, _net_84, RD, _net_85);
or U104 (cond18, _net_79, _net_82, _net_86);
not U105 (_net_87, CK);
not U106 (_net_88, SE);
and U107 (_net_89, D, _net_87, RD, _net_88);
not U108 (_net_90, CK);
and U109 (_net_91, D, _net_90, RD, SE, SI);
not U110 (_net_92, D);
not U111 (_net_93, CK);
and U112 (_net_94, _net_92, _net_93, RD, SE, SI);
or U113 (cond17, _net_89, _net_91, _net_94);
not U114 (_net_95, D);
not U115 (_net_96, CK);
not U116 (_net_97, SI);
and U117 (_net_98, _net_95, _net_96, SE, _net_97);
not U118 (_net_99, CK);
not U119 (_net_100, SI);
and U120 (_net_101, D, _net_99, SE, _net_100);
not U121 (_net_102, D);
not U122 (_net_103, CK);
not U123 (_net_104, SE);
and U124 (_net_105, _net_102, _net_103, _net_104);
or U125 (cond9, _net_98, _net_101, _net_105);
not U126 (_net_106, D);
not U127 (_net_107, CK);
not U128 (_net_108, SI);
and U129 (_net_109, _net_106, _net_107, SE, _net_108);
not U130 (_net_110, CK);
not U131 (_net_111, SI);
and U132 (_net_112, D, _net_110, SE, _net_111);
not U133 (_net_113, D);
not U134 (_net_114, CK);
not U135 (_net_115, SE);
and U136 (_net_116, _net_113, _net_114, _net_115);
or U137 (cond9, _net_109, _net_112, _net_116);
not U138 (_net_117, CK);
not U139 (_net_118, SE);
and U140 (_net_119, D, _net_117, _net_118);
not U141 (_net_120, CK);
and U142 (_net_121, D, _net_120, SE, SI);
not U143 (_net_122, D);
not U144 (_net_123, CK);
and U145 (_net_124, _net_122, _net_123, SE, SI);
or U146 (cond8, _net_119, _net_121, _net_124);
not U147 (_net_125, CK);
not U148 (_net_126, SE);
and U149 (_net_127, D, _net_125, _net_126);
not U150 (_net_128, CK);
and U151 (_net_129, D, _net_128, SE, SI);
not U152 (_net_130, D);
not U153 (_net_131, CK);
and U154 (_net_132, _net_130, _net_131, SE, SI);
or U155 (cond8, _net_127, _net_129, _net_132);
not U156 (_net_133, D);
not U157 (_net_134, SE);
and U158 (cond15, RD, _net_133, _net_134);
not U159 (_net_135, D);
not U160 (_net_136, SE);
and U161 (cond15, RD, _net_135, _net_136);
not U162 (_net_137, D);
not U163 (_net_138, SI);
and U164 (cond14, RD, _net_137, SE, _net_138);
not U165 (_net_139, D);
not U166 (_net_140, SI);
and U167 (cond14, RD, _net_139, SE, _net_140);
and U168 (cond16, RD, CK);
not U169 (_net_141, SI);
and U170 (cond13, RD, D, SE, _net_141);
not U171 (_net_142, SI);
and U172 (cond13, RD, D, SE, _net_142);
not U173 (_net_143, D);
and U174 (cond1, RD, _net_143, SD, SI);
not U175 (_net_144, D);
and U176 (cond1, RD, _net_144, SD, SI);
not U177 (_net_145, SI);
and U178 (cond2, RD, D, SD, _net_145);
not U179 (_net_146, SI);
and U180 (cond2, RD, D, SD, _net_146);
not U181 (_net_147, D);
and U182 (cond4, RD, _net_147, SD, SE);
not U183 (_net_148, D);
and U184 (cond4, RD, _net_148, SD, SE);
and U185 (cond3, RD, D, SD, SE);
and U186 (cond3, RD, D, SD, SE);

specify
if ((~(CK) & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & D & SD & SE & ~(SI)) | (~(CK) & ~(D) & SD & SE & ~(SI)) | (~(CK) & ~(D) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SD & SE & SI) | (~(CK) & D & SD & ~(SE)) | (~(CK) & ~(D) & SD & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & RD & SE & ~(SI)) | (~(CK) & ~(D) & RD & SE & ~(SI)) | (~(CK) & ~(D) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & RD & SE & SI) | (~(CK) & D & RD & ~(SE)) | (~(CK) & ~(D) & RD & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond20 , 0 ,0, viol_0);
$width(negedge CK &&& cond20 , 0 ,0, viol_0);
$width(posedge CK &&& cond19 , 0 ,0, viol_0);
$width(negedge CK &&& cond19 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond12 , 0 ,0, viol_0);
$width(negedge RD &&& cond11 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond9 , posedge RD &&& cond9 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$setuphold(posedge SD &&& cond8 , posedge RD &&& cond8 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$recrem(posedge RD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond10 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond5 , posedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge SD &&& CK , posedge RD &&& CK , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge SD &&& cond18 , 0 ,0, viol_0);
$width(negedge SD &&& cond17 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond9 , posedge SD &&& cond9 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond8 , posedge SD &&& cond8 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$recrem(posedge SD &&& cond15 , posedge CK &&& cond15 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond14 , posedge CK &&& cond14 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond16 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond13 , posedge CK &&& cond13 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$setuphold(posedge RD &&& CK , posedge SD &&& CK , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_FSDPRBSBQ_DL50_4

//%BEGIN SEH_FSDPRBSBQO_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPRBSBQO_L50_1 (Q, SO, CK, D, SI, SE, RD, SD, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD, delayed_SD;

   wire int_res__D, int_res__SD, int_res__RD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPRBSBQO_L50_1 (Q, SO, CK, D, SI, SE, RD, SD, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD, delayed_SD;

   wire int_res__D, int_res__SD, int_res__RD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__SD, delayed_SD);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_sr_err (xcr_0, delayed_CK, int_res__D, int_res__SD, int_res__RD);
   scl40_htc50_dff_sr_0 (int_res_iq, viol_0, delayed_CK, int_res__D, int_res__SD, int_res__RD, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (Q, int_res_iq);
       buf #1 (SO, int_res_iq);
   `else
       buf (Q, int_res_iq);
       buf (SO, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

    `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SD, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SD, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, SD, _net_6);
or U8 (cond20, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, SD, _net_8);
and U11 (_net_10, RD, D, SD, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SD, SE, SI);
or U14 (cond19, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, SD, RD, _net_13);
not U17 (_net_14, SE);
and U18 (cond0, SD, RD, _net_14);
not U19 (_net_15, D);
not U20 (_net_16, CK);
not U21 (_net_17, SI);
and U22 (_net_18, _net_15, _net_16, SD, SE, _net_17);
not U23 (_net_19, CK);
not U24 (_net_20, SI);
and U25 (_net_21, D, _net_19, SD, SE, _net_20);
not U26 (_net_22, D);
not U27 (_net_23, CK);
not U28 (_net_24, SE);
and U29 (_net_25, _net_22, _net_23, SD, _net_24);
or U30 (cond12, _net_18, _net_21, _net_25);
not U31 (_net_26, CK);
not U32 (_net_27, SE);
and U33 (_net_28, D, _net_26, SD, _net_27);
not U34 (_net_29, CK);
and U35 (_net_30, D, _net_29, SD, SE, SI);
not U36 (_net_31, D);
not U37 (_net_32, CK);
and U38 (_net_33, _net_31, _net_32, SD, SE, SI);
or U39 (cond11, _net_28, _net_30, _net_33);
not U40 (_net_34, D);
not U41 (_net_35, CK);
not U42 (_net_36, SI);
and U43 (_net_37, _net_34, _net_35, SE, _net_36);
not U44 (_net_38, CK);
not U45 (_net_39, SI);
and U46 (_net_40, D, _net_38, SE, _net_39);
not U47 (_net_41, D);
not U48 (_net_42, CK);
not U49 (_net_43, SE);
and U50 (_net_44, _net_41, _net_42, _net_43);
or U51 (cond9, _net_37, _net_40, _net_44);
not U52 (_net_45, D);
not U53 (_net_46, CK);
not U54 (_net_47, SI);
and U55 (_net_48, _net_45, _net_46, SE, _net_47);
not U56 (_net_49, CK);
not U57 (_net_50, SI);
and U58 (_net_51, D, _net_49, SE, _net_50);
not U59 (_net_52, D);
not U60 (_net_53, CK);
not U61 (_net_54, SE);
and U62 (_net_55, _net_52, _net_53, _net_54);
or U63 (cond9, _net_48, _net_51, _net_55);
not U64 (_net_56, CK);
not U65 (_net_57, SE);
and U66 (_net_58, D, _net_56, _net_57);
not U67 (_net_59, CK);
and U68 (_net_60, D, _net_59, SE, SI);
not U69 (_net_61, D);
not U70 (_net_62, CK);
and U71 (_net_63, _net_61, _net_62, SE, SI);
or U72 (cond8, _net_58, _net_60, _net_63);
not U73 (_net_64, CK);
not U74 (_net_65, SE);
and U75 (_net_66, D, _net_64, _net_65);
not U76 (_net_67, CK);
and U77 (_net_68, D, _net_67, SE, SI);
not U78 (_net_69, D);
not U79 (_net_70, CK);
and U80 (_net_71, _net_69, _net_70, SE, SI);
or U81 (cond8, _net_66, _net_68, _net_71);
not U82 (_net_72, D);
and U83 (cond7, SD, _net_72, SE, SI);
not U84 (_net_73, D);
and U85 (cond7, SD, _net_73, SE, SI);
and U86 (cond10, SD, CK);
not U87 (_net_74, SE);
and U88 (cond6, SD, D, _net_74);
not U89 (_net_75, SE);
and U90 (cond6, SD, D, _net_75);
and U91 (cond5, SD, D, SE, SI);
and U92 (cond5, SD, D, SE, SI);
not U93 (_net_76, D);
not U94 (_net_77, CK);
not U95 (_net_78, SI);
and U96 (_net_79, _net_76, _net_77, RD, SE, _net_78);
not U97 (_net_80, CK);
not U98 (_net_81, SI);
and U99 (_net_82, D, _net_80, RD, SE, _net_81);
not U100 (_net_83, D);
not U101 (_net_84, CK);
not U102 (_net_85, SE);
and U103 (_net_86, _net_83, _net_84, RD, _net_85);
or U104 (cond18, _net_79, _net_82, _net_86);
not U105 (_net_87, CK);
not U106 (_net_88, SE);
and U107 (_net_89, D, _net_87, RD, _net_88);
not U108 (_net_90, CK);
and U109 (_net_91, D, _net_90, RD, SE, SI);
not U110 (_net_92, D);
not U111 (_net_93, CK);
and U112 (_net_94, _net_92, _net_93, RD, SE, SI);
or U113 (cond17, _net_89, _net_91, _net_94);
not U114 (_net_95, D);
not U115 (_net_96, CK);
not U116 (_net_97, SI);
and U117 (_net_98, _net_95, _net_96, SE, _net_97);
not U118 (_net_99, CK);
not U119 (_net_100, SI);
and U120 (_net_101, D, _net_99, SE, _net_100);
not U121 (_net_102, D);
not U122 (_net_103, CK);
not U123 (_net_104, SE);
and U124 (_net_105, _net_102, _net_103, _net_104);
or U125 (cond9, _net_98, _net_101, _net_105);
not U126 (_net_106, D);
not U127 (_net_107, CK);
not U128 (_net_108, SI);
and U129 (_net_109, _net_106, _net_107, SE, _net_108);
not U130 (_net_110, CK);
not U131 (_net_111, SI);
and U132 (_net_112, D, _net_110, SE, _net_111);
not U133 (_net_113, D);
not U134 (_net_114, CK);
not U135 (_net_115, SE);
and U136 (_net_116, _net_113, _net_114, _net_115);
or U137 (cond9, _net_109, _net_112, _net_116);
not U138 (_net_117, CK);
not U139 (_net_118, SE);
and U140 (_net_119, D, _net_117, _net_118);
not U141 (_net_120, CK);
and U142 (_net_121, D, _net_120, SE, SI);
not U143 (_net_122, D);
not U144 (_net_123, CK);
and U145 (_net_124, _net_122, _net_123, SE, SI);
or U146 (cond8, _net_119, _net_121, _net_124);
not U147 (_net_125, CK);
not U148 (_net_126, SE);
and U149 (_net_127, D, _net_125, _net_126);
not U150 (_net_128, CK);
and U151 (_net_129, D, _net_128, SE, SI);
not U152 (_net_130, D);
not U153 (_net_131, CK);
and U154 (_net_132, _net_130, _net_131, SE, SI);
or U155 (cond8, _net_127, _net_129, _net_132);
not U156 (_net_133, D);
not U157 (_net_134, SE);
and U158 (cond15, RD, _net_133, _net_134);
not U159 (_net_135, D);
not U160 (_net_136, SE);
and U161 (cond15, RD, _net_135, _net_136);
not U162 (_net_137, D);
not U163 (_net_138, SI);
and U164 (cond14, RD, _net_137, SE, _net_138);
not U165 (_net_139, D);
not U166 (_net_140, SI);
and U167 (cond14, RD, _net_139, SE, _net_140);
and U168 (cond16, RD, CK);
not U169 (_net_141, SI);
and U170 (cond13, RD, D, SE, _net_141);
not U171 (_net_142, SI);
and U172 (cond13, RD, D, SE, _net_142);
not U173 (_net_143, D);
and U174 (cond1, RD, _net_143, SD, SI);
not U175 (_net_144, D);
and U176 (cond1, RD, _net_144, SD, SI);
not U177 (_net_145, SI);
and U178 (cond2, RD, D, SD, _net_145);
not U179 (_net_146, SI);
and U180 (cond2, RD, D, SD, _net_146);
not U181 (_net_147, D);
and U182 (cond4, RD, _net_147, SD, SE);
not U183 (_net_148, D);
and U184 (cond4, RD, _net_148, SD, SE);
and U185 (cond3, RD, D, SD, SE);
and U186 (cond3, RD, D, SD, SE);

specify
if ((~(CK) & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & D & SD & SE & ~(SI)) | (~(CK) & ~(D) & SD & SE & ~(SI)) | (~(CK) & ~(D) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SD & SE & SI) | (~(CK) & D & SD & ~(SE)) | (~(CK) & ~(D) & SD & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & RD & SE & ~(SI)) | (~(CK) & ~(D) & RD & SE & ~(SI)) | (~(CK) & ~(D) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & RD & SE & SI) | (~(CK) & D & RD & ~(SE)) | (~(CK) & ~(D) & RD & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
if ((~(CK) & ~(SD))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((~(CK) & D & SD & SE & ~(SI)) | (~(CK) & ~(D) & SD & SE & ~(SI)) | (~(CK) & ~(D) & SD & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & SD & SE & SI) | (~(CK) & D & SD & ~(SE)) | (~(CK) & ~(D) & SD & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((CK & SD)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & RD & SE & ~(SI)) | (~(CK) & ~(D) & RD & SE & ~(SI)) | (~(CK) & ~(D) & RD & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((~(CK) & D & RD & SE & SI) | (~(CK) & D & RD & ~(SE)) | (~(CK) & ~(D) & RD & SE & SI)) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((CK & RD)) (negedge SD => (SO -: 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond20 , 0 ,0, viol_0);
$width(negedge CK &&& cond20 , 0 ,0, viol_0);
$width(posedge CK &&& cond19 , 0 ,0, viol_0);
$width(negedge CK &&& cond19 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond12 , 0 ,0, viol_0);
$width(negedge RD &&& cond11 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond9 , posedge RD &&& cond9 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$setuphold(posedge SD &&& cond8 , posedge RD &&& cond8 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$recrem(posedge RD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond10 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond5 , posedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge SD &&& CK , posedge RD &&& CK , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge SD &&& cond18 , 0 ,0, viol_0);
$width(negedge SD &&& cond17 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond9 , posedge SD &&& cond9 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond8 , posedge SD &&& cond8 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$recrem(posedge SD &&& cond15 , posedge CK &&& cond15 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond14 , posedge CK &&& cond14 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond16 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond13 , posedge CK &&& cond13 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$setuphold(posedge RD &&& CK , posedge SD &&& CK , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPRBSBQO_L50_1

//%BEGIN SEH_FSDPRBSBQO_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPRBSBQO_L50_2 (Q, SO, CK, D, SI, SE, RD, SD, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD, delayed_SD;

   wire int_res__D, int_res__SD, int_res__RD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPRBSBQO_L50_2 (Q, SO, CK, D, SI, SE, RD, SD, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD, delayed_SD;

   wire int_res__D, int_res__SD, int_res__RD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__SD, delayed_SD);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_sr_err (xcr_0, delayed_CK, int_res__D, int_res__SD, int_res__RD);
   scl40_htc50_dff_sr_0 (int_res_iq, viol_0, delayed_CK, int_res__D, int_res__SD, int_res__RD, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (Q, int_res_iq);
       buf #1 (SO, int_res_iq);
   `else
       buf (Q, int_res_iq);
       buf (SO, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

    `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SD, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SD, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, SD, _net_6);
or U8 (cond20, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, SD, _net_8);
and U11 (_net_10, RD, D, SD, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SD, SE, SI);
or U14 (cond19, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, SD, RD, _net_13);
not U17 (_net_14, SE);
and U18 (cond0, SD, RD, _net_14);
not U19 (_net_15, D);
not U20 (_net_16, CK);
not U21 (_net_17, SI);
and U22 (_net_18, _net_15, _net_16, SD, SE, _net_17);
not U23 (_net_19, CK);
not U24 (_net_20, SI);
and U25 (_net_21, D, _net_19, SD, SE, _net_20);
not U26 (_net_22, D);
not U27 (_net_23, CK);
not U28 (_net_24, SE);
and U29 (_net_25, _net_22, _net_23, SD, _net_24);
or U30 (cond12, _net_18, _net_21, _net_25);
not U31 (_net_26, CK);
not U32 (_net_27, SE);
and U33 (_net_28, D, _net_26, SD, _net_27);
not U34 (_net_29, CK);
and U35 (_net_30, D, _net_29, SD, SE, SI);
not U36 (_net_31, D);
not U37 (_net_32, CK);
and U38 (_net_33, _net_31, _net_32, SD, SE, SI);
or U39 (cond11, _net_28, _net_30, _net_33);
not U40 (_net_34, D);
not U41 (_net_35, CK);
not U42 (_net_36, SI);
and U43 (_net_37, _net_34, _net_35, SE, _net_36);
not U44 (_net_38, CK);
not U45 (_net_39, SI);
and U46 (_net_40, D, _net_38, SE, _net_39);
not U47 (_net_41, D);
not U48 (_net_42, CK);
not U49 (_net_43, SE);
and U50 (_net_44, _net_41, _net_42, _net_43);
or U51 (cond9, _net_37, _net_40, _net_44);
not U52 (_net_45, D);
not U53 (_net_46, CK);
not U54 (_net_47, SI);
and U55 (_net_48, _net_45, _net_46, SE, _net_47);
not U56 (_net_49, CK);
not U57 (_net_50, SI);
and U58 (_net_51, D, _net_49, SE, _net_50);
not U59 (_net_52, D);
not U60 (_net_53, CK);
not U61 (_net_54, SE);
and U62 (_net_55, _net_52, _net_53, _net_54);
or U63 (cond9, _net_48, _net_51, _net_55);
not U64 (_net_56, CK);
not U65 (_net_57, SE);
and U66 (_net_58, D, _net_56, _net_57);
not U67 (_net_59, CK);
and U68 (_net_60, D, _net_59, SE, SI);
not U69 (_net_61, D);
not U70 (_net_62, CK);
and U71 (_net_63, _net_61, _net_62, SE, SI);
or U72 (cond8, _net_58, _net_60, _net_63);
not U73 (_net_64, CK);
not U74 (_net_65, SE);
and U75 (_net_66, D, _net_64, _net_65);
not U76 (_net_67, CK);
and U77 (_net_68, D, _net_67, SE, SI);
not U78 (_net_69, D);
not U79 (_net_70, CK);
and U80 (_net_71, _net_69, _net_70, SE, SI);
or U81 (cond8, _net_66, _net_68, _net_71);
not U82 (_net_72, D);
and U83 (cond7, SD, _net_72, SE, SI);
not U84 (_net_73, D);
and U85 (cond7, SD, _net_73, SE, SI);
and U86 (cond10, SD, CK);
not U87 (_net_74, SE);
and U88 (cond6, SD, D, _net_74);
not U89 (_net_75, SE);
and U90 (cond6, SD, D, _net_75);
and U91 (cond5, SD, D, SE, SI);
and U92 (cond5, SD, D, SE, SI);
not U93 (_net_76, D);
not U94 (_net_77, CK);
not U95 (_net_78, SI);
and U96 (_net_79, _net_76, _net_77, RD, SE, _net_78);
not U97 (_net_80, CK);
not U98 (_net_81, SI);
and U99 (_net_82, D, _net_80, RD, SE, _net_81);
not U100 (_net_83, D);
not U101 (_net_84, CK);
not U102 (_net_85, SE);
and U103 (_net_86, _net_83, _net_84, RD, _net_85);
or U104 (cond18, _net_79, _net_82, _net_86);
not U105 (_net_87, CK);
not U106 (_net_88, SE);
and U107 (_net_89, D, _net_87, RD, _net_88);
not U108 (_net_90, CK);
and U109 (_net_91, D, _net_90, RD, SE, SI);
not U110 (_net_92, D);
not U111 (_net_93, CK);
and U112 (_net_94, _net_92, _net_93, RD, SE, SI);
or U113 (cond17, _net_89, _net_91, _net_94);
not U114 (_net_95, D);
not U115 (_net_96, CK);
not U116 (_net_97, SI);
and U117 (_net_98, _net_95, _net_96, SE, _net_97);
not U118 (_net_99, CK);
not U119 (_net_100, SI);
and U120 (_net_101, D, _net_99, SE, _net_100);
not U121 (_net_102, D);
not U122 (_net_103, CK);
not U123 (_net_104, SE);
and U124 (_net_105, _net_102, _net_103, _net_104);
or U125 (cond9, _net_98, _net_101, _net_105);
not U126 (_net_106, D);
not U127 (_net_107, CK);
not U128 (_net_108, SI);
and U129 (_net_109, _net_106, _net_107, SE, _net_108);
not U130 (_net_110, CK);
not U131 (_net_111, SI);
and U132 (_net_112, D, _net_110, SE, _net_111);
not U133 (_net_113, D);
not U134 (_net_114, CK);
not U135 (_net_115, SE);
and U136 (_net_116, _net_113, _net_114, _net_115);
or U137 (cond9, _net_109, _net_112, _net_116);
not U138 (_net_117, CK);
not U139 (_net_118, SE);
and U140 (_net_119, D, _net_117, _net_118);
not U141 (_net_120, CK);
and U142 (_net_121, D, _net_120, SE, SI);
not U143 (_net_122, D);
not U144 (_net_123, CK);
and U145 (_net_124, _net_122, _net_123, SE, SI);
or U146 (cond8, _net_119, _net_121, _net_124);
not U147 (_net_125, CK);
not U148 (_net_126, SE);
and U149 (_net_127, D, _net_125, _net_126);
not U150 (_net_128, CK);
and U151 (_net_129, D, _net_128, SE, SI);
not U152 (_net_130, D);
not U153 (_net_131, CK);
and U154 (_net_132, _net_130, _net_131, SE, SI);
or U155 (cond8, _net_127, _net_129, _net_132);
not U156 (_net_133, D);
not U157 (_net_134, SE);
and U158 (cond15, RD, _net_133, _net_134);
not U159 (_net_135, D);
not U160 (_net_136, SE);
and U161 (cond15, RD, _net_135, _net_136);
not U162 (_net_137, D);
not U163 (_net_138, SI);
and U164 (cond14, RD, _net_137, SE, _net_138);
not U165 (_net_139, D);
not U166 (_net_140, SI);
and U167 (cond14, RD, _net_139, SE, _net_140);
and U168 (cond16, RD, CK);
not U169 (_net_141, SI);
and U170 (cond13, RD, D, SE, _net_141);
not U171 (_net_142, SI);
and U172 (cond13, RD, D, SE, _net_142);
not U173 (_net_143, D);
and U174 (cond1, RD, _net_143, SD, SI);
not U175 (_net_144, D);
and U176 (cond1, RD, _net_144, SD, SI);
not U177 (_net_145, SI);
and U178 (cond2, RD, D, SD, _net_145);
not U179 (_net_146, SI);
and U180 (cond2, RD, D, SD, _net_146);
not U181 (_net_147, D);
and U182 (cond4, RD, _net_147, SD, SE);
not U183 (_net_148, D);
and U184 (cond4, RD, _net_148, SD, SE);
and U185 (cond3, RD, D, SD, SE);
and U186 (cond3, RD, D, SD, SE);

specify
if ((~(CK) & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & D & SD & SE & ~(SI)) | (~(CK) & ~(D) & SD & SE & ~(SI)) | (~(CK) & ~(D) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SD & SE & SI) | (~(CK) & D & SD & ~(SE)) | (~(CK) & ~(D) & SD & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & RD & SE & ~(SI)) | (~(CK) & ~(D) & RD & SE & ~(SI)) | (~(CK) & ~(D) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & RD & SE & SI) | (~(CK) & D & RD & ~(SE)) | (~(CK) & ~(D) & RD & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
if ((~(CK) & ~(SD))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((~(CK) & D & SD & SE & ~(SI)) | (~(CK) & ~(D) & SD & SE & ~(SI)) | (~(CK) & ~(D) & SD & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & SD & SE & SI) | (~(CK) & D & SD & ~(SE)) | (~(CK) & ~(D) & SD & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((CK & SD)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & RD & SE & ~(SI)) | (~(CK) & ~(D) & RD & SE & ~(SI)) | (~(CK) & ~(D) & RD & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((~(CK) & D & RD & SE & SI) | (~(CK) & D & RD & ~(SE)) | (~(CK) & ~(D) & RD & SE & SI)) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((CK & RD)) (negedge SD => (SO -: 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond20 , 0 ,0, viol_0);
$width(negedge CK &&& cond20 , 0 ,0, viol_0);
$width(posedge CK &&& cond19 , 0 ,0, viol_0);
$width(negedge CK &&& cond19 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond12 , 0 ,0, viol_0);
$width(negedge RD &&& cond11 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond9 , posedge RD &&& cond9 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$setuphold(posedge SD &&& cond8 , posedge RD &&& cond8 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$recrem(posedge RD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond10 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond5 , posedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge SD &&& CK , posedge RD &&& CK , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge SD &&& cond18 , 0 ,0, viol_0);
$width(negedge SD &&& cond17 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond9 , posedge SD &&& cond9 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond8 , posedge SD &&& cond8 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$recrem(posedge SD &&& cond15 , posedge CK &&& cond15 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond14 , posedge CK &&& cond14 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond16 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond13 , posedge CK &&& cond13 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$setuphold(posedge RD &&& CK , posedge SD &&& CK , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPRBSBQO_L50_2

//%BEGIN SEH_FSDPRBSBQO_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPRBSBQO_L50_4 (Q, SO, CK, D, SI, SE, RD, SD, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, RD, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD, delayed_SD;

   wire int_res__D, int_res__SD, int_res__RD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPRBSBQO_L50_4 (Q, SO, CK, D, SI, SE, RD, SD, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, RD, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_RD, delayed_SD;

   wire int_res__D, int_res__SD, int_res__RD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_RD, RD_org);
   buf (delayed_SD, SD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__SD, delayed_SD);
   not (int_res__RD, delayed_RD);
   scl40_htc50_dff_sr_err (xcr_0, delayed_CK, int_res__D, int_res__SD, int_res__RD);
   scl40_htc50_dff_sr_0 (int_res_iq, viol_0, delayed_CK, int_res__D, int_res__SD, int_res__RD, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (Q, int_res_iq);
       buf #1 (SO, int_res_iq);
   `else
       buf (Q, int_res_iq);
       buf (SO, int_res_iq);
   `endif

   `ifdef VIRL_functiononly

    `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, RD, _net_0, SD, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, RD, D, SD, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, RD, _net_5, SD, _net_6);
or U8 (cond20, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, RD, D, SD, _net_8);
and U11 (_net_10, RD, D, SD, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, RD, _net_11, SD, SE, SI);
or U14 (cond19, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, SD, RD, _net_13);
not U17 (_net_14, SE);
and U18 (cond0, SD, RD, _net_14);
not U19 (_net_15, D);
not U20 (_net_16, CK);
not U21 (_net_17, SI);
and U22 (_net_18, _net_15, _net_16, SD, SE, _net_17);
not U23 (_net_19, CK);
not U24 (_net_20, SI);
and U25 (_net_21, D, _net_19, SD, SE, _net_20);
not U26 (_net_22, D);
not U27 (_net_23, CK);
not U28 (_net_24, SE);
and U29 (_net_25, _net_22, _net_23, SD, _net_24);
or U30 (cond12, _net_18, _net_21, _net_25);
not U31 (_net_26, CK);
not U32 (_net_27, SE);
and U33 (_net_28, D, _net_26, SD, _net_27);
not U34 (_net_29, CK);
and U35 (_net_30, D, _net_29, SD, SE, SI);
not U36 (_net_31, D);
not U37 (_net_32, CK);
and U38 (_net_33, _net_31, _net_32, SD, SE, SI);
or U39 (cond11, _net_28, _net_30, _net_33);
not U40 (_net_34, D);
not U41 (_net_35, CK);
not U42 (_net_36, SI);
and U43 (_net_37, _net_34, _net_35, SE, _net_36);
not U44 (_net_38, CK);
not U45 (_net_39, SI);
and U46 (_net_40, D, _net_38, SE, _net_39);
not U47 (_net_41, D);
not U48 (_net_42, CK);
not U49 (_net_43, SE);
and U50 (_net_44, _net_41, _net_42, _net_43);
or U51 (cond9, _net_37, _net_40, _net_44);
not U52 (_net_45, D);
not U53 (_net_46, CK);
not U54 (_net_47, SI);
and U55 (_net_48, _net_45, _net_46, SE, _net_47);
not U56 (_net_49, CK);
not U57 (_net_50, SI);
and U58 (_net_51, D, _net_49, SE, _net_50);
not U59 (_net_52, D);
not U60 (_net_53, CK);
not U61 (_net_54, SE);
and U62 (_net_55, _net_52, _net_53, _net_54);
or U63 (cond9, _net_48, _net_51, _net_55);
not U64 (_net_56, CK);
not U65 (_net_57, SE);
and U66 (_net_58, D, _net_56, _net_57);
not U67 (_net_59, CK);
and U68 (_net_60, D, _net_59, SE, SI);
not U69 (_net_61, D);
not U70 (_net_62, CK);
and U71 (_net_63, _net_61, _net_62, SE, SI);
or U72 (cond8, _net_58, _net_60, _net_63);
not U73 (_net_64, CK);
not U74 (_net_65, SE);
and U75 (_net_66, D, _net_64, _net_65);
not U76 (_net_67, CK);
and U77 (_net_68, D, _net_67, SE, SI);
not U78 (_net_69, D);
not U79 (_net_70, CK);
and U80 (_net_71, _net_69, _net_70, SE, SI);
or U81 (cond8, _net_66, _net_68, _net_71);
not U82 (_net_72, D);
and U83 (cond7, SD, _net_72, SE, SI);
not U84 (_net_73, D);
and U85 (cond7, SD, _net_73, SE, SI);
and U86 (cond10, SD, CK);
not U87 (_net_74, SE);
and U88 (cond6, SD, D, _net_74);
not U89 (_net_75, SE);
and U90 (cond6, SD, D, _net_75);
and U91 (cond5, SD, D, SE, SI);
and U92 (cond5, SD, D, SE, SI);
not U93 (_net_76, D);
not U94 (_net_77, CK);
not U95 (_net_78, SI);
and U96 (_net_79, _net_76, _net_77, RD, SE, _net_78);
not U97 (_net_80, CK);
not U98 (_net_81, SI);
and U99 (_net_82, D, _net_80, RD, SE, _net_81);
not U100 (_net_83, D);
not U101 (_net_84, CK);
not U102 (_net_85, SE);
and U103 (_net_86, _net_83, _net_84, RD, _net_85);
or U104 (cond18, _net_79, _net_82, _net_86);
not U105 (_net_87, CK);
not U106 (_net_88, SE);
and U107 (_net_89, D, _net_87, RD, _net_88);
not U108 (_net_90, CK);
and U109 (_net_91, D, _net_90, RD, SE, SI);
not U110 (_net_92, D);
not U111 (_net_93, CK);
and U112 (_net_94, _net_92, _net_93, RD, SE, SI);
or U113 (cond17, _net_89, _net_91, _net_94);
not U114 (_net_95, D);
not U115 (_net_96, CK);
not U116 (_net_97, SI);
and U117 (_net_98, _net_95, _net_96, SE, _net_97);
not U118 (_net_99, CK);
not U119 (_net_100, SI);
and U120 (_net_101, D, _net_99, SE, _net_100);
not U121 (_net_102, D);
not U122 (_net_103, CK);
not U123 (_net_104, SE);
and U124 (_net_105, _net_102, _net_103, _net_104);
or U125 (cond9, _net_98, _net_101, _net_105);
not U126 (_net_106, D);
not U127 (_net_107, CK);
not U128 (_net_108, SI);
and U129 (_net_109, _net_106, _net_107, SE, _net_108);
not U130 (_net_110, CK);
not U131 (_net_111, SI);
and U132 (_net_112, D, _net_110, SE, _net_111);
not U133 (_net_113, D);
not U134 (_net_114, CK);
not U135 (_net_115, SE);
and U136 (_net_116, _net_113, _net_114, _net_115);
or U137 (cond9, _net_109, _net_112, _net_116);
not U138 (_net_117, CK);
not U139 (_net_118, SE);
and U140 (_net_119, D, _net_117, _net_118);
not U141 (_net_120, CK);
and U142 (_net_121, D, _net_120, SE, SI);
not U143 (_net_122, D);
not U144 (_net_123, CK);
and U145 (_net_124, _net_122, _net_123, SE, SI);
or U146 (cond8, _net_119, _net_121, _net_124);
not U147 (_net_125, CK);
not U148 (_net_126, SE);
and U149 (_net_127, D, _net_125, _net_126);
not U150 (_net_128, CK);
and U151 (_net_129, D, _net_128, SE, SI);
not U152 (_net_130, D);
not U153 (_net_131, CK);
and U154 (_net_132, _net_130, _net_131, SE, SI);
or U155 (cond8, _net_127, _net_129, _net_132);
not U156 (_net_133, D);
not U157 (_net_134, SE);
and U158 (cond15, RD, _net_133, _net_134);
not U159 (_net_135, D);
not U160 (_net_136, SE);
and U161 (cond15, RD, _net_135, _net_136);
not U162 (_net_137, D);
not U163 (_net_138, SI);
and U164 (cond14, RD, _net_137, SE, _net_138);
not U165 (_net_139, D);
not U166 (_net_140, SI);
and U167 (cond14, RD, _net_139, SE, _net_140);
and U168 (cond16, RD, CK);
not U169 (_net_141, SI);
and U170 (cond13, RD, D, SE, _net_141);
not U171 (_net_142, SI);
and U172 (cond13, RD, D, SE, _net_142);
not U173 (_net_143, D);
and U174 (cond1, RD, _net_143, SD, SI);
not U175 (_net_144, D);
and U176 (cond1, RD, _net_144, SD, SI);
not U177 (_net_145, SI);
and U178 (cond2, RD, D, SD, _net_145);
not U179 (_net_146, SI);
and U180 (cond2, RD, D, SD, _net_146);
not U181 (_net_147, D);
and U182 (cond4, RD, _net_147, SD, SE);
not U183 (_net_148, D);
and U184 (cond4, RD, _net_148, SD, SE);
and U185 (cond3, RD, D, SD, SE);
and U186 (cond3, RD, D, SD, SE);

specify
if ((~(CK) & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((~(CK) & D & SD & SE & ~(SI)) | (~(CK) & ~(D) & SD & SE & ~(SI)) | (~(CK) & ~(D) & SD & ~(SE))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & SD & SE & SI) | (~(CK) & D & SD & ~(SE)) | (~(CK) & ~(D) & SD & SE & SI)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (Q +: 1'b1))=(0, 0);
if ((CK & SD)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((~(CK) & D & RD & SE & ~(SI)) | (~(CK) & ~(D) & RD & SE & ~(SI)) | (~(CK) & ~(D) & RD & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & RD & SE & SI) | (~(CK) & D & RD & ~(SE)) | (~(CK) & ~(D) & RD & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((CK & RD)) (negedge SD => (Q -: 1'b1))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
if ((~(CK) & ~(SD))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & ~(SD))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((~(CK) & D & SD & SE & ~(SI)) | (~(CK) & ~(D) & SD & SE & ~(SI)) | (~(CK) & ~(D) & SD & ~(SE))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & SD & SE & SI) | (~(CK) & D & SD & ~(SE)) | (~(CK) & ~(D) & SD & SE & SI)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((CK & ~(SD))) (posedge RD => (SO +: 1'b1))=(0, 0);
if ((CK & SD)) (negedge RD => (SO +: 1'b0))=(0, 0);
if ((~(CK) & D & RD & SE & ~(SI)) | (~(CK) & ~(D) & RD & SE & ~(SI)) | (~(CK) & ~(D) & RD & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((~(CK) & D & RD & SE & SI) | (~(CK) & D & RD & ~(SE)) | (~(CK) & ~(D) & RD & SE & SI)) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((CK & RD)) (negedge SD => (SO -: 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond20 , 0 ,0, viol_0);
$width(negedge CK &&& cond20 , 0 ,0, viol_0);
$width(posedge CK &&& cond19 , 0 ,0, viol_0);
$width(negedge CK &&& cond19 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge RD &&& cond12 , 0 ,0, viol_0);
$width(negedge RD &&& cond11 , 0 ,0, viol_0);
$setuphold(posedge SD &&& cond9 , posedge RD &&& cond9 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$setuphold(posedge SD &&& cond8 , posedge RD &&& cond8 , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$recrem(posedge RD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$width(negedge RD &&& cond10 , 0 ,0, viol_0);
$recrem(posedge RD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$recrem(posedge RD &&& cond5 , posedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_RD, delayed_CK);
$setuphold(posedge SD &&& CK , posedge RD &&& CK , 0 ,0, viol_0, , , delayed_SD, delayed_RD);
$width(negedge SD &&& cond18 , 0 ,0, viol_0);
$width(negedge SD &&& cond17 , 0 ,0, viol_0);
$setuphold(posedge RD &&& cond9 , posedge SD &&& cond9 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge RD &&& cond8 , posedge SD &&& cond8 , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$recrem(posedge SD &&& cond15 , posedge CK &&& cond15 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond14 , posedge CK &&& cond14 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& cond16 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond13 , posedge CK &&& cond13 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$setuphold(posedge RD &&& CK , posedge SD &&& CK , 0 ,0, viol_0, , , delayed_RD, delayed_SD);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPRBSBQO_L50_4

//%BEGIN SEH_FSDPSBQ_DL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPSBQ_DL50_1 (Q, CK, D, SI, SE, SD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SD;

   wire int_res__D, int_res__SD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPSBQ_DL50_1 (Q, CK, D, SI, SE, SD, VDD, VSS);
   output Q;
   input CK, D, SI, SE, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SD;

   wire int_res__D, int_res__SD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_SD, SD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__SD, delayed_SD);
   scl40_htc50_dff_s_err (xcr_0, delayed_CK, int_res__D, int_res__SD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff_s #1 (Q, viol_0, delayed_CK, int_res__D, int_res__SD, xcr_0);

    `else
        scl40_htc50_dff_s (Q, viol_0, delayed_CK, int_res__D, int_res__SD, xcr_0);

    `endif

    `ifdef VIRL_functiononly

    `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, SD, _net_5, _net_6);
or U8 (cond11, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, SD, D, _net_8);
and U11 (_net_10, SD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, SD, _net_11, SE, SI);
or U14 (cond10, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, _net_13, SD);
not U17 (_net_14, SE);
and U18 (cond0, _net_14, SD);
not U19 (_net_15, D);
not U20 (_net_16, CK);
not U21 (_net_17, SI);
and U22 (_net_18, _net_15, _net_16, SE, _net_17);
not U23 (_net_19, CK);
not U24 (_net_20, SI);
and U25 (_net_21, D, _net_19, SE, _net_20);
not U26 (_net_22, D);
not U27 (_net_23, CK);
not U28 (_net_24, SE);
and U29 (_net_25, _net_22, _net_23, _net_24);
or U30 (cond9, _net_18, _net_21, _net_25);
not U31 (_net_26, CK);
not U32 (_net_27, SE);
and U33 (_net_28, D, _net_26, _net_27);
not U34 (_net_29, CK);
and U35 (_net_30, D, _net_29, SE, SI);
not U36 (_net_31, D);
not U37 (_net_32, CK);
and U38 (_net_33, _net_31, _net_32, SE, SI);
or U39 (cond8, _net_28, _net_30, _net_33);
not U40 (_net_34, SE);
not U41 (_net_35, D);
and U42 (cond7, _net_34, _net_35);
not U43 (_net_36, SE);
not U44 (_net_37, D);
and U45 (cond7, _net_36, _net_37);
not U46 (_net_38, D);
not U47 (_net_39, SI);
and U48 (cond6, SE, _net_38, _net_39);
not U49 (_net_40, D);
not U50 (_net_41, SI);
and U51 (cond6, SE, _net_40, _net_41);
not U52 (_net_42, SI);
and U53 (cond5, SE, D, _net_42);
not U54 (_net_43, SI);
and U55 (cond5, SE, D, _net_43);
not U56 (_net_44, D);
and U57 (cond1, SD, _net_44, SI);
not U58 (_net_45, D);
and U59 (cond1, SD, _net_45, SI);
not U60 (_net_46, SI);
and U61 (cond2, SD, D, _net_46);
not U62 (_net_47, SI);
and U63 (cond2, SD, D, _net_47);
not U64 (_net_48, D);
and U65 (cond4, SD, _net_48, SE);
not U66 (_net_49, D);
and U67 (cond4, SD, _net_49, SE);
and U68 (cond3, SD, D, SE);
and U69 (cond3, SD, D, SE);

specify
if ((~(CK) & D & SE & ~(SI)) | (~(CK) & ~(D) & SE & ~(SI)) | (~(CK) & ~(D) & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & SE & SI) | (~(CK) & D & ~(SE)) | (~(CK) & ~(D) & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if (CK) (negedge SD => (Q -: 1'b1))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge SD &&& cond9 , 0 ,0, viol_0);
$width(negedge SD &&& cond8 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond5 , posedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& CK , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_FSDPSBQ_DL50_1

//%BEGIN SEH_FSDPSBQ_DL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPSBQ_DL50_2 (Q, CK, D, SI, SE, SD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SD;

   wire int_res__D, int_res__SD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPSBQ_DL50_2 (Q, CK, D, SI, SE, SD, VDD, VSS);
   output Q;
   input CK, D, SI, SE, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SD;

   wire int_res__D, int_res__SD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_SD, SD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__SD, delayed_SD);
   scl40_htc50_dff_s_err (xcr_0, delayed_CK, int_res__D, int_res__SD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff_s #1 (Q, viol_0, delayed_CK, int_res__D, int_res__SD, xcr_0);

    `else
        scl40_htc50_dff_s (Q, viol_0, delayed_CK, int_res__D, int_res__SD, xcr_0);

    `endif

    `ifdef VIRL_functiononly

    `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, SD, _net_5, _net_6);
or U8 (cond11, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, SD, D, _net_8);
and U11 (_net_10, SD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, SD, _net_11, SE, SI);
or U14 (cond10, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, _net_13, SD);
not U17 (_net_14, SE);
and U18 (cond0, _net_14, SD);
not U19 (_net_15, D);
not U20 (_net_16, CK);
not U21 (_net_17, SI);
and U22 (_net_18, _net_15, _net_16, SE, _net_17);
not U23 (_net_19, CK);
not U24 (_net_20, SI);
and U25 (_net_21, D, _net_19, SE, _net_20);
not U26 (_net_22, D);
not U27 (_net_23, CK);
not U28 (_net_24, SE);
and U29 (_net_25, _net_22, _net_23, _net_24);
or U30 (cond9, _net_18, _net_21, _net_25);
not U31 (_net_26, CK);
not U32 (_net_27, SE);
and U33 (_net_28, D, _net_26, _net_27);
not U34 (_net_29, CK);
and U35 (_net_30, D, _net_29, SE, SI);
not U36 (_net_31, D);
not U37 (_net_32, CK);
and U38 (_net_33, _net_31, _net_32, SE, SI);
or U39 (cond8, _net_28, _net_30, _net_33);
not U40 (_net_34, SE);
not U41 (_net_35, D);
and U42 (cond7, _net_34, _net_35);
not U43 (_net_36, SE);
not U44 (_net_37, D);
and U45 (cond7, _net_36, _net_37);
not U46 (_net_38, D);
not U47 (_net_39, SI);
and U48 (cond6, SE, _net_38, _net_39);
not U49 (_net_40, D);
not U50 (_net_41, SI);
and U51 (cond6, SE, _net_40, _net_41);
not U52 (_net_42, SI);
and U53 (cond5, SE, D, _net_42);
not U54 (_net_43, SI);
and U55 (cond5, SE, D, _net_43);
not U56 (_net_44, D);
and U57 (cond1, SD, _net_44, SI);
not U58 (_net_45, D);
and U59 (cond1, SD, _net_45, SI);
not U60 (_net_46, SI);
and U61 (cond2, SD, D, _net_46);
not U62 (_net_47, SI);
and U63 (cond2, SD, D, _net_47);
not U64 (_net_48, D);
and U65 (cond4, SD, _net_48, SE);
not U66 (_net_49, D);
and U67 (cond4, SD, _net_49, SE);
and U68 (cond3, SD, D, SE);
and U69 (cond3, SD, D, SE);

specify
if ((~(CK) & D & SE & ~(SI)) | (~(CK) & ~(D) & SE & ~(SI)) | (~(CK) & ~(D) & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & SE & SI) | (~(CK) & D & ~(SE)) | (~(CK) & ~(D) & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if (CK) (negedge SD => (Q -: 1'b1))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge SD &&& cond9 , 0 ,0, viol_0);
$width(negedge SD &&& cond8 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond5 , posedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& CK , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_FSDPSBQ_DL50_2

//%BEGIN SEH_FSDPSBQ_DL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPSBQ_DL50_4 (Q, CK, D, SI, SE, SD, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SD;

   wire int_res__D, int_res__SD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPSBQ_DL50_4 (Q, CK, D, SI, SE, SD, VDD, VSS);
   output Q;
   input CK, D, SI, SE, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SD;

   wire int_res__D, int_res__SD, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_SD, SD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__SD, delayed_SD);
   scl40_htc50_dff_s_err (xcr_0, delayed_CK, int_res__D, int_res__SD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_dff_s #1 (Q, viol_0, delayed_CK, int_res__D, int_res__SD, xcr_0);

    `else
        scl40_htc50_dff_s (Q, viol_0, delayed_CK, int_res__D, int_res__SD, xcr_0);

    `endif

    `ifdef VIRL_functiononly

    `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, SD, _net_5, _net_6);
or U8 (cond11, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, SD, D, _net_8);
and U11 (_net_10, SD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, SD, _net_11, SE, SI);
or U14 (cond10, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, _net_13, SD);
not U17 (_net_14, SE);
and U18 (cond0, _net_14, SD);
not U19 (_net_15, D);
not U20 (_net_16, CK);
not U21 (_net_17, SI);
and U22 (_net_18, _net_15, _net_16, SE, _net_17);
not U23 (_net_19, CK);
not U24 (_net_20, SI);
and U25 (_net_21, D, _net_19, SE, _net_20);
not U26 (_net_22, D);
not U27 (_net_23, CK);
not U28 (_net_24, SE);
and U29 (_net_25, _net_22, _net_23, _net_24);
or U30 (cond9, _net_18, _net_21, _net_25);
not U31 (_net_26, CK);
not U32 (_net_27, SE);
and U33 (_net_28, D, _net_26, _net_27);
not U34 (_net_29, CK);
and U35 (_net_30, D, _net_29, SE, SI);
not U36 (_net_31, D);
not U37 (_net_32, CK);
and U38 (_net_33, _net_31, _net_32, SE, SI);
or U39 (cond8, _net_28, _net_30, _net_33);
not U40 (_net_34, SE);
not U41 (_net_35, D);
and U42 (cond7, _net_34, _net_35);
not U43 (_net_36, SE);
not U44 (_net_37, D);
and U45 (cond7, _net_36, _net_37);
not U46 (_net_38, D);
not U47 (_net_39, SI);
and U48 (cond6, SE, _net_38, _net_39);
not U49 (_net_40, D);
not U50 (_net_41, SI);
and U51 (cond6, SE, _net_40, _net_41);
not U52 (_net_42, SI);
and U53 (cond5, SE, D, _net_42);
not U54 (_net_43, SI);
and U55 (cond5, SE, D, _net_43);
not U56 (_net_44, D);
and U57 (cond1, SD, _net_44, SI);
not U58 (_net_45, D);
and U59 (cond1, SD, _net_45, SI);
not U60 (_net_46, SI);
and U61 (cond2, SD, D, _net_46);
not U62 (_net_47, SI);
and U63 (cond2, SD, D, _net_47);
not U64 (_net_48, D);
and U65 (cond4, SD, _net_48, SE);
not U66 (_net_49, D);
and U67 (cond4, SD, _net_49, SE);
and U68 (cond3, SD, D, SE);
and U69 (cond3, SD, D, SE);

specify
if ((~(CK) & D & SE & ~(SI)) | (~(CK) & ~(D) & SE & ~(SI)) | (~(CK) & ~(D) & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & SE & SI) | (~(CK) & D & ~(SE)) | (~(CK) & ~(D) & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if (CK) (negedge SD => (Q -: 1'b1))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge SD &&& cond9 , 0 ,0, viol_0);
$width(negedge SD &&& cond8 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond5 , posedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& CK , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_FSDPSBQ_DL50_4

//%BEGIN SEH_FSDPSBQO_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPSBQO_L50_1 (Q, SO, CK, D, SI, SE, SD, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SD;

   wire int_res__D, int_res__SD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPSBQO_L50_1 (Q, SO, CK, D, SI, SE, SD, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SD;

   wire int_res__D, int_res__SD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_SD, SD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__SD, delayed_SD);
   scl40_htc50_dff_s_err (xcr_0, delayed_CK, int_res__D, int_res__SD);
   scl40_htc50_dff_s (int_res_iq, viol_0, delayed_CK, int_res__D, int_res__SD, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (Q, int_res_iq);
       buf #1 (SO, int_res_iq);

   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, SD, _net_5, _net_6);
or U8 (cond11, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, SD, D, _net_8);
and U11 (_net_10, SD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, SD, _net_11, SE, SI);
or U14 (cond10, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, _net_13, SD);
not U17 (_net_14, SE);
and U18 (cond0, _net_14, SD);
not U19 (_net_15, D);
not U20 (_net_16, CK);
not U21 (_net_17, SI);
and U22 (_net_18, _net_15, _net_16, SE, _net_17);
not U23 (_net_19, CK);
not U24 (_net_20, SI);
and U25 (_net_21, D, _net_19, SE, _net_20);
not U26 (_net_22, D);
not U27 (_net_23, CK);
not U28 (_net_24, SE);
and U29 (_net_25, _net_22, _net_23, _net_24);
or U30 (cond9, _net_18, _net_21, _net_25);
not U31 (_net_26, CK);
not U32 (_net_27, SE);
and U33 (_net_28, D, _net_26, _net_27);
not U34 (_net_29, CK);
and U35 (_net_30, D, _net_29, SE, SI);
not U36 (_net_31, D);
not U37 (_net_32, CK);
and U38 (_net_33, _net_31, _net_32, SE, SI);
or U39 (cond8, _net_28, _net_30, _net_33);
not U40 (_net_34, SE);
not U41 (_net_35, D);
and U42 (cond7, _net_34, _net_35);
not U43 (_net_36, SE);
not U44 (_net_37, D);
and U45 (cond7, _net_36, _net_37);
not U46 (_net_38, D);
not U47 (_net_39, SI);
and U48 (cond6, SE, _net_38, _net_39);
not U49 (_net_40, D);
not U50 (_net_41, SI);
and U51 (cond6, SE, _net_40, _net_41);
not U52 (_net_42, SI);
and U53 (cond5, SE, D, _net_42);
not U54 (_net_43, SI);
and U55 (cond5, SE, D, _net_43);
not U56 (_net_44, D);
and U57 (cond1, SD, _net_44, SI);
not U58 (_net_45, D);
and U59 (cond1, SD, _net_45, SI);
not U60 (_net_46, SI);
and U61 (cond2, SD, D, _net_46);
not U62 (_net_47, SI);
and U63 (cond2, SD, D, _net_47);
not U64 (_net_48, D);
and U65 (cond4, SD, _net_48, SE);
not U66 (_net_49, D);
and U67 (cond4, SD, _net_49, SE);
and U68 (cond3, SD, D, SE);
and U69 (cond3, SD, D, SE);

specify
if ((~(CK) & D & SE & ~(SI)) | (~(CK) & ~(D) & SE & ~(SI)) | (~(CK) & ~(D) & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & SE & SI) | (~(CK) & D & ~(SE)) | (~(CK) & ~(D) & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if (CK) (negedge SD => (Q -: 1'b1))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
if ((~(CK) & D & SE & ~(SI)) | (~(CK) & ~(D) & SE & ~(SI)) | (~(CK) & ~(D) & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((~(CK) & D & SE & SI) | (~(CK) & D & ~(SE)) | (~(CK) & ~(D) & SE & SI)) (negedge SD => (SO -: 1'b1))=(0, 0);
if (CK) (negedge SD => (SO -: 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge SD &&& cond9 , 0 ,0, viol_0);
$width(negedge SD &&& cond8 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond5 , posedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& CK , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPSBQO_L50_1

//%BEGIN SEH_FSDPSBQO_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPSBQO_L50_2 (Q, SO, CK, D, SI, SE, SD, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SD;

   wire int_res__D, int_res__SD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPSBQO_L50_2 (Q, SO, CK, D, SI, SE, SD, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SD;

   wire int_res__D, int_res__SD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_SD, SD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__SD, delayed_SD);
   scl40_htc50_dff_s_err (xcr_0, delayed_CK, int_res__D, int_res__SD);
   scl40_htc50_dff_s (int_res_iq, viol_0, delayed_CK, int_res__D, int_res__SD, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (Q, int_res_iq);
       buf #1 (SO, int_res_iq);

   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, SD, _net_5, _net_6);
or U8 (cond11, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, SD, D, _net_8);
and U11 (_net_10, SD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, SD, _net_11, SE, SI);
or U14 (cond10, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, _net_13, SD);
not U17 (_net_14, SE);
and U18 (cond0, _net_14, SD);
not U19 (_net_15, D);
not U20 (_net_16, CK);
not U21 (_net_17, SI);
and U22 (_net_18, _net_15, _net_16, SE, _net_17);
not U23 (_net_19, CK);
not U24 (_net_20, SI);
and U25 (_net_21, D, _net_19, SE, _net_20);
not U26 (_net_22, D);
not U27 (_net_23, CK);
not U28 (_net_24, SE);
and U29 (_net_25, _net_22, _net_23, _net_24);
or U30 (cond9, _net_18, _net_21, _net_25);
not U31 (_net_26, CK);
not U32 (_net_27, SE);
and U33 (_net_28, D, _net_26, _net_27);
not U34 (_net_29, CK);
and U35 (_net_30, D, _net_29, SE, SI);
not U36 (_net_31, D);
not U37 (_net_32, CK);
and U38 (_net_33, _net_31, _net_32, SE, SI);
or U39 (cond8, _net_28, _net_30, _net_33);
not U40 (_net_34, SE);
not U41 (_net_35, D);
and U42 (cond7, _net_34, _net_35);
not U43 (_net_36, SE);
not U44 (_net_37, D);
and U45 (cond7, _net_36, _net_37);
not U46 (_net_38, D);
not U47 (_net_39, SI);
and U48 (cond6, SE, _net_38, _net_39);
not U49 (_net_40, D);
not U50 (_net_41, SI);
and U51 (cond6, SE, _net_40, _net_41);
not U52 (_net_42, SI);
and U53 (cond5, SE, D, _net_42);
not U54 (_net_43, SI);
and U55 (cond5, SE, D, _net_43);
not U56 (_net_44, D);
and U57 (cond1, SD, _net_44, SI);
not U58 (_net_45, D);
and U59 (cond1, SD, _net_45, SI);
not U60 (_net_46, SI);
and U61 (cond2, SD, D, _net_46);
not U62 (_net_47, SI);
and U63 (cond2, SD, D, _net_47);
not U64 (_net_48, D);
and U65 (cond4, SD, _net_48, SE);
not U66 (_net_49, D);
and U67 (cond4, SD, _net_49, SE);
and U68 (cond3, SD, D, SE);
and U69 (cond3, SD, D, SE);

specify
if ((~(CK) & D & SE & ~(SI)) | (~(CK) & ~(D) & SE & ~(SI)) | (~(CK) & ~(D) & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & SE & SI) | (~(CK) & D & ~(SE)) | (~(CK) & ~(D) & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if (CK) (negedge SD => (Q -: 1'b1))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
if ((~(CK) & D & SE & ~(SI)) | (~(CK) & ~(D) & SE & ~(SI)) | (~(CK) & ~(D) & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((~(CK) & D & SE & SI) | (~(CK) & D & ~(SE)) | (~(CK) & ~(D) & SE & SI)) (negedge SD => (SO -: 1'b1))=(0, 0);
if (CK) (negedge SD => (SO -: 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge SD &&& cond9 , 0 ,0, viol_0);
$width(negedge SD &&& cond8 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond5 , posedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& CK , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPSBQO_L50_2

//%BEGIN SEH_FSDPSBQO_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPSBQO_L50_4 (Q, SO, CK, D, SI, SE, SD, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SD;

   wire int_res__D, int_res__SD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPSBQO_L50_4 (Q, SO, CK, D, SI, SE, SD, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SD;

   wire int_res__D, int_res__SD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_SD, SD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__SD, delayed_SD);
   scl40_htc50_dff_s_err (xcr_0, delayed_CK, int_res__D, int_res__SD);
   scl40_htc50_dff_s (int_res_iq, viol_0, delayed_CK, int_res__D, int_res__SD, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (Q, int_res_iq);
       buf #1 (SO, int_res_iq);

   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, SD, _net_5, _net_6);
or U8 (cond11, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, SD, D, _net_8);
and U11 (_net_10, SD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, SD, _net_11, SE, SI);
or U14 (cond10, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, _net_13, SD);
not U17 (_net_14, SE);
and U18 (cond0, _net_14, SD);
not U19 (_net_15, D);
not U20 (_net_16, CK);
not U21 (_net_17, SI);
and U22 (_net_18, _net_15, _net_16, SE, _net_17);
not U23 (_net_19, CK);
not U24 (_net_20, SI);
and U25 (_net_21, D, _net_19, SE, _net_20);
not U26 (_net_22, D);
not U27 (_net_23, CK);
not U28 (_net_24, SE);
and U29 (_net_25, _net_22, _net_23, _net_24);
or U30 (cond9, _net_18, _net_21, _net_25);
not U31 (_net_26, CK);
not U32 (_net_27, SE);
and U33 (_net_28, D, _net_26, _net_27);
not U34 (_net_29, CK);
and U35 (_net_30, D, _net_29, SE, SI);
not U36 (_net_31, D);
not U37 (_net_32, CK);
and U38 (_net_33, _net_31, _net_32, SE, SI);
or U39 (cond8, _net_28, _net_30, _net_33);
not U40 (_net_34, SE);
not U41 (_net_35, D);
and U42 (cond7, _net_34, _net_35);
not U43 (_net_36, SE);
not U44 (_net_37, D);
and U45 (cond7, _net_36, _net_37);
not U46 (_net_38, D);
not U47 (_net_39, SI);
and U48 (cond6, SE, _net_38, _net_39);
not U49 (_net_40, D);
not U50 (_net_41, SI);
and U51 (cond6, SE, _net_40, _net_41);
not U52 (_net_42, SI);
and U53 (cond5, SE, D, _net_42);
not U54 (_net_43, SI);
and U55 (cond5, SE, D, _net_43);
not U56 (_net_44, D);
and U57 (cond1, SD, _net_44, SI);
not U58 (_net_45, D);
and U59 (cond1, SD, _net_45, SI);
not U60 (_net_46, SI);
and U61 (cond2, SD, D, _net_46);
not U62 (_net_47, SI);
and U63 (cond2, SD, D, _net_47);
not U64 (_net_48, D);
and U65 (cond4, SD, _net_48, SE);
not U66 (_net_49, D);
and U67 (cond4, SD, _net_49, SE);
and U68 (cond3, SD, D, SE);
and U69 (cond3, SD, D, SE);

specify
if ((~(CK) & D & SE & ~(SI)) | (~(CK) & ~(D) & SE & ~(SI)) | (~(CK) & ~(D) & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & SE & SI) | (~(CK) & D & ~(SE)) | (~(CK) & ~(D) & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if (CK) (negedge SD => (Q -: 1'b1))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
if ((~(CK) & D & SE & ~(SI)) | (~(CK) & ~(D) & SE & ~(SI)) | (~(CK) & ~(D) & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((~(CK) & D & SE & SI) | (~(CK) & D & ~(SE)) | (~(CK) & ~(D) & SE & SI)) (negedge SD => (SO -: 1'b1))=(0, 0);
if (CK) (negedge SD => (SO -: 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge SD &&& cond9 , 0 ,0, viol_0);
$width(negedge SD &&& cond8 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond5 , posedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& CK , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPSBQO_L50_4

//%BEGIN SEH_FSDPSBQO_L50_8

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPSBQO_L50_8 (Q, SO, CK, D, SI, SE, SD, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, SD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SD;

   wire int_res__D, int_res__SD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPSBQO_L50_8 (Q, SO, CK, D, SI, SE, SD, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, SD, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SD;

   wire int_res__D, int_res__SD, int_res_iq, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SD_org, SD, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_SD, SD_org);
`endif

   scl40_htc50_mux2 (int_res__D, delayed_SI, delayed_D, delayed_SE);
   not (int_res__SD, delayed_SD);
   scl40_htc50_dff_s_err (xcr_0, delayed_CK, int_res__D, int_res__SD);
   scl40_htc50_dff_s (int_res_iq, viol_0, delayed_CK, int_res__D, int_res__SD, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       buf #1 (Q, int_res_iq);
       buf #1 (SO, int_res_iq);

   `else
        buf (Q, int_res_iq);
        buf (SO, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SD, _net_0, SE, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SD, D, SE, _net_3);
not U5 (_net_5, D);
not U6 (_net_6, SE);
and U7 (_net_7, SD, _net_5, _net_6);
or U8 (cond11, _net_2, _net_4, _net_7);
not U9 (_net_8, SE);
and U10 (_net_9, SD, D, _net_8);
and U11 (_net_10, SD, D, SE, SI);
not U12 (_net_11, D);
and U13 (_net_12, SD, _net_11, SE, SI);
or U14 (cond10, _net_9, _net_10, _net_12);
not U15 (_net_13, SE);
and U16 (cond0, _net_13, SD);
not U17 (_net_14, SE);
and U18 (cond0, _net_14, SD);
not U19 (_net_15, D);
not U20 (_net_16, CK);
not U21 (_net_17, SI);
and U22 (_net_18, _net_15, _net_16, SE, _net_17);
not U23 (_net_19, CK);
not U24 (_net_20, SI);
and U25 (_net_21, D, _net_19, SE, _net_20);
not U26 (_net_22, D);
not U27 (_net_23, CK);
not U28 (_net_24, SE);
and U29 (_net_25, _net_22, _net_23, _net_24);
or U30 (cond9, _net_18, _net_21, _net_25);
not U31 (_net_26, CK);
not U32 (_net_27, SE);
and U33 (_net_28, D, _net_26, _net_27);
not U34 (_net_29, CK);
and U35 (_net_30, D, _net_29, SE, SI);
not U36 (_net_31, D);
not U37 (_net_32, CK);
and U38 (_net_33, _net_31, _net_32, SE, SI);
or U39 (cond8, _net_28, _net_30, _net_33);
not U40 (_net_34, SE);
not U41 (_net_35, D);
and U42 (cond7, _net_34, _net_35);
not U43 (_net_36, SE);
not U44 (_net_37, D);
and U45 (cond7, _net_36, _net_37);
not U46 (_net_38, D);
not U47 (_net_39, SI);
and U48 (cond6, SE, _net_38, _net_39);
not U49 (_net_40, D);
not U50 (_net_41, SI);
and U51 (cond6, SE, _net_40, _net_41);
not U52 (_net_42, SI);
and U53 (cond5, SE, D, _net_42);
not U54 (_net_43, SI);
and U55 (cond5, SE, D, _net_43);
not U56 (_net_44, D);
and U57 (cond1, SD, _net_44, SI);
not U58 (_net_45, D);
and U59 (cond1, SD, _net_45, SI);
not U60 (_net_46, SI);
and U61 (cond2, SD, D, _net_46);
not U62 (_net_47, SI);
and U63 (cond2, SD, D, _net_47);
not U64 (_net_48, D);
and U65 (cond4, SD, _net_48, SE);
not U66 (_net_49, D);
and U67 (cond4, SD, _net_49, SE);
and U68 (cond3, SD, D, SE);
and U69 (cond3, SD, D, SE);

specify
if ((~(CK) & D & SE & ~(SI)) | (~(CK) & ~(D) & SE & ~(SI)) | (~(CK) & ~(D) & ~(SE))) (negedge SD => (Q -: 1'b1))=(0, 0);
if ((~(CK) & D & SE & SI) | (~(CK) & D & ~(SE)) | (~(CK) & ~(D) & SE & SI)) (negedge SD => (Q -: 1'b1))=(0, 0);
if (CK) (negedge SD => (Q -: 1'b1))=(0, 0);
(posedge CK => (Q : 1'b1))=(0, 0);
if ((~(CK) & D & SE & ~(SI)) | (~(CK) & ~(D) & SE & ~(SI)) | (~(CK) & ~(D) & ~(SE))) (negedge SD => (SO -: 1'b1))=(0, 0);
if ((~(CK) & D & SE & SI) | (~(CK) & D & ~(SE)) | (~(CK) & ~(D) & SE & SI)) (negedge SD => (SO -: 1'b1))=(0, 0);
if (CK) (negedge SD => (SO -: 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$width(negedge SD &&& cond9 , 0 ,0, viol_0);
$width(negedge SD &&& cond8 , 0 ,0, viol_0);
$recrem(posedge SD &&& cond7 , posedge CK &&& cond7 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond6 , posedge CK &&& cond6 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$recrem(posedge SD &&& cond5 , posedge CK &&& cond5 , 0 ,0, viol_0, , , delayed_SD, delayed_CK);
$width(negedge SD &&& CK , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , posedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond4 , negedge SI &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , posedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond3 , negedge SI &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPSBQO_L50_8

//%BEGIN SEH_FSDPTQ_DL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPTQ_DL50_1 (Q, CK, D, SI, SE, SS, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, SS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SS;

   wire int_res__D, int_res__SS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SS_org, SS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPTQ_DL50_1 (Q, CK, D, SI, SE, SS, VDD, VSS);
   output Q;
   input CK, D, SI, SE, SS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SS;

   wire int_res__D, int_res__SS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SS_org, SS, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_SS, SS_org);
`endif

   or (int_res__D, delayed_D, delayed_SS);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `else
      scl40_htc50_dff (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
not U7 (_net_7, SS);
and U8 (_net_8, _net_5, _net_6, _net_7);
or U9 (cond10, _net_2, _net_4, _net_8);
not U10 (_net_9, SE);
and U11 (_net_10, _net_9, D);
and U12 (_net_11, SE, D, SI);
not U13 (_net_12, D);
and U14 (_net_13, SE, _net_12, SI);
not U15 (_net_14, SE);
not U16 (_net_15, D);
and U17 (_net_16, _net_14, _net_15, SS);
or U18 (cond9, _net_10, _net_11, _net_13, _net_16);
not U19 (_net_17, SS);
not U20 (_net_18, SE);
and U21 (cond0, _net_17, _net_18);
not U22 (_net_19, SS);
not U23 (_net_20, SE);
and U24 (cond0, _net_19, _net_20);
not U25 (_net_21, SI);
not U26 (_net_22, D);
and U27 (cond4, _net_21, _net_22, SS);
not U28 (_net_23, SI);
not U29 (_net_24, D);
and U30 (cond4, _net_23, _net_24, SS);
not U31 (_net_25, D);
not U32 (_net_26, SS);
and U33 (cond1, SI, _net_25, _net_26);
not U34 (_net_27, D);
not U35 (_net_28, SS);
and U36 (cond1, SI, _net_27, _net_28);
not U37 (_net_29, SI);
not U38 (_net_30, SS);
and U39 (cond3, _net_29, D, _net_30);
not U40 (_net_31, SI);
not U41 (_net_32, SS);
and U42 (cond3, _net_31, D, _net_32);
not U43 (_net_33, SI);
and U44 (cond2, _net_33, D, SS);
not U45 (_net_34, SI);
and U46 (cond2, _net_34, D, SS);
not U47 (_net_35, D);
not U48 (_net_36, SS);
and U49 (cond7, SE, _net_35, _net_36);
not U50 (_net_37, D);
not U51 (_net_38, SS);
and U52 (cond7, SE, _net_37, _net_38);
not U53 (_net_39, D);
and U54 (cond6, SE, _net_39, SS);
not U55 (_net_40, D);
and U56 (cond6, SE, _net_40, SS);
and U57 (cond5, SE, D);
and U58 (cond5, SE, D);
not U59 (_net_41, SE);
not U60 (_net_42, D);
and U61 (cond8, _net_41, _net_42);
not U62 (_net_43, SE);
not U63 (_net_44, D);
and U64 (cond8, _net_43, _net_44);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$width(posedge CK &&& cond9 , 0 ,0, viol_0);
$width(negedge CK &&& cond9 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , posedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , negedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , posedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , negedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond5 , posedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond5 , negedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond8 , posedge SS &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SS);
$setuphold(posedge CK &&& cond8 , negedge SS &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SS);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPTQ_DL50_1

//%BEGIN SEH_FSDPTQ_DL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPTQ_DL50_2 (Q, CK, D, SI, SE, SS, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, SS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SS;

   wire int_res__D, int_res__SS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SS_org, SS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPTQ_DL50_2 (Q, CK, D, SI, SE, SS, VDD, VSS);
   output Q;
   input CK, D, SI, SE, SS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SS;

   wire int_res__D, int_res__SS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SS_org, SS, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_SS, SS_org);
`endif

   or (int_res__D, delayed_D, delayed_SS);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `else
      scl40_htc50_dff (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
not U7 (_net_7, SS);
and U8 (_net_8, _net_5, _net_6, _net_7);
or U9 (cond10, _net_2, _net_4, _net_8);
not U10 (_net_9, SE);
and U11 (_net_10, _net_9, D);
and U12 (_net_11, SE, D, SI);
not U13 (_net_12, D);
and U14 (_net_13, SE, _net_12, SI);
not U15 (_net_14, SE);
not U16 (_net_15, D);
and U17 (_net_16, _net_14, _net_15, SS);
or U18 (cond9, _net_10, _net_11, _net_13, _net_16);
not U19 (_net_17, SS);
not U20 (_net_18, SE);
and U21 (cond0, _net_17, _net_18);
not U22 (_net_19, SS);
not U23 (_net_20, SE);
and U24 (cond0, _net_19, _net_20);
not U25 (_net_21, SI);
not U26 (_net_22, D);
and U27 (cond4, _net_21, _net_22, SS);
not U28 (_net_23, SI);
not U29 (_net_24, D);
and U30 (cond4, _net_23, _net_24, SS);
not U31 (_net_25, D);
not U32 (_net_26, SS);
and U33 (cond1, SI, _net_25, _net_26);
not U34 (_net_27, D);
not U35 (_net_28, SS);
and U36 (cond1, SI, _net_27, _net_28);
not U37 (_net_29, SI);
not U38 (_net_30, SS);
and U39 (cond3, _net_29, D, _net_30);
not U40 (_net_31, SI);
not U41 (_net_32, SS);
and U42 (cond3, _net_31, D, _net_32);
not U43 (_net_33, SI);
and U44 (cond2, _net_33, D, SS);
not U45 (_net_34, SI);
and U46 (cond2, _net_34, D, SS);
not U47 (_net_35, D);
not U48 (_net_36, SS);
and U49 (cond7, SE, _net_35, _net_36);
not U50 (_net_37, D);
not U51 (_net_38, SS);
and U52 (cond7, SE, _net_37, _net_38);
not U53 (_net_39, D);
and U54 (cond6, SE, _net_39, SS);
not U55 (_net_40, D);
and U56 (cond6, SE, _net_40, SS);
and U57 (cond5, SE, D);
and U58 (cond5, SE, D);
not U59 (_net_41, SE);
not U60 (_net_42, D);
and U61 (cond8, _net_41, _net_42);
not U62 (_net_43, SE);
not U63 (_net_44, D);
and U64 (cond8, _net_43, _net_44);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$width(posedge CK &&& cond9 , 0 ,0, viol_0);
$width(negedge CK &&& cond9 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , posedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , negedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , posedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , negedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond5 , posedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond5 , negedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond8 , posedge SS &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SS);
$setuphold(posedge CK &&& cond8 , negedge SS &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SS);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPTQ_DL50_2

//%BEGIN SEH_FSDPTQ_DL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPTQ_DL50_4 (Q, CK, D, SI, SE, SS, VDD, VSS, VBP, VBN);
   output Q;
   input CK, D, SI, SE, SS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SS;

   wire int_res__D, int_res__SS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SS_org, SS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPTQ_DL50_4 (Q, CK, D, SI, SE, SS, VDD, VSS);
   output Q;
   input CK, D, SI, SE, SS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SS;

   wire int_res__D, int_res__SS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SS_org, SS, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_SS, SS_org);
`endif

   or (int_res__D, delayed_D, delayed_SS);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      scl40_htc50_dff #1 (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `else
      scl40_htc50_dff (Q, viol_0, delayed_CK, int_res_mux, xcr_0);
   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
not U7 (_net_7, SS);
and U8 (_net_8, _net_5, _net_6, _net_7);
or U9 (cond10, _net_2, _net_4, _net_8);
not U10 (_net_9, SE);
and U11 (_net_10, _net_9, D);
and U12 (_net_11, SE, D, SI);
not U13 (_net_12, D);
and U14 (_net_13, SE, _net_12, SI);
not U15 (_net_14, SE);
not U16 (_net_15, D);
and U17 (_net_16, _net_14, _net_15, SS);
or U18 (cond9, _net_10, _net_11, _net_13, _net_16);
not U19 (_net_17, SS);
not U20 (_net_18, SE);
and U21 (cond0, _net_17, _net_18);
not U22 (_net_19, SS);
not U23 (_net_20, SE);
and U24 (cond0, _net_19, _net_20);
not U25 (_net_21, SI);
not U26 (_net_22, D);
and U27 (cond4, _net_21, _net_22, SS);
not U28 (_net_23, SI);
not U29 (_net_24, D);
and U30 (cond4, _net_23, _net_24, SS);
not U31 (_net_25, D);
not U32 (_net_26, SS);
and U33 (cond1, SI, _net_25, _net_26);
not U34 (_net_27, D);
not U35 (_net_28, SS);
and U36 (cond1, SI, _net_27, _net_28);
not U37 (_net_29, SI);
not U38 (_net_30, SS);
and U39 (cond3, _net_29, D, _net_30);
not U40 (_net_31, SI);
not U41 (_net_32, SS);
and U42 (cond3, _net_31, D, _net_32);
not U43 (_net_33, SI);
and U44 (cond2, _net_33, D, SS);
not U45 (_net_34, SI);
and U46 (cond2, _net_34, D, SS);
not U47 (_net_35, D);
not U48 (_net_36, SS);
and U49 (cond7, SE, _net_35, _net_36);
not U50 (_net_37, D);
not U51 (_net_38, SS);
and U52 (cond7, SE, _net_37, _net_38);
not U53 (_net_39, D);
and U54 (cond6, SE, _net_39, SS);
not U55 (_net_40, D);
and U56 (cond6, SE, _net_40, SS);
and U57 (cond5, SE, D);
and U58 (cond5, SE, D);
not U59 (_net_41, SE);
not U60 (_net_42, D);
and U61 (cond8, _net_41, _net_42);
not U62 (_net_43, SE);
not U63 (_net_44, D);
and U64 (cond8, _net_43, _net_44);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$width(posedge CK &&& cond9 , 0 ,0, viol_0);
$width(negedge CK &&& cond9 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond7 , posedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , negedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , posedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , negedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond5 , posedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond5 , negedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond8 , posedge SS &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SS);
$setuphold(posedge CK &&& cond8 , negedge SS &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SS);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPTQ_DL50_4

//%BEGIN SEH_FSDPTQO_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPTQO_L50_1 (Q, SO, CK, D, SI, SE, SS, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, SS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SS;

   wire int_res__D, int_res_iq, int_res__SS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SS_org, SS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPTQO_L50_1 (Q, SO, CK, D, SI, SE, SS, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, SS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SS;

   wire int_res__D, int_res_iq, int_res__SS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SS_org, SS, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_SS, SS_org);
`endif

   or (int_res__D, delayed_D, delayed_SS);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res_mux, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         buf #1 (Q, int_res_iq);
         buf #1 (SO, int_res_iq);

   `else
         buf (Q, int_res_iq);
         buf (SO, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
not U7 (_net_7, SS);
and U8 (_net_8, _net_5, _net_6, _net_7);
or U9 (cond11, _net_2, _net_4, _net_8);
not U10 (_net_9, SE);
and U11 (_net_10, _net_9, D);
and U12 (_net_11, SE, D, SI);
not U13 (_net_12, D);
and U14 (_net_13, SE, _net_12, SI);
not U15 (_net_14, SE);
not U16 (_net_15, D);
and U17 (_net_16, _net_14, _net_15, SS);
or U18 (cond10, _net_10, _net_11, _net_13, _net_16);
not U19 (_net_17, SS);
not U20 (_net_18, SE);
and U21 (cond0, _net_17, _net_18);
not U22 (_net_19, SS);
not U23 (_net_20, SE);
and U24 (cond0, _net_19, _net_20);
not U25 (_net_21, SI);
not U26 (_net_22, D);
and U27 (cond4, _net_21, _net_22, SS);
not U28 (_net_23, SI);
not U29 (_net_24, D);
and U30 (cond4, _net_23, _net_24, SS);
not U31 (_net_25, D);
not U32 (_net_26, SS);
and U33 (cond1, SI, _net_25, _net_26);
not U34 (_net_27, D);
not U35 (_net_28, SS);
and U36 (cond1, SI, _net_27, _net_28);
not U37 (_net_29, SI);
not U38 (_net_30, SS);
and U39 (cond3, _net_29, D, _net_30);
not U40 (_net_31, SI);
not U41 (_net_32, SS);
and U42 (cond3, _net_31, D, _net_32);
not U43 (_net_33, SI);
and U44 (cond2, _net_33, D, SS);
not U45 (_net_34, SI);
and U46 (cond2, _net_34, D, SS);
not U47 (_net_35, D);
not U48 (_net_36, SS);
and U49 (cond8, SE, _net_35, _net_36);
not U50 (_net_37, D);
not U51 (_net_38, SS);
and U52 (cond8, SE, _net_37, _net_38);
not U53 (_net_39, D);
and U54 (cond7, SE, _net_39, SS);
not U55 (_net_40, D);
and U56 (cond7, SE, _net_40, SS);
not U57 (_net_41, SS);
and U58 (cond6, SE, D, _net_41);
not U59 (_net_42, SS);
and U60 (cond6, SE, D, _net_42);
and U61 (cond5, SE, D, SS);
and U62 (cond5, SE, D, SS);
not U63 (_net_43, SE);
not U64 (_net_44, D);
and U65 (cond9, _net_43, _net_44);
not U66 (_net_45, SE);
not U67 (_net_46, D);
and U68 (cond9, _net_45, _net_46);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond8 , negedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , posedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , negedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , posedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , negedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond5 , posedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond5 , negedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , posedge SS &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SS);
$setuphold(posedge CK &&& cond9 , negedge SS &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SS);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPTQO_L50_1

//%BEGIN SEH_FSDPTQO_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPTQO_L50_2 (Q, SO, CK, D, SI, SE, SS, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, SS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SS;

   wire int_res__D, int_res_iq, int_res__SS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SS_org, SS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPTQO_L50_2 (Q, SO, CK, D, SI, SE, SS, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, SS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SS;

   wire int_res__D, int_res_iq, int_res__SS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SS_org, SS, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_SS, SS_org);
`endif

   or (int_res__D, delayed_D, delayed_SS);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res_mux, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         buf #1 (Q, int_res_iq);
         buf #1 (SO, int_res_iq);

   `else
         buf (Q, int_res_iq);
         buf (SO, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
not U7 (_net_7, SS);
and U8 (_net_8, _net_5, _net_6, _net_7);
or U9 (cond11, _net_2, _net_4, _net_8);
not U10 (_net_9, SE);
and U11 (_net_10, _net_9, D);
and U12 (_net_11, SE, D, SI);
not U13 (_net_12, D);
and U14 (_net_13, SE, _net_12, SI);
not U15 (_net_14, SE);
not U16 (_net_15, D);
and U17 (_net_16, _net_14, _net_15, SS);
or U18 (cond10, _net_10, _net_11, _net_13, _net_16);
not U19 (_net_17, SS);
not U20 (_net_18, SE);
and U21 (cond0, _net_17, _net_18);
not U22 (_net_19, SS);
not U23 (_net_20, SE);
and U24 (cond0, _net_19, _net_20);
not U25 (_net_21, SI);
not U26 (_net_22, D);
and U27 (cond4, _net_21, _net_22, SS);
not U28 (_net_23, SI);
not U29 (_net_24, D);
and U30 (cond4, _net_23, _net_24, SS);
not U31 (_net_25, D);
not U32 (_net_26, SS);
and U33 (cond1, SI, _net_25, _net_26);
not U34 (_net_27, D);
not U35 (_net_28, SS);
and U36 (cond1, SI, _net_27, _net_28);
not U37 (_net_29, SI);
not U38 (_net_30, SS);
and U39 (cond3, _net_29, D, _net_30);
not U40 (_net_31, SI);
not U41 (_net_32, SS);
and U42 (cond3, _net_31, D, _net_32);
not U43 (_net_33, SI);
and U44 (cond2, _net_33, D, SS);
not U45 (_net_34, SI);
and U46 (cond2, _net_34, D, SS);
not U47 (_net_35, D);
not U48 (_net_36, SS);
and U49 (cond8, SE, _net_35, _net_36);
not U50 (_net_37, D);
not U51 (_net_38, SS);
and U52 (cond8, SE, _net_37, _net_38);
not U53 (_net_39, D);
and U54 (cond7, SE, _net_39, SS);
not U55 (_net_40, D);
and U56 (cond7, SE, _net_40, SS);
not U57 (_net_41, SS);
and U58 (cond6, SE, D, _net_41);
not U59 (_net_42, SS);
and U60 (cond6, SE, D, _net_42);
and U61 (cond5, SE, D, SS);
and U62 (cond5, SE, D, SS);
not U63 (_net_43, SE);
not U64 (_net_44, D);
and U65 (cond9, _net_43, _net_44);
not U66 (_net_45, SE);
not U67 (_net_46, D);
and U68 (cond9, _net_45, _net_46);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond8 , negedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , posedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , negedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , posedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , negedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond5 , posedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond5 , negedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , posedge SS &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SS);
$setuphold(posedge CK &&& cond9 , negedge SS &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SS);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPTQO_L50_2

//%BEGIN SEH_FSDPTQO_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_FSDPTQO_L50_4 (Q, SO, CK, D, SI, SE, SS, VDD, VSS, VBP, VBN);
   output Q, SO;
   input CK, D, SI, SE, SS, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SS;

   wire int_res__D, int_res_iq, int_res__SS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (SS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (SS_org, SS, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_FSDPTQO_L50_4 (Q, SO, CK, D, SI, SE, SS, VDD, VSS);
   output Q, SO;
   input CK, D, SI, SE, SS, VDD, VSS;

   reg viol_0;
   wire delayed_CK, delayed_D, delayed_SI,
	delayed_SE, delayed_SS;

   wire int_res__D, int_res_iq, int_res__SS, xcr_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (CK_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (CK_org, CK, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SE_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SE_org, SE, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SI_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SI_org, SI, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (SS_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (SS_org, SS, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_CK, CK_org);
   buf (delayed_D, D_org);
   buf (delayed_SI, SI_org);
   buf (delayed_SE, SE_org);
   buf (delayed_SS, SS_org);
`endif

   or (int_res__D, delayed_D, delayed_SS);
   scl40_htc50_mux2 (int_res_mux, delayed_SI, int_res__D, delayed_SE);
   scl40_htc50_dff_err (xcr_0, delayed_CK, int_res_mux);
   scl40_htc50_dff (int_res_iq, viol_0, delayed_CK, int_res_mux, xcr_0);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         buf #1 (Q, int_res_iq);
         buf #1 (SO, int_res_iq);

   `else
         buf (Q, int_res_iq);
         buf (SO, int_res_iq);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
not U1 (_net_1, SI);
and U2 (_net_2, SE, _net_0, _net_1);
not U3 (_net_3, SI);
and U4 (_net_4, SE, D, _net_3);
not U5 (_net_5, SE);
not U6 (_net_6, D);
not U7 (_net_7, SS);
and U8 (_net_8, _net_5, _net_6, _net_7);
or U9 (cond11, _net_2, _net_4, _net_8);
not U10 (_net_9, SE);
and U11 (_net_10, _net_9, D);
and U12 (_net_11, SE, D, SI);
not U13 (_net_12, D);
and U14 (_net_13, SE, _net_12, SI);
not U15 (_net_14, SE);
not U16 (_net_15, D);
and U17 (_net_16, _net_14, _net_15, SS);
or U18 (cond10, _net_10, _net_11, _net_13, _net_16);
not U19 (_net_17, SS);
not U20 (_net_18, SE);
and U21 (cond0, _net_17, _net_18);
not U22 (_net_19, SS);
not U23 (_net_20, SE);
and U24 (cond0, _net_19, _net_20);
not U25 (_net_21, SI);
not U26 (_net_22, D);
and U27 (cond4, _net_21, _net_22, SS);
not U28 (_net_23, SI);
not U29 (_net_24, D);
and U30 (cond4, _net_23, _net_24, SS);
not U31 (_net_25, D);
not U32 (_net_26, SS);
and U33 (cond1, SI, _net_25, _net_26);
not U34 (_net_27, D);
not U35 (_net_28, SS);
and U36 (cond1, SI, _net_27, _net_28);
not U37 (_net_29, SI);
not U38 (_net_30, SS);
and U39 (cond3, _net_29, D, _net_30);
not U40 (_net_31, SI);
not U41 (_net_32, SS);
and U42 (cond3, _net_31, D, _net_32);
not U43 (_net_33, SI);
and U44 (cond2, _net_33, D, SS);
not U45 (_net_34, SI);
and U46 (cond2, _net_34, D, SS);
not U47 (_net_35, D);
not U48 (_net_36, SS);
and U49 (cond8, SE, _net_35, _net_36);
not U50 (_net_37, D);
not U51 (_net_38, SS);
and U52 (cond8, SE, _net_37, _net_38);
not U53 (_net_39, D);
and U54 (cond7, SE, _net_39, SS);
not U55 (_net_40, D);
and U56 (cond7, SE, _net_40, SS);
not U57 (_net_41, SS);
and U58 (cond6, SE, D, _net_41);
not U59 (_net_42, SS);
and U60 (cond6, SE, D, _net_42);
and U61 (cond5, SE, D, SS);
and U62 (cond5, SE, D, SS);
not U63 (_net_43, SE);
not U64 (_net_44, D);
and U65 (cond9, _net_43, _net_44);
not U66 (_net_45, SE);
not U67 (_net_46, D);
and U68 (cond9, _net_45, _net_46);

specify
(posedge CK => (Q : 1'b1))=(0, 0);
(posedge CK => (SO : 1'b1))=(0, 0);
$width(posedge CK &&& cond11 , 0 ,0, viol_0);
$width(negedge CK &&& cond11 , 0 ,0, viol_0);
$width(posedge CK &&& cond10 , 0 ,0, viol_0);
$width(negedge CK &&& cond10 , 0 ,0, viol_0);
$setuphold(posedge CK &&& cond0 , posedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond0 , negedge D &&& cond0 , 0 ,0, viol_0, , , delayed_CK, delayed_D);
$setuphold(posedge CK &&& cond4 , posedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond4 , negedge SE &&& cond4 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , posedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond1 , negedge SE &&& cond1 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , posedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond3 , negedge SE &&& cond3 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , posedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond2 , negedge SE &&& cond2 , 0 ,0, viol_0, , , delayed_CK, delayed_SE);
$setuphold(posedge CK &&& cond8 , posedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond8 , negedge SI &&& cond8 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , posedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond7 , negedge SI &&& cond7 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , posedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond6 , negedge SI &&& cond6 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond5 , posedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond5 , negedge SI &&& cond5 , 0 ,0, viol_0, , , delayed_CK, delayed_SI);
$setuphold(posedge CK &&& cond9 , posedge SS &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SS);
$setuphold(posedge CK &&& cond9 , negedge SS &&& cond9 , 0 ,0, viol_0, , , delayed_CK, delayed_SS);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_FSDPTQO_L50_4

//%BEGIN SEH_INV_SL50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_INV_SL50_0P5 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_SL50_0P5 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_SL50_0P5

//%BEGIN SEH_INV_SL50_0P65

`celldefine
`ifdef BIAS_PINS
module SEH_INV_SL50_0P65 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_SL50_0P65 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_SL50_0P65

//%BEGIN SEH_INV_SL50_0P8

`celldefine
`ifdef BIAS_PINS
module SEH_INV_SL50_0P8 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_SL50_0P8 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_SL50_0P8

//%BEGIN SEH_INV_SL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_INV_SL50_1 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_SL50_1 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_SL50_1

//%BEGIN SEH_INV_SL50_10

`celldefine
`ifdef BIAS_PINS
module SEH_INV_SL50_10 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_SL50_10 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_SL50_10

//%BEGIN SEH_INV_SL50_12

`celldefine
`ifdef BIAS_PINS
module SEH_INV_SL50_12 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_SL50_12 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_SL50_12

//%BEGIN SEH_INV_SL50_16

`celldefine
`ifdef BIAS_PINS
module SEH_INV_SL50_16 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_SL50_16 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_SL50_16

//%BEGIN SEH_INV_SL50_1P25

`celldefine
`ifdef BIAS_PINS
module SEH_INV_SL50_1P25 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_SL50_1P25 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_SL50_1P25

//%BEGIN SEH_INV_SL50_1P5

`celldefine
`ifdef BIAS_PINS
module SEH_INV_SL50_1P5 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_SL50_1P5 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_SL50_1P5

//%BEGIN SEH_INV_SL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_INV_SL50_2 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_SL50_2 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_SL50_2

//%BEGIN SEH_INV_SL50_20

`celldefine
`ifdef BIAS_PINS
module SEH_INV_SL50_20 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_SL50_20 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_SL50_20

//%BEGIN SEH_INV_SL50_24

`celldefine
`ifdef BIAS_PINS
module SEH_INV_SL50_24 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_SL50_24 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_SL50_24

//%BEGIN SEH_INV_SL50_2P5

`celldefine
`ifdef BIAS_PINS
module SEH_INV_SL50_2P5 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_SL50_2P5 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_SL50_2P5

//%BEGIN SEH_INV_SL50_3

`celldefine
`ifdef BIAS_PINS
module SEH_INV_SL50_3 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_SL50_3 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_SL50_3

//%BEGIN SEH_INV_SL50_32

`celldefine
`ifdef BIAS_PINS
module SEH_INV_SL50_32 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_SL50_32 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_SL50_32

//%BEGIN SEH_INV_SL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_INV_SL50_4 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_SL50_4 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_SL50_4

//%BEGIN SEH_INV_SL50_5

`celldefine
`ifdef BIAS_PINS
module SEH_INV_SL50_5 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_SL50_5 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_SL50_5

//%BEGIN SEH_INV_SL50_6

`celldefine
`ifdef BIAS_PINS
module SEH_INV_SL50_6 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_SL50_6 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_SL50_6

//%BEGIN SEH_INV_SL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_INV_SL50_8 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_SL50_8 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_SL50_8

//%BEGIN SEH_INV_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_INV_L50_0P5 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_L50_0P5 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_L50_0P5

//%BEGIN SEH_INV_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_INV_L50_1 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_L50_1 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_L50_1

//%BEGIN SEH_INV_L50_12

`celldefine
`ifdef BIAS_PINS
module SEH_INV_L50_12 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_L50_12 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_L50_12

//%BEGIN SEH_INV_L50_16

`celldefine
`ifdef BIAS_PINS
module SEH_INV_L50_16 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_L50_16 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_L50_16

//%BEGIN SEH_INV_L50_1P5

`celldefine
`ifdef BIAS_PINS
module SEH_INV_L50_1P5 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_L50_1P5 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_L50_1P5

//%BEGIN SEH_INV_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_INV_L50_2 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_L50_2 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_L50_2

//%BEGIN SEH_INV_L50_3

`celldefine
`ifdef BIAS_PINS
module SEH_INV_L50_3 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_L50_3 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_L50_3

//%BEGIN SEH_INV_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_INV_L50_4 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_L50_4 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_L50_4

//%BEGIN SEH_INV_L50_6

`celldefine
`ifdef BIAS_PINS
module SEH_INV_L50_6 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_L50_6 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_L50_6

//%BEGIN SEH_INV_L50_8

`celldefine
`ifdef BIAS_PINS
module SEH_INV_L50_8 (X, A, VDD, VSS, VBP, VBN);
   output X;
   input A, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_INV_L50_8 (X, A, VDD, VSS);
   output X;
   input A, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
        not #1 (X, A_org);
    `else
        not (X, A_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_INV_L50_8

//%BEGIN SEH_LDNQ_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_LDNQ_L50_1 (Q, G, D, VDD, VSS, VBP, VBN);
   output Q;
   input G, D, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_G, delayed_D;

   wire int_res__G;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_LDNQ_L50_1 (Q, G, D, VDD, VSS);
   output Q;
   input G, D, VDD, VSS;

   reg viol_0;
   wire delayed_G, delayed_D;

   wire int_res__G;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_G, G_org);
   buf (delayed_D, D_org);
`endif

   not (int_res__G, delayed_G);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_latch #1 (Q, viol_0, int_res__G, delayed_D);

   `else

        scl40_htc50_latch (Q, viol_0, int_res__G, delayed_D);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(D +=> Q)=(0, 0);
(negedge G => (Q : 1'b1))=(0, 0);
$setuphold(posedge G , posedge D , 0 ,0, viol_0, , , delayed_G, delayed_D);
$setuphold(posedge G , negedge D , 0 ,0, viol_0, , , delayed_G, delayed_D);
$width(negedge G &&& ~D , 0 ,0, viol_0);
$width(negedge G &&& D , 0 ,0, viol_0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_LDNQ_L50_1

//%BEGIN SEH_LDNQ_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_LDNQ_L50_2 (Q, G, D, VDD, VSS, VBP, VBN);
   output Q;
   input G, D, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_G, delayed_D;

   wire int_res__G;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_LDNQ_L50_2 (Q, G, D, VDD, VSS);
   output Q;
   input G, D, VDD, VSS;

   reg viol_0;
   wire delayed_G, delayed_D;

   wire int_res__G;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_G, G_org);
   buf (delayed_D, D_org);
`endif

   not (int_res__G, delayed_G);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_latch #1 (Q, viol_0, int_res__G, delayed_D);

   `else

        scl40_htc50_latch (Q, viol_0, int_res__G, delayed_D);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(D +=> Q)=(0, 0);
(negedge G => (Q : 1'b1))=(0, 0);
$setuphold(posedge G , posedge D , 0 ,0, viol_0, , , delayed_G, delayed_D);
$setuphold(posedge G , negedge D , 0 ,0, viol_0, , , delayed_G, delayed_D);
$width(negedge G &&& ~D , 0 ,0, viol_0);
$width(negedge G &&& D , 0 ,0, viol_0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_LDNQ_L50_2

//%BEGIN SEH_LDNQ_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_LDNQ_L50_4 (Q, G, D, VDD, VSS, VBP, VBN);
   output Q;
   input G, D, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_G, delayed_D;

   wire int_res__G;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_LDNQ_L50_4 (Q, G, D, VDD, VSS);
   output Q;
   input G, D, VDD, VSS;

   reg viol_0;
   wire delayed_G, delayed_D;

   wire int_res__G;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_G, G_org);
   buf (delayed_D, D_org);
`endif

   not (int_res__G, delayed_G);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_latch #1 (Q, viol_0, int_res__G, delayed_D);

   `else

        scl40_htc50_latch (Q, viol_0, int_res__G, delayed_D);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(D +=> Q)=(0, 0);
(negedge G => (Q : 1'b1))=(0, 0);
$setuphold(posedge G , posedge D , 0 ,0, viol_0, , , delayed_G, delayed_D);
$setuphold(posedge G , negedge D , 0 ,0, viol_0, , , delayed_G, delayed_D);
$width(negedge G &&& ~D , 0 ,0, viol_0);
$width(negedge G &&& D , 0 ,0, viol_0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_LDNQ_L50_4

//%BEGIN SEH_LDNRBQ_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_LDNRBQ_L50_1 (Q, G, D, RD, VDD, VSS, VBP, VBN);
   output Q;
   input G, D, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_G, delayed_D, delayed_RD;

   wire int_res__G, int_res__RD;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_LDNRBQ_L50_1 (Q, G, D, RD, VDD, VSS);
   output Q;
   input G, D, RD, VDD, VSS;

   reg viol_0;
   wire delayed_G, delayed_D, delayed_RD;

   wire int_res__G, int_res__RD;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_G, G_org);
   buf (delayed_D, D_org);
   buf (delayed_RD, RD_org);
`endif

   not (int_res__G, delayed_G);
   not (int_res__RD, delayed_RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_latch_r #1 (Q, viol_0, int_res__G, delayed_D, int_res__RD);
    `else
        scl40_htc50_latch_r (Q, viol_0, int_res__G, delayed_D, int_res__RD);
    `endif

    `ifdef VIRL_functiononly

    `else

not U0 (_net_0, D);
and U1 (cond3, RD, _net_0);
and U2 (cond2, RD, D);
not U3 (_net_1, D);
and U4 (cond1, G, _net_1);
and U5 (cond0, G, D);

specify
(D +=> Q)=(0, 0);
(negedge G => (Q : 1'b1))=(0, 0);
if ((~(D) & G)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((D & ~(G))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((D & G)) (negedge RD => (Q +: 1'b0))=(0, 0);
ifnone (posedge RD => (Q+:1'b1))=(0, 0);
$setuphold(posedge G &&& RD , posedge D &&& RD , 0 ,0, viol_0, , , delayed_G, delayed_D);
$setuphold(posedge G &&& RD , negedge D &&& RD , 0 ,0, viol_0, , , delayed_G, delayed_D);
$width(negedge G &&& cond3 , 0 ,0, viol_0);
$width(negedge G &&& cond2 , 0 ,0, viol_0);
$width(negedge RD &&& cond1 , 0 ,0, viol_0);
$width(negedge RD &&& cond0 , 0 ,0, viol_0);
$recrem(posedge RD &&& D , posedge G &&& D , 0 ,0, viol_0, , , delayed_RD, delayed_G);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_LDNRBQ_L50_1

//%BEGIN SEH_LDNRBQ_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_LDNRBQ_L50_2 (Q, G, D, RD, VDD, VSS, VBP, VBN);
   output Q;
   input G, D, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_G, delayed_D, delayed_RD;

   wire int_res__G, int_res__RD;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_LDNRBQ_L50_2 (Q, G, D, RD, VDD, VSS);
   output Q;
   input G, D, RD, VDD, VSS;

   reg viol_0;
   wire delayed_G, delayed_D, delayed_RD;

   wire int_res__G, int_res__RD;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_G, G_org);
   buf (delayed_D, D_org);
   buf (delayed_RD, RD_org);
`endif

   not (int_res__G, delayed_G);
   not (int_res__RD, delayed_RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_latch_r #1 (Q, viol_0, int_res__G, delayed_D, int_res__RD);
    `else
        scl40_htc50_latch_r (Q, viol_0, int_res__G, delayed_D, int_res__RD);
    `endif

    `ifdef VIRL_functiononly

    `else

not U0 (_net_0, D);
and U1 (cond3, RD, _net_0);
and U2 (cond2, RD, D);
not U3 (_net_1, D);
and U4 (cond1, G, _net_1);
and U5 (cond0, G, D);

specify
(D +=> Q)=(0, 0);
(negedge G => (Q : 1'b1))=(0, 0);
if ((~(D) & G)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((D & ~(G))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((D & G)) (negedge RD => (Q +: 1'b0))=(0, 0);
ifnone (posedge RD => (Q+:1'b1))=(0, 0);
$setuphold(posedge G &&& RD , posedge D &&& RD , 0 ,0, viol_0, , , delayed_G, delayed_D);
$setuphold(posedge G &&& RD , negedge D &&& RD , 0 ,0, viol_0, , , delayed_G, delayed_D);
$width(negedge G &&& cond3 , 0 ,0, viol_0);
$width(negedge G &&& cond2 , 0 ,0, viol_0);
$width(negedge RD &&& cond1 , 0 ,0, viol_0);
$width(negedge RD &&& cond0 , 0 ,0, viol_0);
$recrem(posedge RD &&& D , posedge G &&& D , 0 ,0, viol_0, , , delayed_RD, delayed_G);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_LDNRBQ_L50_2

//%BEGIN SEH_LDNRBQ_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_LDNRBQ_L50_4 (Q, G, D, RD, VDD, VSS, VBP, VBN);
   output Q;
   input G, D, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_G, delayed_D, delayed_RD;

   wire int_res__G, int_res__RD;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_LDNRBQ_L50_4 (Q, G, D, RD, VDD, VSS);
   output Q;
   input G, D, RD, VDD, VSS;

   reg viol_0;
   wire delayed_G, delayed_D, delayed_RD;

   wire int_res__G, int_res__RD;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_G, G_org);
   buf (delayed_D, D_org);
   buf (delayed_RD, RD_org);
`endif

   not (int_res__G, delayed_G);
   not (int_res__RD, delayed_RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_latch_r #1 (Q, viol_0, int_res__G, delayed_D, int_res__RD);
    `else
        scl40_htc50_latch_r (Q, viol_0, int_res__G, delayed_D, int_res__RD);
    `endif

    `ifdef VIRL_functiononly

    `else

not U0 (_net_0, D);
and U1 (cond3, RD, _net_0);
and U2 (cond2, RD, D);
not U3 (_net_1, D);
and U4 (cond1, G, _net_1);
and U5 (cond0, G, D);

specify
(D +=> Q)=(0, 0);
(negedge G => (Q : 1'b1))=(0, 0);
if ((~(D) & G)) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((D & ~(G))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((D & G)) (negedge RD => (Q +: 1'b0))=(0, 0);
ifnone (posedge RD => (Q+:1'b1))=(0, 0);
$setuphold(posedge G &&& RD , posedge D &&& RD , 0 ,0, viol_0, , , delayed_G, delayed_D);
$setuphold(posedge G &&& RD , negedge D &&& RD , 0 ,0, viol_0, , , delayed_G, delayed_D);
$width(negedge G &&& cond3 , 0 ,0, viol_0);
$width(negedge G &&& cond2 , 0 ,0, viol_0);
$width(negedge RD &&& cond1 , 0 ,0, viol_0);
$width(negedge RD &&& cond0 , 0 ,0, viol_0);
$recrem(posedge RD &&& D , posedge G &&& D , 0 ,0, viol_0, , , delayed_RD, delayed_G);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_LDNRBQ_L50_4

//%BEGIN SEH_LDPQ_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_LDPQ_L50_1 (Q, G, D, VDD, VSS, VBP, VBN);
   output Q;
   input G, D, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_G, delayed_D;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_LDPQ_L50_1 (Q, G, D, VDD, VSS);
   output Q;
   input G, D, VDD, VSS;

   reg viol_0;
   wire delayed_G, delayed_D;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_G, G_org);
   buf (delayed_D, D_org);
`endif


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_latch #1 (Q, viol_0, delayed_G, delayed_D);

    `else

        scl40_htc50_latch (Q, viol_0, delayed_G, delayed_D);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(D +=> Q)=(0, 0);
(posedge G => (Q : 1'b1))=(0, 0);
$setuphold(negedge G , posedge D , 0 ,0, viol_0, , , delayed_G, delayed_D);
$setuphold(negedge G , negedge D , 0 ,0, viol_0, , , delayed_G, delayed_D);
$width(posedge G &&& ~D , 0 ,0, viol_0);
$width(posedge G &&& D , 0 ,0, viol_0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_LDPQ_L50_1

//%BEGIN SEH_LDPQ_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_LDPQ_L50_2 (Q, G, D, VDD, VSS, VBP, VBN);
   output Q;
   input G, D, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_G, delayed_D;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_LDPQ_L50_2 (Q, G, D, VDD, VSS);
   output Q;
   input G, D, VDD, VSS;

   reg viol_0;
   wire delayed_G, delayed_D;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_G, G_org);
   buf (delayed_D, D_org);
`endif


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_latch #1 (Q, viol_0, delayed_G, delayed_D);

    `else

        scl40_htc50_latch (Q, viol_0, delayed_G, delayed_D);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(D +=> Q)=(0, 0);
(posedge G => (Q : 1'b1))=(0, 0);
$setuphold(negedge G , posedge D , 0 ,0, viol_0, , , delayed_G, delayed_D);
$setuphold(negedge G , negedge D , 0 ,0, viol_0, , , delayed_G, delayed_D);
$width(posedge G &&& ~D , 0 ,0, viol_0);
$width(posedge G &&& D , 0 ,0, viol_0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_LDPQ_L50_2

//%BEGIN SEH_LDPQ_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_LDPQ_L50_4 (Q, G, D, VDD, VSS, VBP, VBN);
   output Q;
   input G, D, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_G, delayed_D;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_LDPQ_L50_4 (Q, G, D, VDD, VSS);
   output Q;
   input G, D, VDD, VSS;

   reg viol_0;
   wire delayed_G, delayed_D;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_G, G_org);
   buf (delayed_D, D_org);
`endif


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_latch #1 (Q, viol_0, delayed_G, delayed_D);

    `else

        scl40_htc50_latch (Q, viol_0, delayed_G, delayed_D);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(D +=> Q)=(0, 0);
(posedge G => (Q : 1'b1))=(0, 0);
$setuphold(negedge G , posedge D , 0 ,0, viol_0, , , delayed_G, delayed_D);
$setuphold(negedge G , negedge D , 0 ,0, viol_0, , , delayed_G, delayed_D);
$width(posedge G &&& ~D , 0 ,0, viol_0);
$width(posedge G &&& D , 0 ,0, viol_0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_LDPQ_L50_4

//%BEGIN SEH_LDPRBQ_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_LDPRBQ_L50_1 (Q, G, D, RD, VDD, VSS, VBP, VBN);
   output Q;
   input G, D, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_G, delayed_D, delayed_RD;

   wire int_res__RD;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_LDPRBQ_L50_1 (Q, G, D, RD, VDD, VSS);
   output Q;
   input G, D, RD, VDD, VSS;

   reg viol_0;
   wire delayed_G, delayed_D, delayed_RD;

   wire int_res__RD;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_G, G_org);
   buf (delayed_D, D_org);
   buf (delayed_RD, RD_org);
`endif

   not (int_res__RD, delayed_RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_latch_r #1 (Q, viol_0, delayed_G, delayed_D, int_res__RD);

   `else
        scl40_htc50_latch_r (Q, viol_0, delayed_G, delayed_D, int_res__RD);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
and U1 (cond3, RD, _net_0);
and U2 (cond2, RD, D);
not U3 (_net_1, G);
not U4 (_net_2, D);
and U5 (cond1, _net_1, _net_2);
not U6 (_net_3, G);
and U7 (cond0, _net_3, D);

specify
(D +=> Q)=(0, 0);
(posedge G => (Q : 1'b1))=(0, 0);
if ((~(D) & ~(G))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((D & ~(G))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((D & G)) (negedge RD => (Q +: 1'b0))=(0, 0);
ifnone (posedge RD => (Q+:1'b1))=(0, 0);
$setuphold(negedge G &&& RD , posedge D &&& RD , 0 ,0, viol_0, , , delayed_G, delayed_D);
$setuphold(negedge G &&& RD , negedge D &&& RD , 0 ,0, viol_0, , , delayed_G, delayed_D);
$width(posedge G &&& cond3 , 0 ,0, viol_0);
$width(posedge G &&& cond2 , 0 ,0, viol_0);
$width(negedge RD &&& cond1 , 0 ,0, viol_0);
$width(negedge RD &&& cond0 , 0 ,0, viol_0);
$recrem(posedge RD &&& D , negedge G &&& D , 0 ,0, viol_0, , , delayed_RD, delayed_G);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_LDPRBQ_L50_1

//%BEGIN SEH_LDPRBQ_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_LDPRBQ_L50_2 (Q, G, D, RD, VDD, VSS, VBP, VBN);
   output Q;
   input G, D, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_G, delayed_D, delayed_RD;

   wire int_res__RD;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_LDPRBQ_L50_2 (Q, G, D, RD, VDD, VSS);
   output Q;
   input G, D, RD, VDD, VSS;

   reg viol_0;
   wire delayed_G, delayed_D, delayed_RD;

   wire int_res__RD;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_G, G_org);
   buf (delayed_D, D_org);
   buf (delayed_RD, RD_org);
`endif

   not (int_res__RD, delayed_RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_latch_r #1 (Q, viol_0, delayed_G, delayed_D, int_res__RD);

   `else
        scl40_htc50_latch_r (Q, viol_0, delayed_G, delayed_D, int_res__RD);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
and U1 (cond3, RD, _net_0);
and U2 (cond2, RD, D);
not U3 (_net_1, G);
not U4 (_net_2, D);
and U5 (cond1, _net_1, _net_2);
not U6 (_net_3, G);
and U7 (cond0, _net_3, D);

specify
(D +=> Q)=(0, 0);
(posedge G => (Q : 1'b1))=(0, 0);
if ((~(D) & ~(G))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((D & ~(G))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((D & G)) (negedge RD => (Q +: 1'b0))=(0, 0);
ifnone (posedge RD => (Q+:1'b1))=(0, 0);
$setuphold(negedge G &&& RD , posedge D &&& RD , 0 ,0, viol_0, , , delayed_G, delayed_D);
$setuphold(negedge G &&& RD , negedge D &&& RD , 0 ,0, viol_0, , , delayed_G, delayed_D);
$width(posedge G &&& cond3 , 0 ,0, viol_0);
$width(posedge G &&& cond2 , 0 ,0, viol_0);
$width(negedge RD &&& cond1 , 0 ,0, viol_0);
$width(negedge RD &&& cond0 , 0 ,0, viol_0);
$recrem(posedge RD &&& D , negedge G &&& D , 0 ,0, viol_0, , , delayed_RD, delayed_G);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_LDPRBQ_L50_2

//%BEGIN SEH_LDPRBQ_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_LDPRBQ_L50_4 (Q, G, D, RD, VDD, VSS, VBP, VBN);
   output Q;
   input G, D, RD, VDD, VSS, VBP, VBN;

   reg viol_0;
   wire delayed_G, delayed_D, delayed_RD;

   wire int_res__RD;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_LDPRBQ_L50_4 (Q, G, D, RD, VDD, VSS);
   output Q;
   input G, D, RD, VDD, VSS;

   reg viol_0;
   wire delayed_G, delayed_D, delayed_RD;

   wire int_res__RD;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D_org, D, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (G_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (G_org, G, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (RD_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (RD_org, RD, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

`ifdef _fv
   buf (delayed_G, G_org);
   buf (delayed_D, D_org);
   buf (delayed_RD, RD_org);
`endif

   not (int_res__RD, delayed_RD);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_latch_r #1 (Q, viol_0, delayed_G, delayed_D, int_res__RD);

   `else
        scl40_htc50_latch_r (Q, viol_0, delayed_G, delayed_D, int_res__RD);

   `endif

   `ifdef VIRL_functiononly

   `else

not U0 (_net_0, D);
and U1 (cond3, RD, _net_0);
and U2 (cond2, RD, D);
not U3 (_net_1, G);
not U4 (_net_2, D);
and U5 (cond1, _net_1, _net_2);
not U6 (_net_3, G);
and U7 (cond0, _net_3, D);

specify
(D +=> Q)=(0, 0);
(posedge G => (Q : 1'b1))=(0, 0);
if ((~(D) & ~(G))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((D & ~(G))) (negedge RD => (Q +: 1'b0))=(0, 0);
if ((D & G)) (negedge RD => (Q +: 1'b0))=(0, 0);
ifnone (posedge RD => (Q+:1'b1))=(0, 0);
$setuphold(negedge G &&& RD , posedge D &&& RD , 0 ,0, viol_0, , , delayed_G, delayed_D);
$setuphold(negedge G &&& RD , negedge D &&& RD , 0 ,0, viol_0, , , delayed_G, delayed_D);
$width(posedge G &&& cond3 , 0 ,0, viol_0);
$width(posedge G &&& cond2 , 0 ,0, viol_0);
$width(negedge RD &&& cond1 , 0 ,0, viol_0);
$width(negedge RD &&& cond0 , 0 ,0, viol_0);
$recrem(posedge RD &&& D , negedge G &&& D , 0 ,0, viol_0, , , delayed_RD, delayed_G);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_LDPRBQ_L50_4

//%BEGIN SEH_MAJ3_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_MAJ3_L50_0P5 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MAJ3_L50_0P5 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, A1_org, A3_org);
   and (int_res_2, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        or #1 (X, int_res_0, int_res_1, int_res_2);
   `else
        or (X, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & A2)) (A3 +=> X)=(0, 0);
if ((A1 & ~(A2))) (A3 +=> X)=(0, 0);
if ((~(A1) & A3)) (A2 +=> X)=(0, 0);
if ((A1 & ~(A3))) (A2 +=> X)=(0, 0);
if ((~(A2) & A3)) (A1 +=> X)=(0, 0);
if ((A2 & ~(A3))) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MAJ3_L50_0P5

//%BEGIN SEH_MAJ3_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_MAJ3_L50_1 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MAJ3_L50_1 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, A1_org, A3_org);
   and (int_res_2, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        or #1 (X, int_res_0, int_res_1, int_res_2);
   `else
        or (X, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & A2)) (A3 +=> X)=(0, 0);
if ((A1 & ~(A2))) (A3 +=> X)=(0, 0);
if ((~(A1) & A3)) (A2 +=> X)=(0, 0);
if ((A1 & ~(A3))) (A2 +=> X)=(0, 0);
if ((~(A2) & A3)) (A1 +=> X)=(0, 0);
if ((A2 & ~(A3))) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MAJ3_L50_1

//%BEGIN SEH_MAJ3_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_MAJ3_L50_2 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MAJ3_L50_2 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, A1_org, A3_org);
   and (int_res_2, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        or #1 (X, int_res_0, int_res_1, int_res_2);
   `else
        or (X, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & A2)) (A3 +=> X)=(0, 0);
if ((A1 & ~(A2))) (A3 +=> X)=(0, 0);
if ((~(A1) & A3)) (A2 +=> X)=(0, 0);
if ((A1 & ~(A3))) (A2 +=> X)=(0, 0);
if ((~(A2) & A3)) (A1 +=> X)=(0, 0);
if ((A2 & ~(A3))) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MAJ3_L50_2

//%BEGIN SEH_MAJ3_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_MAJ3_L50_4 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MAJ3_L50_4 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, A1_org, A3_org);
   and (int_res_2, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        or #1 (X, int_res_0, int_res_1, int_res_2);
   `else
        or (X, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & A2)) (A3 +=> X)=(0, 0);
if ((A1 & ~(A2))) (A3 +=> X)=(0, 0);
if ((~(A1) & A3)) (A2 +=> X)=(0, 0);
if ((A1 & ~(A3))) (A2 +=> X)=(0, 0);
if ((~(A2) & A3)) (A1 +=> X)=(0, 0);
if ((A2 & ~(A3))) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MAJ3_L50_4

//%BEGIN SEH_MAJI3_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_MAJI3_L50_1 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MAJI3_L50_1 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, A1_org, A3_org);
   and (int_res_2, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, int_res_1, int_res_2);
   `else
        nor (X, int_res_0, int_res_1, int_res_2);
    `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & A2)) (A3 -=> X)=(0, 0);
if ((A1 & ~(A2))) (A3 -=> X)=(0, 0);
if ((~(A1) & A3)) (A2 -=> X)=(0, 0);
if ((A1 & ~(A3))) (A2 -=> X)=(0, 0);
if ((~(A2) & A3)) (A1 -=> X)=(0, 0);
if ((A2 & ~(A3))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MAJI3_L50_1

//%BEGIN SEH_MAJI3_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_MAJI3_L50_2 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MAJI3_L50_2 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, A1_org, A3_org);
   and (int_res_2, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, int_res_1, int_res_2);
   `else
        nor (X, int_res_0, int_res_1, int_res_2);
    `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & A2)) (A3 -=> X)=(0, 0);
if ((A1 & ~(A2))) (A3 -=> X)=(0, 0);
if ((~(A1) & A3)) (A2 -=> X)=(0, 0);
if ((A1 & ~(A3))) (A2 -=> X)=(0, 0);
if ((~(A2) & A3)) (A1 -=> X)=(0, 0);
if ((A2 & ~(A3))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MAJI3_L50_2

//%BEGIN SEH_MAJI3_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_MAJI3_L50_4 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MAJI3_L50_4 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, A1_org, A2_org);
   and (int_res_1, A1_org, A3_org);
   and (int_res_2, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, int_res_1, int_res_2);
   `else
        nor (X, int_res_0, int_res_1, int_res_2);
    `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & A2)) (A3 -=> X)=(0, 0);
if ((A1 & ~(A2))) (A3 -=> X)=(0, 0);
if ((~(A1) & A3)) (A2 -=> X)=(0, 0);
if ((A1 & ~(A3))) (A2 -=> X)=(0, 0);
if ((~(A2) & A3)) (A1 -=> X)=(0, 0);
if ((A2 & ~(A3))) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MAJI3_L50_4

//%BEGIN SEH_MUX2_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_MUX2_L50_0P5 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUX2_L50_0P5 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_mux2 #1 (X, D1_org, D0_org, S_org);
   `else
        scl40_htc50_mux2 (X, D1_org, D0_org, S_org);
    `endif

   `ifdef VIRL_functiononly

   `else


specify
(D0 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
if ((~(D0) & D1)) (S +=> X)=(0, 0);
if ((D0 & ~(D1))) (S -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MUX2_L50_0P5

//%BEGIN SEH_MUX2_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_MUX2_L50_1 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUX2_L50_1 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_mux2 #1 (X, D1_org, D0_org, S_org);
   `else
        scl40_htc50_mux2 (X, D1_org, D0_org, S_org);
    `endif

   `ifdef VIRL_functiononly

   `else


specify
(D0 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
if ((~(D0) & D1)) (S +=> X)=(0, 0);
if ((D0 & ~(D1))) (S -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MUX2_L50_1

//%BEGIN SEH_MUX2_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_MUX2_L50_2 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUX2_L50_2 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_mux2 #1 (X, D1_org, D0_org, S_org);
   `else
        scl40_htc50_mux2 (X, D1_org, D0_org, S_org);
    `endif

   `ifdef VIRL_functiononly

   `else


specify
(D0 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
if ((~(D0) & D1)) (S +=> X)=(0, 0);
if ((D0 & ~(D1))) (S -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MUX2_L50_2

//%BEGIN SEH_MUX2_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_MUX2_L50_4 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUX2_L50_4 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_mux2 #1 (X, D1_org, D0_org, S_org);
   `else
        scl40_htc50_mux2 (X, D1_org, D0_org, S_org);
    `endif

   `ifdef VIRL_functiononly

   `else


specify
(D0 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
if ((~(D0) & D1)) (S +=> X)=(0, 0);
if ((D0 & ~(D1))) (S -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MUX2_L50_4

//%BEGIN SEH_MUX2_DGL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_MUX2_DGL50_1 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUX2_DGL50_1 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_mux2 #1 (X, D1_org, D0_org, S_org);
   `else
        scl40_htc50_mux2 (X, D1_org, D0_org, S_org);
    `endif

   `ifdef VIRL_functiononly

   `else


specify
(D0 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
if ((~(D0) & D1)) (S +=> X)=(0, 0);
if ((D0 & ~(D1))) (S -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MUX2_DGL50_1

//%BEGIN SEH_MUX2_DGL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_MUX2_DGL50_2 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUX2_DGL50_2 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_mux2 #1 (X, D1_org, D0_org, S_org);
   `else
        scl40_htc50_mux2 (X, D1_org, D0_org, S_org);
    `endif

   `ifdef VIRL_functiononly

   `else


specify
(D0 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
if ((~(D0) & D1)) (S +=> X)=(0, 0);
if ((D0 & ~(D1))) (S -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MUX2_DGL50_2

//%BEGIN SEH_MUX2_DGL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_MUX2_DGL50_4 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUX2_DGL50_4 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_mux2 #1 (X, D1_org, D0_org, S_org);
   `else
        scl40_htc50_mux2 (X, D1_org, D0_org, S_org);
    `endif

   `ifdef VIRL_functiononly

   `else


specify
(D0 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
if ((~(D0) & D1)) (S +=> X)=(0, 0);
if ((D0 & ~(D1))) (S -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MUX2_DGL50_4

//%BEGIN SEH_MUX2_SL50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_MUX2_SL50_0P5 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUX2_SL50_0P5 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_mux2 #1 (X, D1_org, D0_org, S_org);
   `else
        scl40_htc50_mux2 (X, D1_org, D0_org, S_org);
    `endif

   `ifdef VIRL_functiononly

   `else


specify
(D0 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
if ((~(D0) & D1)) (S +=> X)=(0, 0);
if ((D0 & ~(D1))) (S -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MUX2_SL50_0P5

//%BEGIN SEH_MUX2_SL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_MUX2_SL50_1 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUX2_SL50_1 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_mux2 #1 (X, D1_org, D0_org, S_org);
   `else
        scl40_htc50_mux2 (X, D1_org, D0_org, S_org);
    `endif

   `ifdef VIRL_functiononly

   `else


specify
(D0 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
if ((~(D0) & D1)) (S +=> X)=(0, 0);
if ((D0 & ~(D1))) (S -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MUX2_SL50_1

//%BEGIN SEH_MUX2_SL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_MUX2_SL50_2 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUX2_SL50_2 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_mux2 #1 (X, D1_org, D0_org, S_org);
   `else
        scl40_htc50_mux2 (X, D1_org, D0_org, S_org);
    `endif

   `ifdef VIRL_functiononly

   `else


specify
(D0 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
if ((~(D0) & D1)) (S +=> X)=(0, 0);
if ((D0 & ~(D1))) (S -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MUX2_SL50_2

//%BEGIN SEH_MUX2_SL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_MUX2_SL50_4 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUX2_SL50_4 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_mux2 #1 (X, D1_org, D0_org, S_org);
   `else
        scl40_htc50_mux2 (X, D1_org, D0_org, S_org);
    `endif

   `ifdef VIRL_functiononly

   `else


specify
(D0 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
if ((~(D0) & D1)) (S +=> X)=(0, 0);
if ((D0 & ~(D1))) (S -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MUX2_SL50_4

//%BEGIN SEH_MUX2_GL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_MUX2_GL50_1 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUX2_GL50_1 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_mux2 #1 (X, D1_org, D0_org, S_org);
   `else
        scl40_htc50_mux2 (X, D1_org, D0_org, S_org);
    `endif

   `ifdef VIRL_functiononly

   `else


specify
(D0 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
if ((~(D0) & D1)) (S +=> X)=(0, 0);
if ((D0 & ~(D1))) (S -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MUX2_GL50_1

//%BEGIN SEH_MUX2_GL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_MUX2_GL50_2 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUX2_GL50_2 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_mux2 #1 (X, D1_org, D0_org, S_org);
   `else
        scl40_htc50_mux2 (X, D1_org, D0_org, S_org);
    `endif

   `ifdef VIRL_functiononly

   `else


specify
(D0 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
if ((~(D0) & D1)) (S +=> X)=(0, 0);
if ((D0 & ~(D1))) (S -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MUX2_GL50_2

//%BEGIN SEH_MUX2_GL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_MUX2_GL50_4 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUX2_GL50_4 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_mux2 #1 (X, D1_org, D0_org, S_org);
   `else
        scl40_htc50_mux2 (X, D1_org, D0_org, S_org);
    `endif

   `ifdef VIRL_functiononly

   `else


specify
(D0 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
if ((~(D0) & D1)) (S +=> X)=(0, 0);
if ((D0 & ~(D1))) (S -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MUX2_GL50_4

//%BEGIN SEH_MUX2_GL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_MUX2_GL50_8 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUX2_GL50_8 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_mux2 #1 (X, D1_org, D0_org, S_org);
   `else
        scl40_htc50_mux2 (X, D1_org, D0_org, S_org);
    `endif

   `ifdef VIRL_functiononly

   `else


specify
(D0 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
if ((~(D0) & D1)) (S +=> X)=(0, 0);
if ((D0 & ~(D1))) (S -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_MUX2_GL50_8

//%BEGIN SEH_MUX2AN2_DGL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_MUX2AN2_DGL50_1 (X, D0A1, D0A2, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0A1, D0A2, D1, S, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0A1_org, D0A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D0A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0A2_org, D0A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUX2AN2_DGL50_1 (X, D0A1, D0A2, D1, S, VDD, VSS);
   output X;
   input D0A1, D0A2, D1, S, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0A1_org, D0A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D0A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0A2_org, D0A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, D0A1_org, D0A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_mux2 #1 (X, D1_org, int_res_0, S_org);
    `else
        scl40_htc50_mux2 (X, D1_org, int_res_0, S_org);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
(D0A1 +=> X)=(0, 0);
(D0A2 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
if ((~(D0A1) & ~(D0A2) & D1)) (S +=> X)=(0, 0);
if ((~(D0A1) & D0A2 & D1)) (S +=> X)=(0, 0);
if ((D0A1 & ~(D0A2) & D1)) (S +=> X)=(0, 0);
if ((D0A1 & D0A2 & ~(D1))) (S -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_MUX2AN2_DGL50_1

//%BEGIN SEH_MUX2AN2_DGL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_MUX2AN2_DGL50_2 (X, D0A1, D0A2, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0A1, D0A2, D1, S, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0A1_org, D0A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D0A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0A2_org, D0A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUX2AN2_DGL50_2 (X, D0A1, D0A2, D1, S, VDD, VSS);
   output X;
   input D0A1, D0A2, D1, S, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0A1_org, D0A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D0A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0A2_org, D0A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, D0A1_org, D0A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_mux2 #1 (X, D1_org, int_res_0, S_org);
    `else
        scl40_htc50_mux2 (X, D1_org, int_res_0, S_org);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
(D0A1 +=> X)=(0, 0);
(D0A2 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
if ((~(D0A1) & ~(D0A2) & D1)) (S +=> X)=(0, 0);
if ((~(D0A1) & D0A2 & D1)) (S +=> X)=(0, 0);
if ((D0A1 & ~(D0A2) & D1)) (S +=> X)=(0, 0);
if ((D0A1 & D0A2 & ~(D1))) (S -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_MUX2AN2_DGL50_2

//%BEGIN SEH_MUX2AN2_DGL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_MUX2AN2_DGL50_4 (X, D0A1, D0A2, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0A1, D0A2, D1, S, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0A1_org, D0A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D0A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0A2_org, D0A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUX2AN2_DGL50_4 (X, D0A1, D0A2, D1, S, VDD, VSS);
   output X;
   input D0A1, D0A2, D1, S, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0A1_org, D0A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D0A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0A2_org, D0A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   and (int_res_0, D0A1_org, D0A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        scl40_htc50_mux2 #1 (X, D1_org, int_res_0, S_org);
    `else
        scl40_htc50_mux2 (X, D1_org, int_res_0, S_org);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
(D0A1 +=> X)=(0, 0);
(D0A2 +=> X)=(0, 0);
(D1 +=> X)=(0, 0);
if ((~(D0A1) & ~(D0A2) & D1)) (S +=> X)=(0, 0);
if ((~(D0A1) & D0A2 & D1)) (S +=> X)=(0, 0);
if ((D0A1 & ~(D0A2) & D1)) (S +=> X)=(0, 0);
if ((D0A1 & D0A2 & ~(D1))) (S -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_MUX2AN2_DGL50_4

//%BEGIN SEH_MUXI2_DGL50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_MUXI2_DGL50_0P5 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUXI2_DGL50_0P5 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   scl40_htc50_mux2 (int_res_mux1, D1_org, D0_org, S_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
        not #1 (X, int_res_mux1);
    `else
        not (X, int_res_mux1);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
if ((~(D0) & D1)) (S -=> X)=(0, 0);
if ((D0 & ~(D1))) (S +=> X)=(0, 0);
if ((~(D0) & S)) (D1 -=> X)=(0, 0);
if ((D0 & S)) (D1 -=> X)=(0, 0);
if ((~(D1) & ~(S))) (D0 -=> X)=(0, 0);
if ((D1 & ~(S))) (D0 -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_MUXI2_DGL50_0P5

//%BEGIN SEH_MUXI2_DGL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_MUXI2_DGL50_1 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUXI2_DGL50_1 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   scl40_htc50_mux2 (int_res_mux1, D1_org, D0_org, S_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
        not #1 (X, int_res_mux1);
    `else
        not (X, int_res_mux1);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
if ((~(D0) & D1)) (S -=> X)=(0, 0);
if ((D0 & ~(D1))) (S +=> X)=(0, 0);
if ((~(D0) & S)) (D1 -=> X)=(0, 0);
if ((D0 & S)) (D1 -=> X)=(0, 0);
if ((~(D1) & ~(S))) (D0 -=> X)=(0, 0);
if ((D1 & ~(S))) (D0 -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_MUXI2_DGL50_1

//%BEGIN SEH_MUXI2_DGL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_MUXI2_DGL50_2 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUXI2_DGL50_2 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   scl40_htc50_mux2 (int_res_mux1, D1_org, D0_org, S_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
        not #1 (X, int_res_mux1);
    `else
        not (X, int_res_mux1);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
if ((~(D0) & D1)) (S -=> X)=(0, 0);
if ((D0 & ~(D1))) (S +=> X)=(0, 0);
if ((~(D0) & S)) (D1 -=> X)=(0, 0);
if ((D0 & S)) (D1 -=> X)=(0, 0);
if ((~(D1) & ~(S))) (D0 -=> X)=(0, 0);
if ((D1 & ~(S))) (D0 -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_MUXI2_DGL50_2

//%BEGIN SEH_MUXI2_DGL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_MUXI2_DGL50_4 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUXI2_DGL50_4 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   scl40_htc50_mux2 (int_res_mux1, D1_org, D0_org, S_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
        not #1 (X, int_res_mux1);
    `else
        not (X, int_res_mux1);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
if ((~(D0) & D1)) (S -=> X)=(0, 0);
if ((D0 & ~(D1))) (S +=> X)=(0, 0);
if ((~(D0) & S)) (D1 -=> X)=(0, 0);
if ((D0 & S)) (D1 -=> X)=(0, 0);
if ((~(D1) & ~(S))) (D0 -=> X)=(0, 0);
if ((D1 & ~(S))) (D0 -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_MUXI2_DGL50_4

//%BEGIN SEH_MUXI2_SL50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_MUXI2_SL50_0P5 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUXI2_SL50_0P5 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   scl40_htc50_mux2 (int_res_mux1, D1_org, D0_org, S_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
        not #1 (X, int_res_mux1);
    `else
        not (X, int_res_mux1);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
(D0 -=> X)=(0, 0);
(D1 -=> X)=(0, 0);
if ((~(D0) & D1)) (S -=> X)=(0, 0);
if ((D0 & ~(D1))) (S +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_MUXI2_SL50_0P5

//%BEGIN SEH_MUXI2_SL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_MUXI2_SL50_1 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUXI2_SL50_1 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   scl40_htc50_mux2 (int_res_mux1, D1_org, D0_org, S_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
        not #1 (X, int_res_mux1);
    `else
        not (X, int_res_mux1);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
(D0 -=> X)=(0, 0);
(D1 -=> X)=(0, 0);
if ((~(D0) & D1)) (S -=> X)=(0, 0);
if ((D0 & ~(D1))) (S +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_MUXI2_SL50_1

//%BEGIN SEH_MUXI2_SL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_MUXI2_SL50_2 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUXI2_SL50_2 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   scl40_htc50_mux2 (int_res_mux1, D1_org, D0_org, S_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
        not #1 (X, int_res_mux1);
    `else
        not (X, int_res_mux1);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
(D0 -=> X)=(0, 0);
(D1 -=> X)=(0, 0);
if ((~(D0) & D1)) (S -=> X)=(0, 0);
if ((D0 & ~(D1))) (S +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_MUXI2_SL50_2

//%BEGIN SEH_MUXI2_SL50_3

`celldefine
`ifdef BIAS_PINS
module SEH_MUXI2_SL50_3 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUXI2_SL50_3 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   scl40_htc50_mux2 (int_res_mux1, D1_org, D0_org, S_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
        not #1 (X, int_res_mux1);
    `else
        not (X, int_res_mux1);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
(D0 -=> X)=(0, 0);
(D1 -=> X)=(0, 0);
if ((~(D0) & D1)) (S -=> X)=(0, 0);
if ((D0 & ~(D1))) (S +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_MUXI2_SL50_3

//%BEGIN SEH_MUXI2_SL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_MUXI2_SL50_4 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUXI2_SL50_4 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   scl40_htc50_mux2 (int_res_mux1, D1_org, D0_org, S_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
        not #1 (X, int_res_mux1);
    `else
        not (X, int_res_mux1);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
(D0 -=> X)=(0, 0);
(D1 -=> X)=(0, 0);
if ((~(D0) & D1)) (S -=> X)=(0, 0);
if ((D0 & ~(D1))) (S +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_MUXI2_SL50_4

//%BEGIN SEH_MUXI2_SL50_6

`celldefine
`ifdef BIAS_PINS
module SEH_MUXI2_SL50_6 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUXI2_SL50_6 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   scl40_htc50_mux2 (int_res_mux1, D1_org, D0_org, S_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
        not #1 (X, int_res_mux1);
    `else
        not (X, int_res_mux1);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
(D0 -=> X)=(0, 0);
(D1 -=> X)=(0, 0);
if ((~(D0) & D1)) (S -=> X)=(0, 0);
if ((D0 & ~(D1))) (S +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_MUXI2_SL50_6

//%BEGIN SEH_MUXI2_SL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_MUXI2_SL50_8 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUXI2_SL50_8 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   scl40_htc50_mux2 (int_res_mux1, D1_org, D0_org, S_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
        not #1 (X, int_res_mux1);
    `else
        not (X, int_res_mux1);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
(D0 -=> X)=(0, 0);
(D1 -=> X)=(0, 0);
if ((~(D0) & D1)) (S -=> X)=(0, 0);
if ((D0 & ~(D1))) (S +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_MUXI2_SL50_8

//%BEGIN SEH_MUXI2_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_MUXI2_L50_1 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUXI2_L50_1 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   scl40_htc50_mux2 (int_res_mux1, D1_org, D0_org, S_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
        not #1 (X, int_res_mux1);
    `else
        not (X, int_res_mux1);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
(D0 -=> X)=(0, 0);
(D1 -=> X)=(0, 0);
if ((~(D0) & D1)) (S -=> X)=(0, 0);
if ((D0 & ~(D1))) (S +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_MUXI2_L50_1

//%BEGIN SEH_MUXI2_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_MUXI2_L50_2 (X, D0, D1, S, VDD, VSS, VBP, VBN);
   output X;
   input D0, D1, S, VDD, VSS, VBP, VBN;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_MUXI2_L50_2 (X, D0, D1, S, VDD, VSS);
   output X;
   input D0, D1, S, VDD, VSS;

   wire int_res_mux1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (D0_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D0_org, D0, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (D1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (D1_org, D1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (S_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (S_org, S, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   scl40_htc50_mux2 (int_res_mux1, D1_org, D0_org, S_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
        not #1 (X, int_res_mux1);
    `else
        not (X, int_res_mux1);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
(D0 -=> X)=(0, 0);
(D1 -=> X)=(0, 0);
if ((~(D0) & D1)) (S -=> X)=(0, 0);
if ((D0 & ~(D1))) (S +=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_MUXI2_L50_2

//%BEGIN SEH_ND2_L50_12

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_L50_12 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_L50_12 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_L50_12

//%BEGIN SEH_ND2_L50_16

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_L50_16 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_L50_16 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_L50_16

//%BEGIN SEH_ND2_L50_24

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_L50_24 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_L50_24 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_L50_24

//%BEGIN SEH_ND2_L50_6

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_L50_6 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_L50_6 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_L50_6

//%BEGIN SEH_ND2_L50_8

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_L50_8 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_L50_8 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_L50_8

//%BEGIN SEH_ND2_SL50_12

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_SL50_12 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_SL50_12 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_SL50_12

//%BEGIN SEH_ND2_SL50_16

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_SL50_16 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_SL50_16 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_SL50_16

//%BEGIN SEH_ND2_SL50_24

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_SL50_24 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_SL50_24 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_SL50_24

//%BEGIN SEH_ND2_SL50_6

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_SL50_6 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_SL50_6 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_SL50_6

//%BEGIN SEH_ND2_SL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_SL50_8 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_SL50_8 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_SL50_8

//%BEGIN SEH_ND2_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_L50_0P5 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_L50_0P5 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_L50_0P5

//%BEGIN SEH_ND2_L50_0P8

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_L50_0P8 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_L50_0P8 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_L50_0P8

//%BEGIN SEH_ND2_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_L50_1 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_L50_1 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_L50_1

//%BEGIN SEH_ND2_L50_1P5

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_L50_1P5 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_L50_1P5 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_L50_1P5

//%BEGIN SEH_ND2_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_L50_2 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_L50_2 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_L50_2

//%BEGIN SEH_ND2_L50_3

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_L50_3 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_L50_3 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_L50_3

//%BEGIN SEH_ND2_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_L50_4 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_L50_4 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_L50_4

//%BEGIN SEH_ND2_SL50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_SL50_0P5 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_SL50_0P5 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_SL50_0P5

//%BEGIN SEH_ND2_SL50_0P65

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_SL50_0P65 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_SL50_0P65 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_SL50_0P65

//%BEGIN SEH_ND2_SL50_0P8

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_SL50_0P8 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_SL50_0P8 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_SL50_0P8

//%BEGIN SEH_ND2_SL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_SL50_1 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_SL50_1 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_SL50_1

//%BEGIN SEH_ND2_SL50_1P5

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_SL50_1P5 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_SL50_1P5 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_SL50_1P5

//%BEGIN SEH_ND2_SL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_SL50_2 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_SL50_2 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_SL50_2

//%BEGIN SEH_ND2_SL50_3

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_SL50_3 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_SL50_3 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_SL50_3

//%BEGIN SEH_ND2_SL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_SL50_4 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_SL50_4 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_SL50_4

//%BEGIN SEH_ND2_TL50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_TL50_0P5 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_TL50_0P5 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_TL50_0P5

//%BEGIN SEH_ND2_TL50_0P8

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_TL50_0P8 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_TL50_0P8 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_TL50_0P8

//%BEGIN SEH_ND2_TL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_TL50_1 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_TL50_1 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_TL50_1

//%BEGIN SEH_ND2_TL50_1P5

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_TL50_1P5 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_TL50_1P5 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_TL50_1P5

//%BEGIN SEH_ND2_TL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_TL50_2 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_TL50_2 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_TL50_2

//%BEGIN SEH_ND2_TL50_3

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_TL50_3 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_TL50_3 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_TL50_3

//%BEGIN SEH_ND2_TL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_TL50_4 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_TL50_4 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_TL50_4

//%BEGIN SEH_ND2_TL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_TL50_8 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_TL50_8 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_TL50_8

//%BEGIN SEH_ND2_GL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_GL50_1 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_GL50_1 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_GL50_1

//%BEGIN SEH_ND2_GL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_GL50_2 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_GL50_2 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_GL50_2

//%BEGIN SEH_ND2_GL50_3

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_GL50_3 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_GL50_3 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_GL50_3

//%BEGIN SEH_ND2_GL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_ND2_GL50_4 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2_GL50_4 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org);
   `else
        nand (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2_GL50_4

//%BEGIN SEH_ND2B_V1DGL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_ND2B_V1DGL50_8 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2B_V1DGL50_8 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2B_V1DGL50_8

//%BEGIN SEH_ND2B_L50_8

`celldefine
`ifdef BIAS_PINS
module SEH_ND2B_L50_8 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2B_L50_8 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2B_L50_8

//%BEGIN SEH_ND2B_V1DGL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ND2B_V1DGL50_1 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2B_V1DGL50_1 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2B_V1DGL50_1

//%BEGIN SEH_ND2B_V1DGL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ND2B_V1DGL50_2 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2B_V1DGL50_2 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2B_V1DGL50_2

//%BEGIN SEH_ND2B_V1DGL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_ND2B_V1DGL50_4 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2B_V1DGL50_4 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2B_V1DGL50_4

//%BEGIN SEH_ND2B_SL50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_ND2B_SL50_0P5 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2B_SL50_0P5 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2B_SL50_0P5

//%BEGIN SEH_ND2B_SL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ND2B_SL50_1 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2B_SL50_1 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2B_SL50_1

//%BEGIN SEH_ND2B_SL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ND2B_SL50_2 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2B_SL50_2 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2B_SL50_2

//%BEGIN SEH_ND2B_SL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_ND2B_SL50_4 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2B_SL50_4 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2B_SL50_4

//%BEGIN SEH_ND2B_SL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_ND2B_SL50_8 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2B_SL50_8 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2B_SL50_8

//%BEGIN SEH_ND2B_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ND2B_L50_1 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2B_L50_1 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2B_L50_1

//%BEGIN SEH_ND2B_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ND2B_L50_2 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2B_L50_2 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2B_L50_2

//%BEGIN SEH_ND2B_L50_3

`celldefine
`ifdef BIAS_PINS
module SEH_ND2B_L50_3 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2B_L50_3 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2B_L50_3

//%BEGIN SEH_ND2B_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_ND2B_L50_4 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2B_L50_4 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND2B_L50_4

//%BEGIN SEH_ND2EN2_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_ND2EN2_L50_0P5 (XD, XE, A1, A2, VDD, VSS, VBP, VBN);
   output XD, XE;
   input A1, A2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2EN2_L50_0P5 (XD, XE, A1, A2, VDD, VSS);
   output XD, XE;
   input A1, A2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   
   xor (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (XD, A1_org, A2_org);
         not  #1 (XE, int_res_0);
   `else
         nand (XD, A1_org, A2_org);
         not  (XE, int_res_0);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> XD)=(0, 0);
(A2 -=> XD)=(0, 0);
if (~(A2)) (A1 -=> XE)=(0, 0);
if (A2) (A1 +=> XE)=(0, 0);
if (~(A1)) (A2 -=> XE)=(0, 0);
if (A1) (A2 +=> XE)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_ND2EN2_L50_0P5

//%BEGIN SEH_ND2EN2_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ND2EN2_L50_1 (XD, XE, A1, A2, VDD, VSS, VBP, VBN);
   output XD, XE;
   input A1, A2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2EN2_L50_1 (XD, XE, A1, A2, VDD, VSS);
   output XD, XE;
   input A1, A2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   
   xor (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (XD, A1_org, A2_org);
         not  #1 (XE, int_res_0);
   `else
         nand (XD, A1_org, A2_org);
         not  (XE, int_res_0);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> XD)=(0, 0);
(A2 -=> XD)=(0, 0);
if (~(A2)) (A1 -=> XE)=(0, 0);
if (A2) (A1 +=> XE)=(0, 0);
if (~(A1)) (A2 -=> XE)=(0, 0);
if (A1) (A2 +=> XE)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_ND2EN2_L50_1

//%BEGIN SEH_ND2EN2_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ND2EN2_L50_2 (XD, XE, A1, A2, VDD, VSS, VBP, VBN);
   output XD, XE;
   input A1, A2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2EN2_L50_2 (XD, XE, A1, A2, VDD, VSS);
   output XD, XE;
   input A1, A2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   
   xor (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (XD, A1_org, A2_org);
         not  #1 (XE, int_res_0);
   `else
         nand (XD, A1_org, A2_org);
         not  (XE, int_res_0);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> XD)=(0, 0);
(A2 -=> XD)=(0, 0);
if (~(A2)) (A1 -=> XE)=(0, 0);
if (A2) (A1 +=> XE)=(0, 0);
if (~(A1)) (A2 -=> XE)=(0, 0);
if (A1) (A2 +=> XE)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_ND2EN2_L50_2

//%BEGIN SEH_ND2NR2_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_ND2NR2_L50_0P5 (XD, XR, A1, A2, VDD, VSS, VBP, VBN);
   output XD, XR;
   input A1, A2, VDD, VSS, VBP, VBN;




   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2NR2_L50_0P5 (XD, XR, A1, A2, VDD, VSS);
   output XD, XR;
   input A1, A2, VDD, VSS;




   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (XD, A1_org, A2_org);
         nor #1 (XR, A1_org, A2_org);
   `else
         nand (XD, A1_org, A2_org);
         nor  (XR, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly
   

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////



   `else


specify
(A1 -=> XD)=(0, 0);
(A2 -=> XD)=(0, 0);
(A1 -=> XR)=(0, 0);
(A2 -=> XR)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_ND2NR2_L50_0P5

//%BEGIN SEH_ND2NR2_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ND2NR2_L50_1 (XD, XR, A1, A2, VDD, VSS, VBP, VBN);
   output XD, XR;
   input A1, A2, VDD, VSS, VBP, VBN;




   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2NR2_L50_1 (XD, XR, A1, A2, VDD, VSS);
   output XD, XR;
   input A1, A2, VDD, VSS;




   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (XD, A1_org, A2_org);
         nor #1 (XR, A1_org, A2_org);
   `else
         nand (XD, A1_org, A2_org);
         nor  (XR, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly
   

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////



   `else


specify
(A1 -=> XD)=(0, 0);
(A2 -=> XD)=(0, 0);
(A1 -=> XR)=(0, 0);
(A2 -=> XR)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_ND2NR2_L50_1

//%BEGIN SEH_ND2NR2_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ND2NR2_L50_2 (XD, XR, A1, A2, VDD, VSS, VBP, VBN);
   output XD, XR;
   input A1, A2, VDD, VSS, VBP, VBN;




   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2NR2_L50_2 (XD, XR, A1, A2, VDD, VSS);
   output XD, XR;
   input A1, A2, VDD, VSS;




   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (XD, A1_org, A2_org);
         nor #1 (XR, A1_org, A2_org);
   `else
         nand (XD, A1_org, A2_org);
         nor  (XR, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly
   

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////



   `else


specify
(A1 -=> XD)=(0, 0);
(A2 -=> XD)=(0, 0);
(A1 -=> XR)=(0, 0);
(A2 -=> XR)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_ND2NR2_L50_2

//%BEGIN SEH_ND2NR2EN2_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_ND2NR2EN2_L50_0P5 (XD, XE, XR, A1, A2, VDD, VSS, VBP, VBN);
   output XD, XE, XR;
   input A1, A2, VDD, VSS, VBP, VBN;
   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2NR2EN2_L50_0P5 (XD, XE, XR, A1, A2, VDD, VSS);
   output XD, XE, XR;
   input A1, A2, VDD, VSS;
   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   xor (int_res_0, A1_org, A2_org);


   `ifdef VIRL_functiononly
         nand #1 (XD, A1_org, A2_org);
         not  #1 (XE, int_res_0);
         nor #1 (XR, A1_org, A2_org);
   `else
         nand (XD, A1_org, A2_org);
         not  (XE, int_res_0);
         nor  (XR, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly
   

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////



   `else


specify
(A1 -=> XD)=(0, 0);
(A2 -=> XD)=(0, 0);
if (~(A2)) (A1 -=> XE)=(0, 0);
if (A2) (A1 +=> XE)=(0, 0);
if (~(A1)) (A2 -=> XE)=(0, 0);
if (A1) (A2 +=> XE)=(0, 0);
(A1 -=> XR)=(0, 0);
(A2 -=> XR)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_ND2NR2EN2_L50_0P5

//%BEGIN SEH_ND2NR2EN2_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ND2NR2EN2_L50_1 (XD, XE, XR, A1, A2, VDD, VSS, VBP, VBN);
   output XD, XE, XR;
   input A1, A2, VDD, VSS, VBP, VBN;
   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2NR2EN2_L50_1 (XD, XE, XR, A1, A2, VDD, VSS);
   output XD, XE, XR;
   input A1, A2, VDD, VSS;
   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   xor (int_res_0, A1_org, A2_org);


   `ifdef VIRL_functiononly
         nand #1 (XD, A1_org, A2_org);
         not  #1 (XE, int_res_0);
         nor #1 (XR, A1_org, A2_org);
   `else
         nand (XD, A1_org, A2_org);
         not  (XE, int_res_0);
         nor  (XR, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly
   

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////



   `else


specify
(A1 -=> XD)=(0, 0);
(A2 -=> XD)=(0, 0);
if (~(A2)) (A1 -=> XE)=(0, 0);
if (A2) (A1 +=> XE)=(0, 0);
if (~(A1)) (A2 -=> XE)=(0, 0);
if (A1) (A2 +=> XE)=(0, 0);
(A1 -=> XR)=(0, 0);
(A2 -=> XR)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_ND2NR2EN2_L50_1

//%BEGIN SEH_ND2NR2EN2_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ND2NR2EN2_L50_2 (XD, XE, XR, A1, A2, VDD, VSS, VBP, VBN);
   output XD, XE, XR;
   input A1, A2, VDD, VSS, VBP, VBN;
   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND2NR2EN2_L50_2 (XD, XE, XR, A1, A2, VDD, VSS);
   output XD, XE, XR;
   input A1, A2, VDD, VSS;
   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   xor (int_res_0, A1_org, A2_org);


   `ifdef VIRL_functiononly
         nand #1 (XD, A1_org, A2_org);
         not  #1 (XE, int_res_0);
         nor #1 (XR, A1_org, A2_org);
   `else
         nand (XD, A1_org, A2_org);
         not  (XE, int_res_0);
         nor  (XR, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly
   

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////



   `else


specify
(A1 -=> XD)=(0, 0);
(A2 -=> XD)=(0, 0);
if (~(A2)) (A1 -=> XE)=(0, 0);
if (A2) (A1 +=> XE)=(0, 0);
if (~(A1)) (A2 -=> XE)=(0, 0);
if (A1) (A2 +=> XE)=(0, 0);
(A1 -=> XR)=(0, 0);
(A2 -=> XR)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_ND2NR2EN2_L50_2

//%BEGIN SEH_ND3_SL50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_ND3_SL50_0P5 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3_SL50_0P5 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org, A3_org);
   `else
        nand (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND3_SL50_0P5

//%BEGIN SEH_ND3_SL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ND3_SL50_1 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3_SL50_1 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org, A3_org);
   `else
        nand (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND3_SL50_1

//%BEGIN SEH_ND3_SL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ND3_SL50_2 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3_SL50_2 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org, A3_org);
   `else
        nand (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND3_SL50_2

//%BEGIN SEH_ND3_SL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_ND3_SL50_4 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3_SL50_4 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org, A3_org);
   `else
        nand (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND3_SL50_4

//%BEGIN SEH_ND3_SL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_ND3_SL50_8 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3_SL50_8 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org, A3_org);
   `else
        nand (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND3_SL50_8

//%BEGIN SEH_ND3_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ND3_L50_1 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3_L50_1 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org, A3_org);
   `else
        nand (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND3_L50_1

//%BEGIN SEH_ND3_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ND3_L50_2 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3_L50_2 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org, A3_org);
   `else
        nand (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND3_L50_2

//%BEGIN SEH_ND3_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_ND3_L50_4 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3_L50_4 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org, A3_org);
   `else
        nand (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND3_L50_4

//%BEGIN SEH_ND3_TL50_0P65

`celldefine
`ifdef BIAS_PINS
module SEH_ND3_TL50_0P65 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3_TL50_0P65 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org, A3_org);
   `else
        nand (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND3_TL50_0P65

//%BEGIN SEH_ND3_TL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ND3_TL50_1 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3_TL50_1 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org, A3_org);
   `else
        nand (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND3_TL50_1

//%BEGIN SEH_ND3_TL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ND3_TL50_2 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3_TL50_2 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org, A3_org);
   `else
        nand (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND3_TL50_2

//%BEGIN SEH_ND3_TL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_ND3_TL50_4 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3_TL50_4 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org, A3_org);
   `else
        nand (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND3_TL50_4

//%BEGIN SEH_ND3_TL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_ND3_TL50_8 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3_TL50_8 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, A1_org, A2_org, A3_org);
   `else
        nand (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND3_TL50_8

//%BEGIN SEH_ND3B_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_ND3B_L50_0P5 (X, A, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3B_L50_0P5 (X, A, B1, B2, VDD, VSS);
   output X;
   input A, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
          nand #1 (X, int_res_0, B1_org, B2_org);

    `else
          nand (X, int_res_0, B1_org, B2_org);

    `endif

    `ifdef VIRL_functiononly

    `else


specify
(A +=> X)=(0, 0);
(B1 -=> X)=(0, 0);
(B2 -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_ND3B_L50_0P5

//%BEGIN SEH_ND3B_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ND3B_L50_1 (X, A, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3B_L50_1 (X, A, B1, B2, VDD, VSS);
   output X;
   input A, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
          nand #1 (X, int_res_0, B1_org, B2_org);

    `else
          nand (X, int_res_0, B1_org, B2_org);

    `endif

    `ifdef VIRL_functiononly

    `else


specify
(A +=> X)=(0, 0);
(B1 -=> X)=(0, 0);
(B2 -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_ND3B_L50_1

//%BEGIN SEH_ND3B_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ND3B_L50_2 (X, A, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3B_L50_2 (X, A, B1, B2, VDD, VSS);
   output X;
   input A, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
          nand #1 (X, int_res_0, B1_org, B2_org);

    `else
          nand (X, int_res_0, B1_org, B2_org);

    `endif

    `ifdef VIRL_functiononly

    `else


specify
(A +=> X)=(0, 0);
(B1 -=> X)=(0, 0);
(B2 -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_ND3B_L50_2

//%BEGIN SEH_ND3B_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_ND3B_L50_4 (X, A, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3B_L50_4 (X, A, B1, B2, VDD, VSS);
   output X;
   input A, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
          nand #1 (X, int_res_0, B1_org, B2_org);

    `else
          nand (X, int_res_0, B1_org, B2_org);

    `endif

    `ifdef VIRL_functiononly

    `else


specify
(A +=> X)=(0, 0);
(B1 -=> X)=(0, 0);
(B2 -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_ND3B_L50_4

//%BEGIN SEH_ND3B_V1DGL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ND3B_V1DGL50_1 (X, A, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3B_V1DGL50_1 (X, A, B1, B2, VDD, VSS);
   output X;
   input A, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
          nand #1 (X, int_res_0, B1_org, B2_org);

    `else
          nand (X, int_res_0, B1_org, B2_org);

    `endif

    `ifdef VIRL_functiononly

    `else


specify
(A +=> X)=(0, 0);
(B1 -=> X)=(0, 0);
(B2 -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_ND3B_V1DGL50_1

//%BEGIN SEH_ND3B_V1DGL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ND3B_V1DGL50_2 (X, A, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3B_V1DGL50_2 (X, A, B1, B2, VDD, VSS);
   output X;
   input A, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
          nand #1 (X, int_res_0, B1_org, B2_org);

    `else
          nand (X, int_res_0, B1_org, B2_org);

    `endif

    `ifdef VIRL_functiononly

    `else


specify
(A +=> X)=(0, 0);
(B1 -=> X)=(0, 0);
(B2 -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_ND3B_V1DGL50_2

//%BEGIN SEH_ND3B_V1DGL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_ND3B_V1DGL50_4 (X, A, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3B_V1DGL50_4 (X, A, B1, B2, VDD, VSS);
   output X;
   input A, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
          nand #1 (X, int_res_0, B1_org, B2_org);

    `else
          nand (X, int_res_0, B1_org, B2_org);

    `endif

    `ifdef VIRL_functiononly

    `else


specify
(A +=> X)=(0, 0);
(B1 -=> X)=(0, 0);
(B2 -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_ND3B_V1DGL50_4

//%BEGIN SEH_ND3B_DGL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ND3B_DGL50_1 (X, A, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3B_DGL50_1 (X, A, B1, B2, VDD, VSS);
   output X;
   input A, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
          nand #1 (X, int_res_0, B1_org, B2_org);

    `else
          nand (X, int_res_0, B1_org, B2_org);

    `endif

    `ifdef VIRL_functiononly

    `else


specify
(A +=> X)=(0, 0);
(B1 -=> X)=(0, 0);
(B2 -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_ND3B_DGL50_1

//%BEGIN SEH_ND3B_DGL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ND3B_DGL50_2 (X, A, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND3B_DGL50_2 (X, A, B1, B2, VDD, VSS);
   output X;
   input A, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

    `ifdef VIRL_functiononly
          nand #1 (X, int_res_0, B1_org, B2_org);

    `else
          nand (X, int_res_0, B1_org, B2_org);

    `endif

    `ifdef VIRL_functiononly

    `else


specify
(A +=> X)=(0, 0);
(B1 -=> X)=(0, 0);
(B2 -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_ND3B_DGL50_2

//%BEGIN SEH_ND4_SL50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_ND4_SL50_0P5 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND4_SL50_0P5 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       nand #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
       nand (X, A1_org, A2_org, A3_org, A4_org);

    `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
(A4 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND4_SL50_0P5

//%BEGIN SEH_ND4_SL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ND4_SL50_1 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND4_SL50_1 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       nand #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
       nand (X, A1_org, A2_org, A3_org, A4_org);

    `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
(A4 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND4_SL50_1

//%BEGIN SEH_ND4_SL50_1P5

`celldefine
`ifdef BIAS_PINS
module SEH_ND4_SL50_1P5 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND4_SL50_1P5 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       nand #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
       nand (X, A1_org, A2_org, A3_org, A4_org);

    `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
(A4 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND4_SL50_1P5

//%BEGIN SEH_ND4_SL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ND4_SL50_2 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND4_SL50_2 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       nand #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
       nand (X, A1_org, A2_org, A3_org, A4_org);

    `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
(A4 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND4_SL50_2

//%BEGIN SEH_ND4_SL50_3

`celldefine
`ifdef BIAS_PINS
module SEH_ND4_SL50_3 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND4_SL50_3 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       nand #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
       nand (X, A1_org, A2_org, A3_org, A4_org);

    `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
(A4 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND4_SL50_3

//%BEGIN SEH_ND4_SL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_ND4_SL50_4 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND4_SL50_4 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       nand #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
       nand (X, A1_org, A2_org, A3_org, A4_org);

    `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
(A4 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND4_SL50_4

//%BEGIN SEH_ND4_SL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_ND4_SL50_8 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND4_SL50_8 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       nand #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
       nand (X, A1_org, A2_org, A3_org, A4_org);

    `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
(A4 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND4_SL50_8

//%BEGIN SEH_ND4_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ND4_L50_1 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND4_L50_1 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       nand #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
       nand (X, A1_org, A2_org, A3_org, A4_org);

    `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
(A4 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND4_L50_1

//%BEGIN SEH_ND4_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ND4_L50_2 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND4_L50_2 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       nand #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
       nand (X, A1_org, A2_org, A3_org, A4_org);

    `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
(A4 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND4_L50_2

//%BEGIN SEH_ND4_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_ND4_L50_4 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND4_L50_4 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       nand #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
       nand (X, A1_org, A2_org, A3_org, A4_org);

    `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
(A4 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND4_L50_4

//%BEGIN SEH_ND4B_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_ND4B_L50_1 (X, A, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND4B_L50_1 (X, A, B1, B2, B3, VDD, VSS);
   output X;
   input A, B1, B2, B3, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (X, int_res_0, B1_org, B2_org, B3_org);
   `else
         nand (X, int_res_0, B1_org, B2_org, B3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
(B1 -=> X)=(0, 0);
(B2 -=> X)=(0, 0);
(B3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND4B_L50_1

//%BEGIN SEH_ND4B_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_ND4B_L50_2 (X, A, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND4B_L50_2 (X, A, B1, B2, B3, VDD, VSS);
   output X;
   input A, B1, B2, B3, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (X, int_res_0, B1_org, B2_org, B3_org);
   `else
         nand (X, int_res_0, B1_org, B2_org, B3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
(B1 -=> X)=(0, 0);
(B2 -=> X)=(0, 0);
(B3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND4B_L50_2

//%BEGIN SEH_ND4B_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_ND4B_L50_4 (X, A, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_ND4B_L50_4 (X, A, B1, B2, B3, VDD, VSS);
   output X;
   input A, B1, B2, B3, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (X, int_res_0, B1_org, B2_org, B3_org);
   `else
         nand (X, int_res_0, B1_org, B2_org, B3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
(B1 -=> X)=(0, 0);
(B2 -=> X)=(0, 0);
(B3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_ND4B_L50_4

//%BEGIN SEH_NR2_SL50_16

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_SL50_16 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_SL50_16 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_SL50_16

//%BEGIN SEH_NR2_SL50_6

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_SL50_6 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_SL50_6 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_SL50_6

//%BEGIN SEH_NR2_SL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_SL50_8 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_SL50_8 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_SL50_8

//%BEGIN SEH_NR2_GL50_12

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_GL50_12 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_GL50_12 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_GL50_12

//%BEGIN SEH_NR2_GL50_6

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_GL50_6 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_GL50_6 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_GL50_6

//%BEGIN SEH_NR2_GL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_GL50_8 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_GL50_8 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_GL50_8

//%BEGIN SEH_NR2_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_L50_0P5 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_L50_0P5 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_L50_0P5

//%BEGIN SEH_NR2_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_L50_1 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_L50_1 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_L50_1

//%BEGIN SEH_NR2_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_L50_2 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_L50_2 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_L50_2

//%BEGIN SEH_NR2_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_L50_4 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_L50_4 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_L50_4

//%BEGIN SEH_NR2_SL50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_SL50_0P5 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_SL50_0P5 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_SL50_0P5

//%BEGIN SEH_NR2_SL50_0P65

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_SL50_0P65 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_SL50_0P65 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_SL50_0P65

//%BEGIN SEH_NR2_SL50_0P8

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_SL50_0P8 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_SL50_0P8 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_SL50_0P8

//%BEGIN SEH_NR2_SL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_SL50_1 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_SL50_1 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_SL50_1

//%BEGIN SEH_NR2_SL50_1P5

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_SL50_1P5 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_SL50_1P5 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_SL50_1P5

//%BEGIN SEH_NR2_SL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_SL50_2 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_SL50_2 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_SL50_2

//%BEGIN SEH_NR2_SL50_3

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_SL50_3 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_SL50_3 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_SL50_3

//%BEGIN SEH_NR2_SL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_SL50_4 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_SL50_4 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_SL50_4

//%BEGIN SEH_NR2_TL50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_TL50_0P5 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_TL50_0P5 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_TL50_0P5

//%BEGIN SEH_NR2_TL50_0P8

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_TL50_0P8 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_TL50_0P8 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_TL50_0P8

//%BEGIN SEH_NR2_TL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_TL50_1 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_TL50_1 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_TL50_1

//%BEGIN SEH_NR2_TL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_TL50_2 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_TL50_2 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_TL50_2

//%BEGIN SEH_NR2_TL50_3

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_TL50_3 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_TL50_3 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_TL50_3

//%BEGIN SEH_NR2_TL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_TL50_4 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_TL50_4 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_TL50_4

//%BEGIN SEH_NR2_TL50_6

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_TL50_6 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_TL50_6 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_TL50_6

//%BEGIN SEH_NR2_TL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_TL50_8 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_TL50_8 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_TL50_8

//%BEGIN SEH_NR2_GL50_0P8

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_GL50_0P8 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_GL50_0P8 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_GL50_0P8

//%BEGIN SEH_NR2_GL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_GL50_1 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_GL50_1 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_GL50_1

//%BEGIN SEH_NR2_GL50_1P5

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_GL50_1P5 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_GL50_1P5 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_GL50_1P5

//%BEGIN SEH_NR2_GL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_GL50_2 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_GL50_2 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_GL50_2

//%BEGIN SEH_NR2_GL50_3

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_GL50_3 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_GL50_3 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_GL50_3

//%BEGIN SEH_NR2_GL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_GL50_4 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_GL50_4 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_GL50_4

//%BEGIN SEH_NR2_GL50_5

`celldefine
`ifdef BIAS_PINS
module SEH_NR2_GL50_5 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2_GL50_5 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org);
   `else
        nor (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR2_GL50_5

//%BEGIN SEH_NR2B_L50_8

`celldefine
`ifdef BIAS_PINS
module SEH_NR2B_L50_8 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2B_L50_8 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, B_org);

   `else
        nor (X, int_res_0, B_org);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_NR2B_L50_8

//%BEGIN SEH_NR2B_V1DGL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_NR2B_V1DGL50_1 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2B_V1DGL50_1 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, B_org);

   `else
        nor (X, int_res_0, B_org);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_NR2B_V1DGL50_1

//%BEGIN SEH_NR2B_V1DGL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_NR2B_V1DGL50_2 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2B_V1DGL50_2 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, B_org);

   `else
        nor (X, int_res_0, B_org);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_NR2B_V1DGL50_2

//%BEGIN SEH_NR2B_V1DGL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_NR2B_V1DGL50_4 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2B_V1DGL50_4 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, B_org);

   `else
        nor (X, int_res_0, B_org);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_NR2B_V1DGL50_4

//%BEGIN SEH_NR2B_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_NR2B_L50_1 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2B_L50_1 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, B_org);

   `else
        nor (X, int_res_0, B_org);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_NR2B_L50_1

//%BEGIN SEH_NR2B_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_NR2B_L50_2 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2B_L50_2 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, B_org);

   `else
        nor (X, int_res_0, B_org);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_NR2B_L50_2

//%BEGIN SEH_NR2B_L50_3

`celldefine
`ifdef BIAS_PINS
module SEH_NR2B_L50_3 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2B_L50_3 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, B_org);

   `else
        nor (X, int_res_0, B_org);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_NR2B_L50_3

//%BEGIN SEH_NR2B_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_NR2B_L50_4 (X, A, B, VDD, VSS, VBP, VBN);
   output X;
   input A, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR2B_L50_4 (X, A, B, VDD, VSS);
   output X;
   input A, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, B_org);

   `else
        nor (X, int_res_0, B_org);
    `endif

    `ifdef VIRL_functiononly

    `else


specify
(A +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_NR2B_L50_4

//%BEGIN SEH_NR3_GL50_16

`celldefine
`ifdef BIAS_PINS
module SEH_NR3_GL50_16 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR3_GL50_16 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org, A3_org);
   `else
        nor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR3_GL50_16

//%BEGIN SEH_NR3_GL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_NR3_GL50_8 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR3_GL50_8 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org, A3_org);
   `else
        nor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR3_GL50_8

//%BEGIN SEH_NR3_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_NR3_L50_1 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR3_L50_1 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org, A3_org);
   `else
        nor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR3_L50_1

//%BEGIN SEH_NR3_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_NR3_L50_2 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR3_L50_2 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org, A3_org);
   `else
        nor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR3_L50_2

//%BEGIN SEH_NR3_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_NR3_L50_4 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR3_L50_4 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org, A3_org);
   `else
        nor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR3_L50_4

//%BEGIN SEH_NR3_TL50_0P65

`celldefine
`ifdef BIAS_PINS
module SEH_NR3_TL50_0P65 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR3_TL50_0P65 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org, A3_org);
   `else
        nor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR3_TL50_0P65

//%BEGIN SEH_NR3_TL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_NR3_TL50_1 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR3_TL50_1 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org, A3_org);
   `else
        nor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR3_TL50_1

//%BEGIN SEH_NR3_TL50_1P5

`celldefine
`ifdef BIAS_PINS
module SEH_NR3_TL50_1P5 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR3_TL50_1P5 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org, A3_org);
   `else
        nor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR3_TL50_1P5

//%BEGIN SEH_NR3_TL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_NR3_TL50_2 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR3_TL50_2 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org, A3_org);
   `else
        nor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR3_TL50_2

//%BEGIN SEH_NR3_TL50_3

`celldefine
`ifdef BIAS_PINS
module SEH_NR3_TL50_3 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR3_TL50_3 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org, A3_org);
   `else
        nor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR3_TL50_3

//%BEGIN SEH_NR3_TL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_NR3_TL50_4 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR3_TL50_4 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org, A3_org);
   `else
        nor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR3_TL50_4

//%BEGIN SEH_NR3_TL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_NR3_TL50_8 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR3_TL50_8 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org, A3_org);
   `else
        nor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR3_TL50_8

//%BEGIN SEH_NR3_GL50_0P8

`celldefine
`ifdef BIAS_PINS
module SEH_NR3_GL50_0P8 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR3_GL50_0P8 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org, A3_org);
   `else
        nor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR3_GL50_0P8

//%BEGIN SEH_NR3_GL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_NR3_GL50_1 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR3_GL50_1 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org, A3_org);
   `else
        nor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR3_GL50_1

//%BEGIN SEH_NR3_GL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_NR3_GL50_2 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR3_GL50_2 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org, A3_org);
   `else
        nor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR3_GL50_2

//%BEGIN SEH_NR3_GL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_NR3_GL50_4 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR3_GL50_4 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, A1_org, A2_org, A3_org);
   `else
        nor (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR3_GL50_4

//%BEGIN SEH_NR3B_DGL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_NR3B_DGL50_1 (X, A, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR3B_DGL50_1 (X, A, B1, B2, VDD, VSS);
   output X;
   input A, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, B1_org, B2_org);
   `else
        nor (X, int_res_0, B1_org, B2_org);
   `endif

   `ifdef VIRL_functiononly

    `else


specify
(A +=> X)=(0, 0);
(B1 -=> X)=(0, 0);
(B2 -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_NR3B_DGL50_1

//%BEGIN SEH_NR3B_DGL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_NR3B_DGL50_2 (X, A, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR3B_DGL50_2 (X, A, B1, B2, VDD, VSS);
   output X;
   input A, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, B1_org, B2_org);
   `else
        nor (X, int_res_0, B1_org, B2_org);
   `endif

   `ifdef VIRL_functiononly

    `else


specify
(A +=> X)=(0, 0);
(B1 -=> X)=(0, 0);
(B2 -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_NR3B_DGL50_2

//%BEGIN SEH_NR3B_DGL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_NR3B_DGL50_4 (X, A, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR3B_DGL50_4 (X, A, B1, B2, VDD, VSS);
   output X;
   input A, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, B1_org, B2_org);
   `else
        nor (X, int_res_0, B1_org, B2_org);
   `endif

   `ifdef VIRL_functiononly

    `else


specify
(A +=> X)=(0, 0);
(B1 -=> X)=(0, 0);
(B2 -=> X)=(0, 0);
endspecify
    `endif

endmodule
`endcelldefine

//%END SEH_NR3B_DGL50_4

//%BEGIN SEH_NR4_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_NR4_L50_0P5 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR4_L50_0P5 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nor #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
         nor (X, A1_org, A2_org, A3_org, A4_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
(A4 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR4_L50_0P5

//%BEGIN SEH_NR4_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_NR4_L50_1 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR4_L50_1 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nor #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
         nor (X, A1_org, A2_org, A3_org, A4_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
(A4 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR4_L50_1

//%BEGIN SEH_NR4_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_NR4_L50_2 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR4_L50_2 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nor #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
         nor (X, A1_org, A2_org, A3_org, A4_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
(A4 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR4_L50_2

//%BEGIN SEH_NR4_L50_3

`celldefine
`ifdef BIAS_PINS
module SEH_NR4_L50_3 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR4_L50_3 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nor #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
         nor (X, A1_org, A2_org, A3_org, A4_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
(A4 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR4_L50_3

//%BEGIN SEH_NR4_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_NR4_L50_4 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR4_L50_4 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nor #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
         nor (X, A1_org, A2_org, A3_org, A4_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
(A4 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR4_L50_4

//%BEGIN SEH_NR4B_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_NR4B_L50_1 (X, A, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR4B_L50_1 (X, A, B1, B2, B3, VDD, VSS);
   output X;
   input A, B1, B2, B3, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, B1_org, B2_org, B3_org);
   `else
        nor (X, int_res_0, B1_org, B2_org, B3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
(B1 -=> X)=(0, 0);
(B2 -=> X)=(0, 0);
(B3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR4B_L50_1

//%BEGIN SEH_NR4B_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_NR4B_L50_2 (X, A, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR4B_L50_2 (X, A, B1, B2, B3, VDD, VSS);
   output X;
   input A, B1, B2, B3, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, B1_org, B2_org, B3_org);
   `else
        nor (X, int_res_0, B1_org, B2_org, B3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
(B1 -=> X)=(0, 0);
(B2 -=> X)=(0, 0);
(B3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR4B_L50_2

//%BEGIN SEH_NR4B_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_NR4B_L50_4 (X, A, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_NR4B_L50_4 (X, A, B1, B2, B3, VDD, VSS);
   output X;
   input A, B1, B2, B3, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nor #1 (X, int_res_0, B1_org, B2_org, B3_org);
   `else
        nor (X, int_res_0, B1_org, B2_org, B3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A +=> X)=(0, 0);
(B1 -=> X)=(0, 0);
(B2 -=> X)=(0, 0);
(B3 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_NR4B_L50_4

//%BEGIN SEH_OA21_V2L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OA21_V2L50_1 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA21_V2L50_1 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_0, B_org);
   `else
        and (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
if ((~(A1) & A2)) (B +=> X)=(0, 0);
if ((A1 & ~(A2))) (B +=> X)=(0, 0);
if ((A1 & A2)) (B +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA21_V2L50_1

//%BEGIN SEH_OA21_V2L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OA21_V2L50_2 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA21_V2L50_2 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_0, B_org);
   `else
        and (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
if ((~(A1) & A2)) (B +=> X)=(0, 0);
if ((A1 & ~(A2))) (B +=> X)=(0, 0);
if ((A1 & A2)) (B +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA21_V2L50_2

//%BEGIN SEH_OA21_V2L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OA21_V2L50_4 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA21_V2L50_4 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_0, B_org);
   `else
        and (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
if ((~(A1) & A2)) (B +=> X)=(0, 0);
if ((A1 & ~(A2))) (B +=> X)=(0, 0);
if ((A1 & A2)) (B +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA21_V2L50_4

//%BEGIN SEH_OA21_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OA21_L50_1 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA21_L50_1 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_0, B_org);
   `else
        and (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
if ((~(A1) & A2)) (B +=> X)=(0, 0);
if ((A1 & ~(A2))) (B +=> X)=(0, 0);
if ((A1 & A2)) (B +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA21_L50_1

//%BEGIN SEH_OA21_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OA21_L50_2 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA21_L50_2 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_0, B_org);
   `else
        and (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
if ((~(A1) & A2)) (B +=> X)=(0, 0);
if ((A1 & ~(A2))) (B +=> X)=(0, 0);
if ((A1 & A2)) (B +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA21_L50_2

//%BEGIN SEH_OA21B_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_OA21B_L50_0P5 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA21B_L50_0P5 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   not (int_res_1, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       and #1 (X, int_res_0, int_res_1);
   `else
       and (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA21B_L50_0P5

//%BEGIN SEH_OA21B_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OA21B_L50_1 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA21B_L50_1 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   not (int_res_1, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       and #1 (X, int_res_0, int_res_1);
   `else
       and (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA21B_L50_1

//%BEGIN SEH_OA21B_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OA21B_L50_2 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA21B_L50_2 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   not (int_res_1, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       and #1 (X, int_res_0, int_res_1);
   `else
       and (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA21B_L50_2

//%BEGIN SEH_OA21B_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OA21B_L50_4 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA21B_L50_4 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   not (int_res_1, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       and #1 (X, int_res_0, int_res_1);
   `else
       and (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA21B_L50_4

//%BEGIN SEH_OA21B_L50_8

`celldefine
`ifdef BIAS_PINS
module SEH_OA21B_L50_8 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA21B_L50_8 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   not (int_res_1, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       and #1 (X, int_res_0, int_res_1);
   `else
       and (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA21B_L50_8

//%BEGIN SEH_OA22_DGL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OA22_DGL50_1 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA22_DGL50_1 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_0, int_res_1);
   `else
        and (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2)) (A2 +=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2))) (A2 +=> X)=(0, 0);
if ((~(A1) & B1 & B2)) (A2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & A2 & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & A2 & ~(B2))) (B1 +=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2)) (A1 +=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2))) (A1 +=> X)=(0, 0);
if ((~(A2) & B1 & B2)) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA22_DGL50_1

//%BEGIN SEH_OA22_DGL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OA22_DGL50_2 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA22_DGL50_2 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_0, int_res_1);
   `else
        and (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2)) (A2 +=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2))) (A2 +=> X)=(0, 0);
if ((~(A1) & B1 & B2)) (A2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & A2 & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & A2 & ~(B2))) (B1 +=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2)) (A1 +=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2))) (A1 +=> X)=(0, 0);
if ((~(A2) & B1 & B2)) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA22_DGL50_2

//%BEGIN SEH_OA22_DGL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OA22_DGL50_4 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA22_DGL50_4 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_0, int_res_1);
   `else
        and (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2)) (A2 +=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2))) (A2 +=> X)=(0, 0);
if ((~(A1) & B1 & B2)) (A2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & A2 & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & A2 & ~(B2))) (B1 +=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2)) (A1 +=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2))) (A1 +=> X)=(0, 0);
if ((~(A2) & B1 & B2)) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA22_DGL50_4

//%BEGIN SEH_OA22_DGL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_OA22_DGL50_8 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA22_DGL50_8 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_0, int_res_1);
   `else
        and (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2)) (A2 +=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2))) (A2 +=> X)=(0, 0);
if ((~(A1) & B1 & B2)) (A2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & A2 & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & A2 & ~(B2))) (B1 +=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2)) (A1 +=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2))) (A1 +=> X)=(0, 0);
if ((~(A2) & B1 & B2)) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA22_DGL50_8

//%BEGIN SEH_OA22_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OA22_L50_1 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA22_L50_1 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_0, int_res_1);
   `else
        and (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2)) (A2 +=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2))) (A2 +=> X)=(0, 0);
if ((~(A1) & B1 & B2)) (A2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & A2 & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & A2 & ~(B2))) (B1 +=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2)) (A1 +=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2))) (A1 +=> X)=(0, 0);
if ((~(A2) & B1 & B2)) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA22_L50_1

//%BEGIN SEH_OA22_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OA22_L50_2 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA22_L50_2 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_0, int_res_1);
   `else
        and (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2)) (A2 +=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2))) (A2 +=> X)=(0, 0);
if ((~(A1) & B1 & B2)) (A2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & A2 & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & A2 & ~(B2))) (B1 +=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2)) (A1 +=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2))) (A1 +=> X)=(0, 0);
if ((~(A2) & B1 & B2)) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA22_L50_2

//%BEGIN SEH_OA2BB2_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_OA2BB2_L50_0P5 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA2BB2_L50_0P5 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A1_org);
   not (int_res_1, A2_org);
   or (int_res_2, int_res_0, int_res_1);
   or (int_res_3, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_2, int_res_3);
   `else
        and (X, int_res_2, int_res_3);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA2BB2_L50_0P5

//%BEGIN SEH_OA2BB2_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OA2BB2_L50_1 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA2BB2_L50_1 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A1_org);
   not (int_res_1, A2_org);
   or (int_res_2, int_res_0, int_res_1);
   or (int_res_3, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_2, int_res_3);
   `else
        and (X, int_res_2, int_res_3);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA2BB2_L50_1

//%BEGIN SEH_OA2BB2_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OA2BB2_L50_2 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA2BB2_L50_2 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A1_org);
   not (int_res_1, A2_org);
   or (int_res_2, int_res_0, int_res_1);
   or (int_res_3, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_2, int_res_3);
   `else
        and (X, int_res_2, int_res_3);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA2BB2_L50_2

//%BEGIN SEH_OA2BB2_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OA2BB2_L50_4 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA2BB2_L50_4 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A1_org);
   not (int_res_1, A2_org);
   or (int_res_2, int_res_0, int_res_1);
   or (int_res_3, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_2, int_res_3);
   `else
        and (X, int_res_2, int_res_3);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA2BB2_L50_4

//%BEGIN SEH_OA2BB2_L50_8

`celldefine
`ifdef BIAS_PINS
module SEH_OA2BB2_L50_8 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA2BB2_L50_8 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2, 
      int_res_3;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A1_org);
   not (int_res_1, A2_org);
   or (int_res_2, int_res_0, int_res_1);
   or (int_res_3, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_2, int_res_3);
   `else
        and (X, int_res_2, int_res_3);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA2BB2_L50_8

//%BEGIN SEH_OA31_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OA31_L50_1 (X, A1, A2, A3, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA31_L50_1 (X, A1, A2, A3, B, VDD, VSS);
   output X;
   input A1, A2, A3, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_0, B_org);
   `else
        and (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3)) (B +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3))) (B +=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (B +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (B +=> X)=(0, 0);
if ((A1 & A2 & ~(A3)) | (A1 & ~(A2) & A3)) (B +=> X)=(0, 0);
if ((A1 & A2 & A3)) (B +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA31_L50_1

//%BEGIN SEH_OA31_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OA31_L50_2 (X, A1, A2, A3, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA31_L50_2 (X, A1, A2, A3, B, VDD, VSS);
   output X;
   input A1, A2, A3, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_0, B_org);
   `else
        and (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3)) (B +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3))) (B +=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (B +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (B +=> X)=(0, 0);
if ((A1 & A2 & ~(A3)) | (A1 & ~(A2) & A3)) (B +=> X)=(0, 0);
if ((A1 & A2 & A3)) (B +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA31_L50_2

//%BEGIN SEH_OA31_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OA31_L50_4 (X, A1, A2, A3, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA31_L50_4 (X, A1, A2, A3, B, VDD, VSS);
   output X;
   input A1, A2, A3, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_0, B_org);
   `else
        and (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3)) (B +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3))) (B +=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (B +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (B +=> X)=(0, 0);
if ((A1 & A2 & ~(A3)) | (A1 & ~(A2) & A3)) (B +=> X)=(0, 0);
if ((A1 & A2 & A3)) (B +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA31_L50_4

//%BEGIN SEH_OA32_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OA32_L50_1 (X, A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA32_L50_1 (X, A1, A2, A3, B1, B2, VDD, VSS);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org, A3_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       and #1 (X, int_res_0, int_res_1);
   `else
       and (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2) & ~(B1) & B2)) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2))) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & B2)) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & A3 & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & ~(B1)) | (A1 & ~(A2) & A3 & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & A2 & A3 & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & ~(B2))) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & ~(B2))) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & A3 & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & ~(B2)) | (A1 & ~(A2) & A3 & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & A2 & A3 & ~(B2))) (B1 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & ~(B1) & B2)) (A2 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & B1 & ~(B2))) (A2 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & B1 & B2)) (A2 +=> X)=(0, 0);
if ((~(A2) & ~(A3) & ~(B1) & B2)) (A1 +=> X)=(0, 0);
if ((~(A2) & ~(A3) & B1 & ~(B2))) (A1 +=> X)=(0, 0);
if ((~(A2) & ~(A3) & B1 & B2)) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA32_L50_1

//%BEGIN SEH_OA32_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OA32_L50_2 (X, A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA32_L50_2 (X, A1, A2, A3, B1, B2, VDD, VSS);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org, A3_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       and #1 (X, int_res_0, int_res_1);
   `else
       and (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2) & ~(B1) & B2)) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2))) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & B2)) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & A3 & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & ~(B1)) | (A1 & ~(A2) & A3 & ~(B1))) (B2 +=> X)=(0, 0);
if ((A1 & A2 & A3 & ~(B1))) (B2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & ~(B2))) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & ~(B2))) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & A3 & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & ~(B2)) | (A1 & ~(A2) & A3 & ~(B2))) (B1 +=> X)=(0, 0);
if ((A1 & A2 & A3 & ~(B2))) (B1 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & ~(B1) & B2)) (A2 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & B1 & ~(B2))) (A2 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & B1 & B2)) (A2 +=> X)=(0, 0);
if ((~(A2) & ~(A3) & ~(B1) & B2)) (A1 +=> X)=(0, 0);
if ((~(A2) & ~(A3) & B1 & ~(B2))) (A1 +=> X)=(0, 0);
if ((~(A2) & ~(A3) & B1 & B2)) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA32_L50_2

//%BEGIN SEH_OA33_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OA33_L50_1 (X, A1, A2, A3, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA33_L50_1 (X, A1, A2, A3, B1, B2, B3, VDD, VSS);
   output X;
   input A1, A2, A3, B1, B2, B3, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or  (int_res_0, A1_org, A2_org, A3_org);
   or  (int_res_1, B1_org, B2_org, B3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_0, int_res_1);
   `else
        and (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2) & ~(B1) & ~(B2) & B3)) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1) & B2 & ~(B3))) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1) & B2 & B3)) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2) & ~(B3))) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2) & B3)) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & B2 & ~(B3))) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & B2 & B3)) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & ~(B1) & ~(B2))) (B3 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & ~(B1) & ~(B2))) (B3 +=> X)=(0, 0);
if ((~(A1) & A2 & A3 & ~(B1) & ~(B2))) (B3 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & ~(B1) & ~(B2))) (B3 +=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & ~(B1) & ~(B2)) | (A1 & ~(A2) & A3 & ~(B1) & ~(B2))) (B3 +=> X)=(0, 0);
if ((A1 & A2 & A3 & ~(B1) & ~(B2))) (B3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & ~(B1) & ~(B3))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & ~(B1) & ~(B3))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & A3 & ~(B1) & ~(B3))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & ~(B1) & ~(B3))) (B2 +=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & ~(B1) & ~(B3)) | (A1 & ~(A2) & A3 & ~(B1) & ~(B3))) (B2 +=> X)=(0, 0);
if ((A1 & A2 & A3 & ~(B1) & ~(B3))) (B2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & ~(B2) & ~(B3))) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & ~(B2) & ~(B3))) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & A3 & ~(B2) & ~(B3))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & ~(B2) & ~(B3))) (B1 +=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & ~(B2) & ~(B3)) | (A1 & ~(A2) & A3 & ~(B2) & ~(B3))) (B1 +=> X)=(0, 0);
if ((A1 & A2 & A3 & ~(B2) & ~(B3))) (B1 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & ~(B1) & ~(B2) & B3)) (A2 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & ~(B1) & B2 & ~(B3))) (A2 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & ~(B1) & B2 & B3)) (A2 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & B1 & ~(B2) & ~(B3))) (A2 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & B1 & ~(B2) & B3)) (A2 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & B1 & B2 & ~(B3))) (A2 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & B1 & B2 & B3)) (A2 +=> X)=(0, 0);
if ((~(A2) & ~(A3) & ~(B1) & ~(B2) & B3)) (A1 +=> X)=(0, 0);
if ((~(A2) & ~(A3) & ~(B1) & B2 & ~(B3))) (A1 +=> X)=(0, 0);
if ((~(A2) & ~(A3) & ~(B1) & B2 & B3)) (A1 +=> X)=(0, 0);
if ((~(A2) & ~(A3) & B1 & ~(B2) & ~(B3))) (A1 +=> X)=(0, 0);
if ((~(A2) & ~(A3) & B1 & ~(B2) & B3)) (A1 +=> X)=(0, 0);
if ((~(A2) & ~(A3) & B1 & B2 & ~(B3))) (A1 +=> X)=(0, 0);
if ((~(A2) & ~(A3) & B1 & B2 & B3)) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA33_L50_1

//%BEGIN SEH_OA33_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OA33_L50_2 (X, A1, A2, A3, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OA33_L50_2 (X, A1, A2, A3, B1, B2, B3, VDD, VSS);
   output X;
   input A1, A2, A3, B1, B2, B3, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or  (int_res_0, A1_org, A2_org, A3_org);
   or  (int_res_1, B1_org, B2_org, B3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        and #1 (X, int_res_0, int_res_1);
   `else
        and (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2) & ~(B1) & ~(B2) & B3)) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1) & B2 & ~(B3))) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B1) & B2 & B3)) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2) & ~(B3))) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & B2 & ~(B3)) | (~(A1) & ~(A2) & B1 & ~(B2) & B3)) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & B2 & B3)) (A3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & ~(B1) & ~(B2))) (B3 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & ~(B1) & ~(B2))) (B3 +=> X)=(0, 0);
if ((~(A1) & A2 & A3 & ~(B1) & ~(B2))) (B3 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & ~(B1) & ~(B2))) (B3 +=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & ~(B1) & ~(B2))) (B3 +=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & ~(B1) & ~(B2))) (B3 +=> X)=(0, 0);
if ((A1 & A2 & A3 & ~(B1) & ~(B2))) (B3 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & ~(B1) & ~(B3))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & ~(B1) & ~(B3))) (B2 +=> X)=(0, 0);
if ((~(A1) & A2 & A3 & ~(B1) & ~(B3))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & ~(B1) & ~(B3))) (B2 +=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & ~(B1) & ~(B3))) (B2 +=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & ~(B1) & ~(B3))) (B2 +=> X)=(0, 0);
if ((A1 & A2 & A3 & ~(B1) & ~(B3))) (B2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & ~(B2) & ~(B3))) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & ~(B2) & ~(B3))) (B1 +=> X)=(0, 0);
if ((~(A1) & A2 & A3 & ~(B2) & ~(B3))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & ~(B2) & ~(B3))) (B1 +=> X)=(0, 0);
if ((A1 & ~(A2) & A3 & ~(B2) & ~(B3))) (B1 +=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & ~(B2) & ~(B3))) (B1 +=> X)=(0, 0);
if ((A1 & A2 & A3 & ~(B2) & ~(B3))) (B1 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & ~(B1) & ~(B2) & B3)) (A2 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & ~(B1) & B2 & ~(B3))) (A2 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & ~(B1) & B2 & B3)) (A2 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & B1 & ~(B2) & ~(B3))) (A2 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & B1 & B2 & ~(B3)) | (~(A1) & ~(A3) & B1 & ~(B2) & B3)) (A2 +=> X)=(0, 0);
if ((~(A1) & ~(A3) & B1 & B2 & B3)) (A2 +=> X)=(0, 0);
if ((~(A2) & ~(A3) & ~(B1) & ~(B2) & B3)) (A1 +=> X)=(0, 0);
if ((~(A2) & ~(A3) & ~(B1) & B2 & ~(B3))) (A1 +=> X)=(0, 0);
if ((~(A2) & ~(A3) & ~(B1) & B2 & B3)) (A1 +=> X)=(0, 0);
if ((~(A2) & ~(A3) & B1 & ~(B2) & ~(B3))) (A1 +=> X)=(0, 0);
if ((~(A2) & ~(A3) & B1 & B2 & ~(B3)) | (~(A2) & ~(A3) & B1 & ~(B2) & B3)) (A1 +=> X)=(0, 0);
if ((~(A2) & ~(A3) & B1 & B2 & B3)) (A1 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OA33_L50_2

//%BEGIN SEH_OAI2111_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OAI2111_L50_1 (X, A1, A2, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI2111_L50_1 (X, A1, A2, B1, B2, B3, VDD, VSS);
   output X;
   input A1, A2, B1, B2, B3, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B1_org, B2_org, B3_org);
   `else
        nand (X, int_res_0, B1_org, B2_org, B3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & B2)) (B3 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & B2)) (B3 -=> X)=(0, 0);
if ((A1 & A2 & B1 & B2)) (B3 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & B3)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & B3)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & B1 & B3)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B2 & B3)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & B3)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & B2 & B3)) (B1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI2111_L50_1

//%BEGIN SEH_OAI2111_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OAI2111_L50_2 (X, A1, A2, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI2111_L50_2 (X, A1, A2, B1, B2, B3, VDD, VSS);
   output X;
   input A1, A2, B1, B2, B3, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B1_org, B2_org, B3_org);
   `else
        nand (X, int_res_0, B1_org, B2_org, B3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & B2)) (B3 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & B2)) (B3 -=> X)=(0, 0);
if ((A1 & A2 & B1 & B2)) (B3 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & B3)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & B3)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & B1 & B3)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B2 & B3)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & B3)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & B2 & B3)) (B1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI2111_L50_2

//%BEGIN SEH_OAI2111_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OAI2111_L50_4 (X, A1, A2, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI2111_L50_4 (X, A1, A2, B1, B2, B3, VDD, VSS);
   output X;
   input A1, A2, B1, B2, B3, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B1_org, B2_org, B3_org);
   `else
        nand (X, int_res_0, B1_org, B2_org, B3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & B2)) (B3 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & B2)) (B3 -=> X)=(0, 0);
if ((A1 & A2 & B1 & B2)) (B3 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & B3)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & B3)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & B1 & B3)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B2 & B3)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2 & B3)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & B2 & B3)) (B1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI2111_L50_4

//%BEGIN SEH_OAI211_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_OAI211_L50_0P5 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI211_L50_0P5 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B1_org, B2_org);
   `else
        nand (X, int_res_0, B1_org, B2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & B2)) (B1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI211_L50_0P5

//%BEGIN SEH_OAI211_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OAI211_L50_1 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI211_L50_1 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B1_org, B2_org);
   `else
        nand (X, int_res_0, B1_org, B2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & B2)) (B1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI211_L50_1

//%BEGIN SEH_OAI211_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OAI211_L50_2 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI211_L50_2 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B1_org, B2_org);
   `else
        nand (X, int_res_0, B1_org, B2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & B2)) (B1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI211_L50_2

//%BEGIN SEH_OAI211_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OAI211_L50_4 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI211_L50_4 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B1_org, B2_org);
   `else
        nand (X, int_res_0, B1_org, B2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & B2)) (B1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI211_L50_4

//%BEGIN SEH_OAI211_L50_8

`celldefine
`ifdef BIAS_PINS
module SEH_OAI211_L50_8 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI211_L50_8 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B1_org, B2_org);
   `else
        nand (X, int_res_0, B1_org, B2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & B2)) (B1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI211_L50_8

//%BEGIN SEH_OAI21_L50_16

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21_L50_16 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21_L50_16 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org); 
   `endif
 
   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
if ((A1 & A2)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21_L50_16

//%BEGIN SEH_OAI21_L50_8

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21_L50_8 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21_L50_8 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org); 
   `endif
 
   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
if ((A1 & A2)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21_L50_8

//%BEGIN SEH_OAI21_SL50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21_SL50_0P5 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21_SL50_0P5 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org); 
   `endif
 
   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
if ((A1 & A2)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21_SL50_0P5

//%BEGIN SEH_OAI21_SL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21_SL50_1 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21_SL50_1 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org); 
   `endif
 
   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
if ((A1 & A2)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21_SL50_1

//%BEGIN SEH_OAI21_SL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21_SL50_2 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21_SL50_2 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org); 
   `endif
 
   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
if ((A1 & A2)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21_SL50_2

//%BEGIN SEH_OAI21_SL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21_SL50_4 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21_SL50_4 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org); 
   `endif
 
   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
if ((A1 & A2)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21_SL50_4

//%BEGIN SEH_OAI21_SL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21_SL50_8 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21_SL50_8 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org); 
   `endif
 
   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
if ((A1 & A2)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21_SL50_8

//%BEGIN SEH_OAI21_L50_0P75

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21_L50_0P75 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21_L50_0P75 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org); 
   `endif
 
   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
if ((A1 & A2)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21_L50_0P75

//%BEGIN SEH_OAI21_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21_L50_1 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21_L50_1 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org); 
   `endif
 
   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
if ((A1 & A2)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21_L50_1

//%BEGIN SEH_OAI21_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21_L50_2 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21_L50_2 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org); 
   `endif
 
   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
if ((A1 & A2)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21_L50_2

//%BEGIN SEH_OAI21_L50_3

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21_L50_3 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21_L50_3 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org); 
   `endif
 
   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
if ((A1 & A2)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21_L50_3

//%BEGIN SEH_OAI21_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21_L50_4 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21_L50_4 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org); 
   `endif
 
   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
if ((A1 & A2)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21_L50_4

//%BEGIN SEH_OAI21_TL50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21_TL50_0P5 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21_TL50_0P5 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org); 
   `endif
 
   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
if ((A1 & A2)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21_TL50_0P5

//%BEGIN SEH_OAI21_TL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21_TL50_1 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21_TL50_1 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org); 
   `endif
 
   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
if ((A1 & A2)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21_TL50_1

//%BEGIN SEH_OAI21_TL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21_TL50_2 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21_TL50_2 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org); 
   `endif
 
   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
if ((A1 & A2)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21_TL50_2

//%BEGIN SEH_OAI21_TL50_3

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21_TL50_3 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21_TL50_3 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org); 
   `endif
 
   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
if ((A1 & A2)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21_TL50_3

//%BEGIN SEH_OAI21_TL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21_TL50_4 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21_TL50_4 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org); 
   `endif
 
   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
if ((A1 & A2)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21_TL50_4

//%BEGIN SEH_OAI21_GL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21_GL50_1 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21_GL50_1 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org); 
   `endif
 
   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
if ((A1 & A2)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21_GL50_1

//%BEGIN SEH_OAI21_GL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21_GL50_2 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21_GL50_2 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, B_org);
   `else
        nand (X, int_res_0, B_org); 
   `endif
 
   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B -=> X)=(0, 0);
if ((A1 & ~(A2))) (B -=> X)=(0, 0);
if ((A1 & A2)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21_GL50_2

//%BEGIN SEH_OAI21B_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21B_L50_0P5 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21B_L50_0P5 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   not (int_res_1, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, int_res_1);
   `else
        nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B +=> X)=(0, 0);
if ((A1 & ~(A2))) (B +=> X)=(0, 0);
if ((A1 & A2)) (B +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21B_L50_0P5

//%BEGIN SEH_OAI21B_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21B_L50_1 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21B_L50_1 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   not (int_res_1, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, int_res_1);
   `else
        nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B +=> X)=(0, 0);
if ((A1 & ~(A2))) (B +=> X)=(0, 0);
if ((A1 & A2)) (B +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21B_L50_1

//%BEGIN SEH_OAI21B_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21B_L50_2 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21B_L50_2 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   not (int_res_1, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, int_res_1);
   `else
        nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B +=> X)=(0, 0);
if ((A1 & ~(A2))) (B +=> X)=(0, 0);
if ((A1 & A2)) (B +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21B_L50_2

//%BEGIN SEH_OAI21B_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OAI21B_L50_4 (X, A1, A2, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI21B_L50_4 (X, A1, A2, B, VDD, VSS);
   output X;
   input A1, A2, B, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   not (int_res_1, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
        nand #1 (X, int_res_0, int_res_1);
   `else
        nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & A2)) (B +=> X)=(0, 0);
if ((A1 & ~(A2))) (B +=> X)=(0, 0);
if ((A1 & A2)) (B +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI21B_L50_4

//%BEGIN SEH_OAI221_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_OAI221_L50_0P5 (X, A1, A2, B1, B2, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI221_L50_0P5 (X, A1, A2, B1, B2, C, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nand #1 (X, int_res_0, int_res_1, C_org);
   `else
      nand (X, int_res_0, int_res_1, C_org);
   `endif
   
   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2 & C)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2) & C)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2 & C)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2))) (C -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & B2)) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2))) (C -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2)) | (A1 & ~(A2) & B1 & B2)) (C -=> X)=(0, 0);
if ((A1 & A2 & B1 & B2)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & C)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & C)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & C)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2) & C)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2) & C)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2) & C)) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2 & C)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2) & C)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2 & C)) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI221_L50_0P5

//%BEGIN SEH_OAI221_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OAI221_L50_1 (X, A1, A2, B1, B2, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI221_L50_1 (X, A1, A2, B1, B2, C, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nand #1 (X, int_res_0, int_res_1, C_org);
   `else
      nand (X, int_res_0, int_res_1, C_org);
   `endif
   
   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2 & C)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2) & C)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2 & C)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2))) (C -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & B2)) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2))) (C -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2)) | (A1 & ~(A2) & B1 & B2)) (C -=> X)=(0, 0);
if ((A1 & A2 & B1 & B2)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & C)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & C)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & C)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2) & C)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2) & C)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2) & C)) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2 & C)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2) & C)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2 & C)) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI221_L50_1

//%BEGIN SEH_OAI221_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OAI221_L50_2 (X, A1, A2, B1, B2, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI221_L50_2 (X, A1, A2, B1, B2, C, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nand #1 (X, int_res_0, int_res_1, C_org);
   `else
      nand (X, int_res_0, int_res_1, C_org);
   `endif
   
   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2 & C)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2) & C)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2 & C)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2))) (C -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & B2)) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2))) (C -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2)) | (A1 & ~(A2) & B1 & B2)) (C -=> X)=(0, 0);
if ((A1 & A2 & B1 & B2)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & C)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & C)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & C)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2) & C)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2) & C)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2) & C)) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2 & C)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2) & C)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2 & C)) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI221_L50_2

//%BEGIN SEH_OAI221_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OAI221_L50_4 (X, A1, A2, B1, B2, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI221_L50_4 (X, A1, A2, B1, B2, C, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nand #1 (X, int_res_0, int_res_1, C_org);
   `else
      nand (X, int_res_0, int_res_1, C_org);
   `endif
   
   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2 & C)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2) & C)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2 & C)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2))) (C -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & B2)) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2))) (C -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2)) (C -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2)) | (A1 & ~(A2) & B1 & B2)) (C -=> X)=(0, 0);
if ((A1 & A2 & B1 & B2)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & C)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & C)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & C)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2) & C)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2) & C)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2) & C)) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2 & C)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2) & C)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2 & C)) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI221_L50_4

//%BEGIN SEH_OAI222_L50_0P75

`celldefine
`ifdef BIAS_PINS
module SEH_OAI222_L50_0P75 (X, A1, A2, B1, B2, C1, C2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C1, C2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI222_L50_0P75 (X, A1, A2, B1, B2, C1, C2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C1, C2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);
   or (int_res_2, C1_org, C2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nand #1 (X, int_res_0, int_res_1, int_res_2);
   `else
      nand (X, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2 & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & ~(B1) & B2 & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((~(A1) & ~(B1) & B2 & C1 & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2) & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2) & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2) & C1 & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2 & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2 & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2 & C1 & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & C1 & C2)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & C1 & C2)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & C1 & C2)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2) & ~(C1))) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2) & ~(C1))) (C2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2) & ~(C1)) | (A1 & ~(A2) & B1 & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((A1 & A2 & B1 & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2) & ~(C2))) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2) & ~(C2))) (C1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2) & ~(C2)) | (A1 & ~(A2) & B1 & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((A1 & A2 & B1 & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2) & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2) & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2) & C1 & C2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2) & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2) & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2) & C1 & C2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2) & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2) & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2) & C1 & C2)) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2 & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2 & C1 & ~(C2))) (A1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2 & C1 & C2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2) & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2) & C1 & ~(C2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2) & C1 & C2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2 & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2 & C1 & ~(C2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2 & C1 & C2)) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI222_L50_0P75

//%BEGIN SEH_OAI222_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OAI222_L50_1 (X, A1, A2, B1, B2, C1, C2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C1, C2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI222_L50_1 (X, A1, A2, B1, B2, C1, C2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C1, C2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);
   or (int_res_2, C1_org, C2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nand #1 (X, int_res_0, int_res_1, int_res_2);
   `else
      nand (X, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2 & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & ~(B1) & B2 & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((~(A1) & ~(B1) & B2 & C1 & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2) & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2) & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2) & C1 & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2 & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2 & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2 & C1 & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & C1 & C2)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & C1 & C2)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & C1 & C2)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2) & ~(C1))) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2) & ~(C1))) (C2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2) & ~(C1)) | (A1 & ~(A2) & B1 & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((A1 & A2 & B1 & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2) & ~(C2))) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2) & ~(C2))) (C1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2) & ~(C2)) | (A1 & ~(A2) & B1 & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((A1 & A2 & B1 & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2) & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2) & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2) & C1 & C2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2) & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2) & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2) & C1 & C2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2) & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2) & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2) & C1 & C2)) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2 & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2 & C1 & ~(C2))) (A1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2 & C1 & C2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2) & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2) & C1 & ~(C2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2) & C1 & C2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2 & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2 & C1 & ~(C2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2 & C1 & C2)) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI222_L50_1

//%BEGIN SEH_OAI222_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OAI222_L50_2 (X, A1, A2, B1, B2, C1, C2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C1, C2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI222_L50_2 (X, A1, A2, B1, B2, C1, C2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C1, C2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);
   or (int_res_2, C1_org, C2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nand #1 (X, int_res_0, int_res_1, int_res_2);
   `else
      nand (X, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2 & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & ~(B1) & B2 & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((~(A1) & ~(B1) & B2 & C1 & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2) & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2) & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2) & C1 & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2 & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2 & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2 & C1 & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & C1 & C2)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & C1 & C2)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & C1 & C2)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2) & ~(C1))) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2) & ~(C1))) (C2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2) & ~(C1)) | (A1 & ~(A2) & B1 & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((A1 & A2 & B1 & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2) & ~(C2))) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2) & ~(C2))) (C1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2) & ~(C2)) | (A1 & ~(A2) & B1 & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((A1 & A2 & B1 & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2) & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2) & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2) & C1 & C2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2) & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2) & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2) & C1 & C2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2) & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2) & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2) & C1 & C2)) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2 & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2 & C1 & ~(C2))) (A1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2 & C1 & C2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2) & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2) & C1 & ~(C2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2) & C1 & C2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2 & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2 & C1 & ~(C2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2 & C1 & C2)) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI222_L50_2

//%BEGIN SEH_OAI222_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OAI222_L50_4 (X, A1, A2, B1, B2, C1, C2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, C1, C2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI222_L50_4 (X, A1, A2, B1, B2, C1, C2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, C1, C2, VDD, VSS;

   wire int_res_0, int_res_1, int_res_2;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C1_org, C1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C2_org, C2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);
   or (int_res_2, C1_org, C2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nand #1 (X, int_res_0, int_res_1, int_res_2);
   `else
      nand (X, int_res_0, int_res_1, int_res_2);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2 & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & ~(B1) & B2 & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((~(A1) & ~(B1) & B2 & C1 & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2) & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2) & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2) & C1 & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2 & ~(C1) & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2 & C1 & ~(C2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2 & C1 & C2)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & C1 & C2)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & C1 & C2)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & ~(C1) & C2)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & C1 & ~(C2))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & C1 & C2)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2) & ~(C1))) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2) & ~(C1))) (C2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2) & ~(C1)) | (A1 & ~(A2) & B1 & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((A1 & A2 & B1 & B2 & ~(C1))) (C2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1) & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & ~(B2) & ~(C2))) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & B1 & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1) & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((A1 & ~(A2) & B1 & ~(B2) & ~(C2))) (C1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1) & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((A1 & A2 & B1 & ~(B2) & ~(C2)) | (A1 & ~(A2) & B1 & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((A1 & A2 & B1 & B2 & ~(C2))) (C1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2) & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2) & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2) & C1 & C2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2) & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2) & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2) & C1 & C2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2) & ~(C1) & C2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2) & C1 & ~(C2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2) & C1 & C2)) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2 & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2 & C1 & ~(C2))) (A1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2 & C1 & C2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2) & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2) & C1 & ~(C2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2) & C1 & C2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2 & ~(C1) & C2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2 & C1 & ~(C2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2 & C1 & C2)) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI222_L50_4

//%BEGIN SEH_OAI22_SL50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_OAI22_SL50_0P5 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI22_SL50_0P5 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (X, int_res_0, int_res_1);
   `else
         nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2)) (A1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_OAI22_SL50_0P5

//%BEGIN SEH_OAI22_SL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OAI22_SL50_1 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI22_SL50_1 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (X, int_res_0, int_res_1);
   `else
         nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2)) (A1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_OAI22_SL50_1

//%BEGIN SEH_OAI22_SL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OAI22_SL50_2 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI22_SL50_2 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (X, int_res_0, int_res_1);
   `else
         nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2)) (A1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_OAI22_SL50_2

//%BEGIN SEH_OAI22_SL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OAI22_SL50_4 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI22_SL50_4 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (X, int_res_0, int_res_1);
   `else
         nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2)) (A1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_OAI22_SL50_4

//%BEGIN SEH_OAI22_SL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_OAI22_SL50_8 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI22_SL50_8 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (X, int_res_0, int_res_1);
   `else
         nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2)) (A1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_OAI22_SL50_8

//%BEGIN SEH_OAI22_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_OAI22_L50_0P5 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI22_L50_0P5 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (X, int_res_0, int_res_1);
   `else
         nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2)) (A1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_OAI22_L50_0P5

//%BEGIN SEH_OAI22_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OAI22_L50_1 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI22_L50_1 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (X, int_res_0, int_res_1);
   `else
         nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2)) (A1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_OAI22_L50_1

//%BEGIN SEH_OAI22_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OAI22_L50_2 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI22_L50_2 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (X, int_res_0, int_res_1);
   `else
         nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2)) (A1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_OAI22_L50_2

//%BEGIN SEH_OAI22_L50_3

`celldefine
`ifdef BIAS_PINS
module SEH_OAI22_L50_3 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI22_L50_3 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (X, int_res_0, int_res_1);
   `else
         nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2)) (A1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_OAI22_L50_3

//%BEGIN SEH_OAI22_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OAI22_L50_4 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI22_L50_4 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (X, int_res_0, int_res_1);
   `else
         nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2)) (A1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_OAI22_L50_4

//%BEGIN SEH_OAI22_TL50_0P75

`celldefine
`ifdef BIAS_PINS
module SEH_OAI22_TL50_0P75 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI22_TL50_0P75 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (X, int_res_0, int_res_1);
   `else
         nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2)) (A1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_OAI22_TL50_0P75

//%BEGIN SEH_OAI22_TL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OAI22_TL50_1 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI22_TL50_1 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (X, int_res_0, int_res_1);
   `else
         nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2)) (A1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_OAI22_TL50_1

//%BEGIN SEH_OAI22_TL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OAI22_TL50_2 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI22_TL50_2 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (X, int_res_0, int_res_1);
   `else
         nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2)) (A1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_OAI22_TL50_2

//%BEGIN SEH_OAI22_TL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OAI22_TL50_4 (X, A1, A2, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI22_TL50_4 (X, A1, A2, B1, B2, VDD, VSS);
   output X;
   input A1, A2, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
         nand #1 (X, int_res_0, int_res_1);
   `else
         nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((~(A1) & B1 & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A2) & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & ~(B2))) (A1 -=> X)=(0, 0);
if ((~(A2) & B1 & B2)) (A1 -=> X)=(0, 0);
endspecify
  `endif

endmodule
`endcelldefine

//%END SEH_OAI22_TL50_4

//%BEGIN SEH_OAI311_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OAI311_L50_1 (X, A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI311_L50_1 (X, A1, A2, A3, B1, B2, VDD, VSS);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       nand #1 (X, int_res_0, B1_org, B2_org);
   `else
       nand (X, int_res_0, B1_org, B2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B1)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B1) | (A1 & ~(A2) & A3 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & A3 & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B2) | (A1 & ~(A2) & A3 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & A3 & B2)) (B1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI311_L50_1

//%BEGIN SEH_OAI311_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OAI311_L50_2 (X, A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI311_L50_2 (X, A1, A2, A3, B1, B2, VDD, VSS);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       nand #1 (X, int_res_0, B1_org, B2_org);
   `else
       nand (X, int_res_0, B1_org, B2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B1)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B1) | (A1 & ~(A2) & A3 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & A3 & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B2) | (A1 & ~(A2) & A3 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & A3 & B2)) (B1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI311_L50_2

//%BEGIN SEH_OAI311_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OAI311_L50_4 (X, A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI311_L50_4 (X, A1, A2, A3, B1, B2, VDD, VSS);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       nand #1 (X, int_res_0, B1_org, B2_org);
   `else
       nand (X, int_res_0, B1_org, B2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B1)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B1) | (A1 & ~(A2) & A3 & B1)) (B2 -=> X)=(0, 0);
if ((A1 & A2 & A3 & B1)) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & B2)) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & B2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & B2) | (A1 & ~(A2) & A3 & B2)) (B1 -=> X)=(0, 0);
if ((A1 & A2 & A3 & B2)) (B1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI311_L50_4

//%BEGIN SEH_OAI31_GL50_8

`celldefine
`ifdef BIAS_PINS
module SEH_OAI31_GL50_8 (X, A1, A2, A3, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI31_GL50_8 (X, A1, A2, A3, B, VDD, VSS);
   output X;
   input A1, A2, A3, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nand #1 (X, int_res_0, B_org);
   `else
      nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3))) (B -=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (B -=> X)=(0, 0);
if ((A1 & A2 & ~(A3)) | (A1 & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((A1 & A2 & A3)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI31_GL50_8

//%BEGIN SEH_OAI31_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OAI31_L50_1 (X, A1, A2, A3, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI31_L50_1 (X, A1, A2, A3, B, VDD, VSS);
   output X;
   input A1, A2, A3, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nand #1 (X, int_res_0, B_org);
   `else
      nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3))) (B -=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (B -=> X)=(0, 0);
if ((A1 & A2 & ~(A3)) | (A1 & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((A1 & A2 & A3)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI31_L50_1

//%BEGIN SEH_OAI31_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OAI31_L50_2 (X, A1, A2, A3, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI31_L50_2 (X, A1, A2, A3, B, VDD, VSS);
   output X;
   input A1, A2, A3, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nand #1 (X, int_res_0, B_org);
   `else
      nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3))) (B -=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (B -=> X)=(0, 0);
if ((A1 & A2 & ~(A3)) | (A1 & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((A1 & A2 & A3)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI31_L50_2

//%BEGIN SEH_OAI31_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OAI31_L50_4 (X, A1, A2, A3, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI31_L50_4 (X, A1, A2, A3, B, VDD, VSS);
   output X;
   input A1, A2, A3, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nand #1 (X, int_res_0, B_org);
   `else
      nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3))) (B -=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (B -=> X)=(0, 0);
if ((A1 & A2 & ~(A3)) | (A1 & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((A1 & A2 & A3)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI31_L50_4

//%BEGIN SEH_OAI31_GL50_0P75

`celldefine
`ifdef BIAS_PINS
module SEH_OAI31_GL50_0P75 (X, A1, A2, A3, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI31_GL50_0P75 (X, A1, A2, A3, B, VDD, VSS);
   output X;
   input A1, A2, A3, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nand #1 (X, int_res_0, B_org);
   `else
      nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3))) (B -=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (B -=> X)=(0, 0);
if ((A1 & A2 & ~(A3)) | (A1 & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((A1 & A2 & A3)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI31_GL50_0P75

//%BEGIN SEH_OAI31_GL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OAI31_GL50_1 (X, A1, A2, A3, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI31_GL50_1 (X, A1, A2, A3, B, VDD, VSS);
   output X;
   input A1, A2, A3, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nand #1 (X, int_res_0, B_org);
   `else
      nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3))) (B -=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (B -=> X)=(0, 0);
if ((A1 & A2 & ~(A3)) | (A1 & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((A1 & A2 & A3)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI31_GL50_1

//%BEGIN SEH_OAI31_GL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OAI31_GL50_2 (X, A1, A2, A3, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI31_GL50_2 (X, A1, A2, A3, B, VDD, VSS);
   output X;
   input A1, A2, A3, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nand #1 (X, int_res_0, B_org);
   `else
      nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3))) (B -=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (B -=> X)=(0, 0);
if ((A1 & A2 & ~(A3)) | (A1 & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((A1 & A2 & A3)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI31_GL50_2

//%BEGIN SEH_OAI31_GL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OAI31_GL50_4 (X, A1, A2, A3, B, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI31_GL50_4 (X, A1, A2, A3, B, VDD, VSS);
   output X;
   input A1, A2, A3, B, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org, A3_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nand #1 (X, int_res_0, B_org);
   `else
      nand (X, int_res_0, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
(A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3))) (B -=> X)=(0, 0);
if ((~(A1) & A2 & A3)) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3))) (B -=> X)=(0, 0);
if ((A1 & A2 & ~(A3)) | (A1 & ~(A2) & A3)) (B -=> X)=(0, 0);
if ((A1 & A2 & A3)) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI31_GL50_4

//%BEGIN SEH_OAI32_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OAI32_L50_1 (X, A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI32_L50_1 (X, A1, A2, A3, B1, B2, VDD, VSS);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org, A3_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nand #1 (X, int_res_0, int_res_1);
   `else
      nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2) & ~(B1) & B2)) (A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2))) (A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & B2)) (A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & ~(B1)) | (A1 & ~(A2) & A3 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & A3 & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & ~(B2)) | (A1 & ~(A2) & A3 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & A3 & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A1) & ~(A3) & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & ~(A3) & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((~(A1) & ~(A3) & B1 & B2)) (A2 -=> X)=(0, 0);
if ((~(A2) & ~(A3) & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((~(A2) & ~(A3) & B1 & ~(B2))) (A1 -=> X)=(0, 0);
if ((~(A2) & ~(A3) & B1 & B2)) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI32_L50_1

//%BEGIN SEH_OAI32_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OAI32_L50_2 (X, A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI32_L50_2 (X, A1, A2, A3, B1, B2, VDD, VSS);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org, A3_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nand #1 (X, int_res_0, int_res_1);
   `else
      nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2) & ~(B1) & B2)) (A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2))) (A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & B2)) (A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & ~(B1)) | (A1 & ~(A2) & A3 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & A3 & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & ~(B2)) | (A1 & ~(A2) & A3 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & A3 & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A1) & ~(A3) & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & ~(A3) & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((~(A1) & ~(A3) & B1 & B2)) (A2 -=> X)=(0, 0);
if ((~(A2) & ~(A3) & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((~(A2) & ~(A3) & B1 & ~(B2))) (A1 -=> X)=(0, 0);
if ((~(A2) & ~(A3) & B1 & B2)) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI32_L50_2

//%BEGIN SEH_OAI32_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OAI32_L50_4 (X, A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAI32_L50_4 (X, A1, A2, A3, B1, B2, VDD, VSS);
   output X;
   input A1, A2, A3, B1, B2, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org, A3_org);
   or (int_res_1, B1_org, B2_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nand #1 (X, int_res_0, int_res_1);
   `else
      nand (X, int_res_0, int_res_1);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
if ((~(A1) & ~(A2) & ~(B1) & B2)) (A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & ~(B2))) (A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B1 & B2)) (A3 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & ~(B1)) | (A1 & ~(A2) & A3 & ~(B1))) (B2 -=> X)=(0, 0);
if ((A1 & A2 & A3 & ~(B1))) (B2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & A3 & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & ~(A3) & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A1) & A2 & A3 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(A3) & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & ~(A3) & ~(B2)) | (A1 & ~(A2) & A3 & ~(B2))) (B1 -=> X)=(0, 0);
if ((A1 & A2 & A3 & ~(B2))) (B1 -=> X)=(0, 0);
if ((~(A1) & ~(A3) & ~(B1) & B2)) (A2 -=> X)=(0, 0);
if ((~(A1) & ~(A3) & B1 & ~(B2))) (A2 -=> X)=(0, 0);
if ((~(A1) & ~(A3) & B1 & B2)) (A2 -=> X)=(0, 0);
if ((~(A2) & ~(A3) & ~(B1) & B2)) (A1 -=> X)=(0, 0);
if ((~(A2) & ~(A3) & B1 & ~(B2))) (A1 -=> X)=(0, 0);
if ((~(A2) & ~(A3) & B1 & B2)) (A1 -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAI32_L50_4

//%BEGIN SEH_OAO211_DGL50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OAO211_DGL50_1 (X, A1, A2, B, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAO211_DGL50_1 (X, A1, A2, B, C, VDD, VSS);
   output X;
   input A1, A2, B, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   and (int_res_1, int_res_0, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_1, C_org);
   `else
      or (X, int_res_1, C_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B))) (C +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B)) (C +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B))) (C +=> X)=(0, 0);
if ((A1 & ~(B))) (C +=> X)=(0, 0);
if ((~(A1) & A2 & ~(C))) (B +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(C))) (B +=> X)=(0, 0);
if ((A1 & A2 & ~(C))) (B +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAO211_DGL50_1

//%BEGIN SEH_OAO211_DGL50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OAO211_DGL50_2 (X, A1, A2, B, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAO211_DGL50_2 (X, A1, A2, B, C, VDD, VSS);
   output X;
   input A1, A2, B, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   and (int_res_1, int_res_0, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_1, C_org);
   `else
      or (X, int_res_1, C_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B))) (C +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B)) (C +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B))) (C +=> X)=(0, 0);
if ((A1 & ~(B))) (C +=> X)=(0, 0);
if ((~(A1) & A2 & ~(C))) (B +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(C))) (B +=> X)=(0, 0);
if ((A1 & A2 & ~(C))) (B +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAO211_DGL50_2

//%BEGIN SEH_OAO211_DGL50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OAO211_DGL50_4 (X, A1, A2, B, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAO211_DGL50_4 (X, A1, A2, B, C, VDD, VSS);
   output X;
   input A1, A2, B, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   and (int_res_1, int_res_0, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_1, C_org);
   `else
      or (X, int_res_1, C_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B))) (C +=> X)=(0, 0);
if ((~(A1) & ~(A2) & B)) (C +=> X)=(0, 0);
if ((~(A1) & A2 & ~(B))) (C +=> X)=(0, 0);
if ((A1 & ~(B))) (C +=> X)=(0, 0);
if ((~(A1) & A2 & ~(C))) (B +=> X)=(0, 0);
if ((A1 & ~(A2) & ~(C))) (B +=> X)=(0, 0);
if ((A1 & A2 & ~(C))) (B +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAO211_DGL50_4

//%BEGIN SEH_OAOI211_V2L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OAOI211_V2L50_1 (X, A1, A2, B, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAOI211_V2L50_1 (X, A1, A2, B, C, VDD, VSS);
   output X;
   input A1, A2, B, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   and (int_res_1, int_res_0, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_1, C_org);
   `else
      nor (X, int_res_1, C_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B))) (C -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B))) (C -=> X)=(0, 0);
if ((A1 & ~(B))) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(C))) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(C))) (B -=> X)=(0, 0);
if ((A1 & A2 & ~(C))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAOI211_V2L50_1

//%BEGIN SEH_OAOI211_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_OAOI211_L50_0P5 (X, A1, A2, B, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAOI211_L50_0P5 (X, A1, A2, B, C, VDD, VSS);
   output X;
   input A1, A2, B, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   and (int_res_1, int_res_0, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_1, C_org);
   `else
      nor (X, int_res_1, C_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B))) (C -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B))) (C -=> X)=(0, 0);
if ((A1 & ~(B))) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(C))) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(C))) (B -=> X)=(0, 0);
if ((A1 & A2 & ~(C))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAOI211_L50_0P5

//%BEGIN SEH_OAOI211_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OAOI211_L50_1 (X, A1, A2, B, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAOI211_L50_1 (X, A1, A2, B, C, VDD, VSS);
   output X;
   input A1, A2, B, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   and (int_res_1, int_res_0, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_1, C_org);
   `else
      nor (X, int_res_1, C_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B))) (C -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B))) (C -=> X)=(0, 0);
if ((A1 & ~(B))) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(C))) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(C))) (B -=> X)=(0, 0);
if ((A1 & A2 & ~(C))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAOI211_L50_1

//%BEGIN SEH_OAOI211_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OAOI211_L50_2 (X, A1, A2, B, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAOI211_L50_2 (X, A1, A2, B, C, VDD, VSS);
   output X;
   input A1, A2, B, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   and (int_res_1, int_res_0, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_1, C_org);
   `else
      nor (X, int_res_1, C_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B))) (C -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B))) (C -=> X)=(0, 0);
if ((A1 & ~(B))) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(C))) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(C))) (B -=> X)=(0, 0);
if ((A1 & A2 & ~(C))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAOI211_L50_2

//%BEGIN SEH_OAOI211_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OAOI211_L50_4 (X, A1, A2, B, C, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, B, C, VDD, VSS, VBP, VBN;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OAOI211_L50_4 (X, A1, A2, B, C, VDD, VSS);
   output X;
   input A1, A2, B, C, VDD, VSS;

   wire int_res_0, int_res_1;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (C_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (C_org, C, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   or (int_res_0, A1_org, A2_org);
   and (int_res_1, int_res_0, B_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      nor #1 (X, int_res_1, C_org);
   `else
      nor (X, int_res_1, C_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 -=> X)=(0, 0);
(A2 -=> X)=(0, 0);
if ((~(A1) & ~(A2) & ~(B))) (C -=> X)=(0, 0);
if ((~(A1) & ~(A2) & B)) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(B))) (C -=> X)=(0, 0);
if ((A1 & ~(B))) (C -=> X)=(0, 0);
if ((~(A1) & A2 & ~(C))) (B -=> X)=(0, 0);
if ((A1 & ~(A2) & ~(C))) (B -=> X)=(0, 0);
if ((A1 & A2 & ~(C))) (B -=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OAOI211_L50_4

//%BEGIN SEH_OR2_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OR2_L50_1 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR2_L50_1 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       or #1 (X, A1_org, A2_org);
   `else
       or (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR2_L50_1

//%BEGIN SEH_OR2_L50_1P5

`celldefine
`ifdef BIAS_PINS
module SEH_OR2_L50_1P5 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR2_L50_1P5 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       or #1 (X, A1_org, A2_org);
   `else
       or (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR2_L50_1P5

//%BEGIN SEH_OR2_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OR2_L50_2 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR2_L50_2 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       or #1 (X, A1_org, A2_org);
   `else
       or (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR2_L50_2

//%BEGIN SEH_OR2_L50_3

`celldefine
`ifdef BIAS_PINS
module SEH_OR2_L50_3 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR2_L50_3 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       or #1 (X, A1_org, A2_org);
   `else
       or (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR2_L50_3

//%BEGIN SEH_OR2_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OR2_L50_4 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR2_L50_4 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       or #1 (X, A1_org, A2_org);
   `else
       or (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR2_L50_4

//%BEGIN SEH_OR2_L50_6

`celldefine
`ifdef BIAS_PINS
module SEH_OR2_L50_6 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR2_L50_6 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       or #1 (X, A1_org, A2_org);
   `else
       or (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR2_L50_6

//%BEGIN SEH_OR2_L50_8

`celldefine
`ifdef BIAS_PINS
module SEH_OR2_L50_8 (X, A1, A2, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR2_L50_8 (X, A1, A2, VDD, VSS);
   output X;
   input A1, A2, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
       or #1 (X, A1_org, A2_org);
   `else
       or (X, A1_org, A2_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR2_L50_8

//%BEGIN SEH_OR3_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OR3_L50_1 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR3_L50_1 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, A1_org, A2_org, A3_org);
   `else
      or (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR3_L50_1

//%BEGIN SEH_OR3_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OR3_L50_2 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR3_L50_2 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, A1_org, A2_org, A3_org);
   `else
      or (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR3_L50_2

//%BEGIN SEH_OR3_L50_3

`celldefine
`ifdef BIAS_PINS
module SEH_OR3_L50_3 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR3_L50_3 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, A1_org, A2_org, A3_org);
   `else
      or (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR3_L50_3

//%BEGIN SEH_OR3_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OR3_L50_4 (X, A1, A2, A3, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR3_L50_4 (X, A1, A2, A3, VDD, VSS);
   output X;
   input A1, A2, A3, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, A1_org, A2_org, A3_org);
   `else
      or (X, A1_org, A2_org, A3_org);
   `endif

   `ifdef VIRL_functiononly

   `else

specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR3_L50_4

//%BEGIN SEH_OR3B_L50_0P5

`celldefine
`ifdef BIAS_PINS
module SEH_OR3B_L50_0P5 (X, A, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR3B_L50_0P5 (X, A, B1, B2, VDD, VSS);
   output X;
   input A, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, B1_org, B2_org);
   `else
      or (X, int_res_0, B1_org, B2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A -=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR3B_L50_0P5

//%BEGIN SEH_OR3B_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OR3B_L50_1 (X, A, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR3B_L50_1 (X, A, B1, B2, VDD, VSS);
   output X;
   input A, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, B1_org, B2_org);
   `else
      or (X, int_res_0, B1_org, B2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A -=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR3B_L50_1

//%BEGIN SEH_OR3B_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OR3B_L50_2 (X, A, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR3B_L50_2 (X, A, B1, B2, VDD, VSS);
   output X;
   input A, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, B1_org, B2_org);
   `else
      or (X, int_res_0, B1_org, B2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A -=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR3B_L50_2

//%BEGIN SEH_OR3B_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OR3B_L50_4 (X, A, B1, B2, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR3B_L50_4 (X, A, B1, B2, VDD, VSS);
   output X;
   input A, B1, B2, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      or #1 (X, int_res_0, B1_org, B2_org);
   `else
      or (X, int_res_0, B1_org, B2_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A -=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR3B_L50_4

//%BEGIN SEH_OR4_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OR4_L50_1 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR4_L50_1 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      or #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
      or (X, A1_org, A2_org, A3_org, A4_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
(A4 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR4_L50_1

//%BEGIN SEH_OR4_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OR4_L50_2 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR4_L50_2 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      or #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
      or (X, A1_org, A2_org, A3_org, A4_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
(A4 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR4_L50_2

//%BEGIN SEH_OR4_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OR4_L50_4 (X, A1, A2, A3, A4, VDD, VSS, VBP, VBN);
   output X;
   input A1, A2, A3, A4, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR4_L50_4 (X, A1, A2, A3, A4, VDD, VSS);
   output X;
   input A1, A2, A3, A4, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A1_org, A1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A2_org, A2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A3_org, A3, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (A4_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A4_org, A4, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////


   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////
   `ifdef VIRL_functiononly
      or #1 (X, A1_org, A2_org, A3_org, A4_org);
   `else
      or (X, A1_org, A2_org, A3_org, A4_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A1 +=> X)=(0, 0);
(A2 +=> X)=(0, 0);
(A3 +=> X)=(0, 0);
(A4 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR4_L50_4

//%BEGIN SEH_OR4B_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_OR4B_L50_1 (X, A, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR4B_L50_1 (X, A, B1, B2, B3, VDD, VSS);
   output X;
   input A, B1, B2, B3, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       or #1 (X, int_res_0, B1_org, B2_org, B3_org);
   `else
       or (X, int_res_0, B1_org, B2_org, B3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A -=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
(B3 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR4B_L50_1

//%BEGIN SEH_OR4B_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_OR4B_L50_2 (X, A, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR4B_L50_2 (X, A, B1, B2, B3, VDD, VSS);
   output X;
   input A, B1, B2, B3, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       or #1 (X, int_res_0, B1_org, B2_org, B3_org);
   `else
       or (X, int_res_0, B1_org, B2_org, B3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A -=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
(B3 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR4B_L50_2

//%BEGIN SEH_OR4B_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_OR4B_L50_4 (X, A, B1, B2, B3, VDD, VSS, VBP, VBN);
   output X;
   input A, B1, B2, B3, VDD, VSS, VBP, VBN;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_OR4B_L50_4 (X, A, B1, B2, B3, VDD, VSS);
   output X;
   input A, B1, B2, B3, VDD, VSS;

   wire int_res_0;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B1_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B1_org, B1, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B2_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B2_org, B2, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B3_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B3_org, B3, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   not (int_res_0, A_org);

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
       or #1 (X, int_res_0, B1_org, B2_org, B3_org);
   `else
       or (X, int_res_0, B1_org, B2_org, B3_org);
   `endif

   `ifdef VIRL_functiononly

   `else


specify
(A -=> X)=(0, 0);
(B1 +=> X)=(0, 0);
(B2 +=> X)=(0, 0);
(B3 +=> X)=(0, 0);
endspecify
   `endif

endmodule
`endcelldefine

//%END SEH_OR4B_L50_4

//%BEGIN SEH_SUBH_L50_1

`celldefine
`ifdef BIAS_PINS
module SEH_SUBH_L50_1 (S, CO, A, B, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_SUBH_L50_1 (S, CO, A, B, VDD, VSS);
   output S, CO;
   input A, B, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      xnor #1 (S, A_org, B_org);
      or #1 (CO, A_org, B_org);
   `else
      xnor (S, A_org, B_org);
      or (CO, A_org, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
(A +=> CO)=(0, 0);
(B +=> CO)=(0, 0);
if (~(B)) (A -=> S)=(0, 0);
if (B) (A +=> S)=(0, 0);
if (~(A)) (B -=> S)=(0, 0);
if (A) (B +=> S)=(0, 0);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_SUBH_L50_1

//%BEGIN SEH_SUBH_L50_2

`celldefine
`ifdef BIAS_PINS
module SEH_SUBH_L50_2 (S, CO, A, B, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_SUBH_L50_2 (S, CO, A, B, VDD, VSS);
   output S, CO;
   input A, B, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      xnor #1 (S, A_org, B_org);
      or #1 (CO, A_org, B_org);
   `else
      xnor (S, A_org, B_org);
      or (CO, A_org, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
(A +=> CO)=(0, 0);
(B +=> CO)=(0, 0);
if (~(B)) (A -=> S)=(0, 0);
if (B) (A +=> S)=(0, 0);
if (~(A)) (B -=> S)=(0, 0);
if (A) (B +=> S)=(0, 0);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_SUBH_L50_2

//%BEGIN SEH_SUBH_L50_4

`celldefine
`ifdef BIAS_PINS
module SEH_SUBH_L50_4 (S, CO, A, B, VDD, VSS, VBP, VBN);
   output S, CO;
   input A, B, VDD, VSS, VBP, VBN;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0) || (VBP !== 1'b1) || (VBN !== 1'b0)));

`else
module SEH_SUBH_L50_4 (S, CO, A, B, VDD, VSS);
   output S, CO;
   input A, B, VDD, VSS;



   /////////////////////////////////////
   //  Power Port Functionality       //
   /////////////////////////////////////

   bufif1 (A_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (A_org, A, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif1 (B_org, 1'bx, ((VDD !== 1'b1) || (VSS !== 1'b0)));
   bufif0 (B_org, B, ((VDD !== 1'b1) || (VSS !== 1'b0)));

`endif

   /////////////////////////////////////
   //          FUNCTIONALITY          //
   /////////////////////////////////////

   `ifdef VIRL_functiononly
      xnor #1 (S, A_org, B_org);
      or #1 (CO, A_org, B_org);
   `else
      xnor (S, A_org, B_org);
      or (CO, A_org, B_org);
   `endif

   `ifdef VIRL_functiononly

   `else

   /////////////////////////////////////
   //             TIMING              //
   /////////////////////////////////////


specify
(A +=> CO)=(0, 0);
(B +=> CO)=(0, 0);
if (~(B)) (A -=> S)=(0, 0);
if (B) (A +=> S)=(0, 0);
if (~(A)) (B -=> S)=(0, 0);
if (A) (B +=> S)=(0, 0);
endspecify
   `endif
endmodule
`endcelldefine

//%END SEH_SUBH_L50_4

primitive scl40_htc50_mux2 (q, i1, i0, s0);
   input i1, i0, s0;
   output q;

   table
        ?  0  0 : 0;
        ?  1  0 : 1;
        0  ?  1 : 0;
        1  ?  1 : 1;
        0  0  ? : 0;
        1  1  ? : 1;
   endtable
endprimitive

primitive scl40_htc50_mux4 (q, i3, i2, i1, i0, s1, s0);
   input i3, i2, i1, i0, s1, s0;
   output q;

   table
        ?  ?  ?  0  0  0 : 0;
        ?  ?  ?  1  0  0 : 1;
        ?  ?  0  ?  0  1 : 0;
        ?  ?  1  ?  0  1 : 1;
        ?  0  ?  ?  1  0 : 0;
        ?  1  ?  ?  1  0 : 1;
        0  ?  ?  ?  1  1 : 0;
        1  ?  ?  ?  1  1 : 1;
        ?  ?  0  0  0  ? : 0;
        ?  ?  1  1  0  ? : 1;
        0  0  ?  ?  1  ? : 0;
        1  1  ?  ?  1  ? : 1;
        ?  0  ?  0  ?  0 : 0;
        ?  1  ?  1  ?  0 : 1;
        0  ?  0  ?  ?  1 : 0;
        1  ?  1  ?  ?  1 : 1;
        0  0  0  0  ?  ? : 0;
        1  1  1  1  ?  ? : 1;
   endtable
endprimitive

primitive scl40_htc50_latch (q, v, clk, d);
   output q;
   reg q;
   input v, clk, d;

   table
      * ? ? : ? : x;
      ? 1 0 : ? : 0;
      ? 1 1 : ? : 1;
      ? x 0 : 0 : -;
      ? x 1 : 1 : -;
      ? 0 ? : ? : -;
   endtable
endprimitive

primitive scl40_htc50_latch_r (q, v, clk, d, r);
   output q;
   reg q;
   input v, clk, d, r;

   table
      * ? ? ? : ? : x;
      ? ? ? 1 : ? : 0;
      ? 0 ? 0 : ? : -;
      ? 0 ? x : 0 : -;
      ? 1 0 0 : ? : 0;
      ? 1 0 x : ? : 0;
      ? 1 1 0 : ? : 1;
      ? x 0 0 : 0 : -;
      ? x 0 x : 0 : -;
      ? x 1 0 : 1 : -;
   endtable
endprimitive

primitive scl40_htc50_latch_s (q, v, clk, d, s);
   output q;
   reg q;
   input v, clk, d, s;

   table
      * ? ? ? : ? : x;
      ? ? ? 1 : ? : 1;
      ? 0 ? 0 : ? : -;
      ? 0 ? x : 1 : -;
      ? 1 1 0 : ? : 1;
      ? 1 1 x : ? : 1;
      ? 1 0 0 : ? : 0;
      ? x 1 0 : 1 : -;
      ? x 1 x : 1 : -;
      ? x 0 0 : 0 : -;
   endtable
endprimitive

primitive scl40_htc50_latch_sr_0 (q, v, clk, d, s, r);
     output q;
   reg q;
   input v, clk, d, s, r;

   table
      * ? ? ? ? : ? : x;
      ? ? ? ? 1 : ? : 0;
      ? ? ? 1 0 : ? : 1;
      ? 0 ? 0 0 : ? : -;
      ? 0 ? x 0 : 1 : -;
      ? 0 ? 0 x : 0 : -;
      ? 1 0 0 0 : ? : 0;
      ? 1 0 0 x : ? : 0;
      ? 1 1 x 0 : ? : 1;
      ? 1 1 0 0 : ? : 1;
      ? x 0 0 0 : 0 : -;
      ? x 0 0 x : 0 : -;
      ? x 1 0 0 : 1 : -;
      ? x 1 x 0 : 1 : -;
   endtable
endprimitive

primitive scl40_htc50_dff_err (q, clk, d);
   output q;
   reg q;
   input clk, d;

   table
      (0x) ? : ? : 0;
      (1x) ? : ? : 1;
   endtable
endprimitive

primitive scl40_htc50_dff (q, v, clk, d, xcr);
   output q;
   reg q;
   input v, clk, d, xcr;

   table
      *  ?   ? ? : ? : x;
      ? (x1) 0 0 : ? : 0;
      ? (x1) 1 0 : ? : 1;
      ? (x1) 0 1 : 0 : 0;
      ? (x1) 1 1 : 1 : 1;
      ? (x1) ? x : ? : -;
      ? (bx) 0 ? : 0 : -;
      ? (bx) 1 ? : 1 : -;
      ? (x0) b ? : ? : -;
      ? (x0) ? x : ? : -;
      ? (01) 0 ? : ? : 0;
      ? (01) 1 ? : ? : 1;
      ? (10) ? ? : ? : -;
      ?  b   * ? : ? : -;
      ?  ?   ? * : ? : -;
   endtable
endprimitive

primitive scl40_htc50_dff_r_err (q, clk, d, r);
   output q;
   reg q;
   input clk, d, r;

   table
       ?   0 (0x) : ? : -;
       ?   0 (x0) : ? : -;
      (0x) ?  0   : ? : 0;
      (0x) 0  x   : ? : 0;
      (1x) ?  0   : ? : 1;
      (1x) 0  x   : ? : 1;
      (10) ?  ?   : ? : -;
      (01) 0  0   : ? : 0;
      (01) 1  0   : ? : 1;
   endtable
endprimitive

primitive scl40_htc50_dff_r (q, v, clk, d, r, xcr);
   output q;
   reg q;
   input v, clk, d, r, xcr;

   table
      *  ?   ?  ?   ? : ? : x;
      ?  ?   ?  1   ? : ? : 0;
      ?  b   ? (1?) ? : 0 : -;
      ?  x   0 (1?) ? : 0 : -;
      ?  ?   ? (10) ? : ? : -;
      ?  ?   ? (x0) ? : ? : -;
      ?  ?   ? (0x) ? : 0 : -;
      ? (x1) 0  ?   0 : ? : 0;
      ? (x1) 1  0   0 : ? : 1;
      ? (x1) 0  ?   1 : 0 : 0;
      ? (x1) 1  0   1 : 1 : 1;
      ? (x1) ?  ?   x : ? : -;
      ? (bx) 0  ?   ? : 0 : -;
      ? (bx) 1  0   ? : 1 : -;
      ? (x0) 0  ?   ? : ? : -;
      ? (x0) 1  0   ? : ? : -;
      ? (x0) ?  0   x : ? : -;
      ? (01) 0  ?   ? : ? : 0;
      ? (01) 1  0   ? : ? : 1;
      ? (10) ?  ?   ? : ? : -;
      ?  b   *  ?   ? : ? : -;
      ?  ?   ?  ?   * : ? : -;
   endtable
endprimitive

primitive scl40_htc50_dff_s_err (q, clk, d, s);
   output q;
   reg q;
   input clk, d, s;

   table
       ?   1 (0x) : ? : -;
       ?   1 (x0) : ? : -;
      (0x) ?  0   : ? : 0;
      (0x) 1  x   : ? : 0;
      (1x) ?  0   : ? : 1;
      (1x) 1  x   : ? : 1;
   endtable
endprimitive

primitive scl40_htc50_dff_s (q, v, clk, d, s, xcr);
   output q;
   reg q;
   input v, clk, d, s, xcr;

   table
      *  ?   ?  ?   ? : ? : x;
      ?  ?   ?  1   ? : ? : 1;
      ?  b   ? (1?) ? : 1 : -;
      ?  x   1 (1?) ? : 1 : -;
      ?  ?   ? (10) ? : ? : -;
      ?  ?   ? (x0) ? : ? : -;
      ?  ?   ? (0x) ? : 1 : -;
      ? (x1) 0  0   0 : ? : 0;
      ? (x1) 1  ?   0 : ? : 1;
      ? (x1) 1  ?   1 : 1 : 1;
      ? (x1) 0  0   1 : 0 : 0;
      ? (x1) ?  ?   x : ? : -;
      ? (bx) 1  ?   ? : 1 : -;
      ? (bx) 0  0   ? : 0 : -;
      ? (x0) 1  ?   ? : ? : -;
      ? (x0) 0  0   ? : ? : -;
      ? (x0) ?  0   x : ? : -;
      ? (01) 1  ?   ? : ? : 1;
      ? (01) 0  0   ? : ? : 0;
      ? (10) ?  ?   ? : ? : -;
      ?  b   *  ?   ? : ? : -;
      ?  ?   ?  ?   * : ? : -;
   endtable
endprimitive

primitive scl40_htc50_dff_sr_err (q, clk, d, s, r);
   output q;
   reg q;
   input clk, d, s, r;

   table
       ?   1 (0x)  ?   : ? : -;
       ?   1 (x0)  ?   : ? : -;
       ?   0  ?   (0x) : ? : -;
       ?   0  ?   (x0) : ? : -;
      (0x) ?  0    0   : ? : 0;
      (0x) 1  x    0   : ? : 0;
      (0x) 0  0    x   : ? : 0;
      (1x) ?  0    0   : ? : 1;
      (1x) 1  x    0   : ? : 1;
      (1x) 0  0    x   : ? : 1;
   endtable
endprimitive

primitive scl40_htc50_dff_sr_0 (q, v, clk, d, s, r, xcr);
   output q;
   reg q;
   input v, clk, d, s, r, xcr;

   table
   //   v,  clk, d, s, r : q' : q;

      *  ?   ?   ?   ?   ? : ? : x;
      ?  ?   ?   ?   1   ? : ? : 0;
      ?  ?   ?   1   0   ? : ? : 1;
      ?  b   ? (1?)  0   ? : 1 : -;
      ?  x   1 (1?)  0   ? : 1 : -;
      ?  ?   ? (10)  0   ? : ? : -;
      ?  ?   ? (x0)  0   ? : ? : -;
      ?  ?   ? (0x)  0   ? : 1 : -;
      ?  b   ?  0   (1?) ? : 0 : -;
      ?  x   0  0   (1?) ? : 0 : -;
      ?  ?   ?  0   (10) ? : ? : -;
      ?  ?   ?  0   (x0) ? : ? : -;
      ?  ?   ?  0   (0x) ? : 0 : -;
      ? (x1) 0  0    ?   0 : ? : 0;
      ? (x1) 1  ?    0   0 : ? : 1;
      ? (x1) 0  0    ?   1 : 0 : 0;
      ? (x1) 1  ?    0   1 : 1 : 1;
      ? (x1) ?  ?    0   x : ? : -;
      ? (x1) ?  0    ?   x : ? : -;
      ? (1x) 0  0    ?   ? : 0 : -;
      ? (1x) 1  ?    0   ? : 1 : -;
      ? (x0) 0  0    ?   ? : ? : -;
      ? (x0) 1  ?    0   ? : ? : -;
      ? (x0) ?  0    0   x : ? : -;
      ? (0x) 0  0    ?   ? : 0 : -;
      ? (0x) 1  ?    0   ? : 1 : -;
      ? (01) 0  0    ?   ? : ? : 0;
      ? (01) 1  ?    0   ? : ? : 1;
      ? (10) ?  0    ?   ? : ? : -;
      ? (10) ?  ?    0   ? : ? : -;
      ?  b   *  0    ?   ? : ? : -;
      ?  b   *  ?    0   ? : ? : -;
      ?  ?   ?  ?    ?   * : ? : -;
   endtable
endprimitive

primitive scl40_htc50_dff_ret2 (q, v, clk, d, b2, lq, xcr);
	output q;
	reg q;
	input v, clk, d, b2, lq, xcr;
// Since this is not a Physical Verilog model, , the present 
// Verilog functionality does not assume the power supply to be shut off. 
// Therefore the output will be retain its last known state during sleep mode.


        table // v clk  d  b2   lq xcr
                 *  ?   ?  ?    ?   ? : ? : x;
           	 ?  1   ?  1    0   ? : 0 : 0; // b2 and ck high is ok if lq and prev data are the same
           	 ?  1   ?  1    1   ? : 1 : 1; // 
                 ?  0   ?  1    0   ? : ? : 0; // Restore state-0 from lq input
                 ?  0   ?  1    1   ? : ? : 1; // Restore state-1 from lq input
                 ?  0   ?  1    x   ? : ? : x; // Restore state-1 from lq input
        	 ?  ?   ?  0    *   ? : ? : -; // No change for any edge on lq and b2 is low
                               
                 ?  ?   ? (10)  ?   ? : ? : -; // No change for neg-edge on b2, no other pins change
                 ?  ?   ? (x0)  ?   ? : ? : -; // No change for neg-edge on b2, no other pins change
                 ?  ?   ? (?x)  ?   ? : ? : x; // OP X if b2 = X
                               
                 ? (x1) 0  0    ?   0 : ? : 0;
        	 ? (x1) 1  0    ?   0 : ? : 1;
        	 ? (x1) 0  0    ?   1 : 0 : 0;
        	 ? (x1) 1  0    ?   1 : 1 : 1;
//        	 ? (x1) ?  ?    ?   x : ? : -;
        	 ? (x1) 0  0    ?   x : ? : 0;
        	 ? (x1) 1  0    ?   x : ? : 1;
                               
        	 ? (bx) 0  0    ?   ? : 0 : -;
                 ? (bx) 1  0    ?   ? : 1 : -;
        	 ? (x0) b  0    ?   ? : ? : -;
        	 ? (x0) ?  0    ?   x : ? : -;
                               
        	 ? (01) 0  0    ?   ? : ? : 0;
        	 ? (01) 1  0    ?   ? : ? : 1;
        	 ? (10) ?  0    ?   ? : ? : -;
        	 ?  b   *  0    ?   ? : ? : -;
        	 ?  ?   ?  0    ?   * : ? : -;


	endtable

endprimitive // dff_ret2

primitive scl40_htc50_dff_r_ret2 (q, v, clk, d, r, b2, lq, xcr);
	output q;
	reg q;
	input v, clk, d, r, b2, lq, xcr;
// Since this is not a Physical Verilog model, , the present 
// Verilog functionality does not assume the power supply to be shut off. 
// Therefore the output will be retain its last known state during sleep mode.
   
	table // v clk  d  r   b2  lq xcr
                 *  ?   ?  ?   ?   ?   ? : ? : x;
	   	 ?  1   ?  ?   1   0   ? : 0 : 0; // b1 and ck high is ok if lq and prev data are the same
	   	 ?  1   ?  0   1   1   ? : 1 : 1; // 
	         ?  0   ?  ?   1   0   ? : ? : 0; // Restore state-0 from lq input
	         ?  0   ?  0   1   1   ? : ? : 1; // Restore state-1 from lq input
		 ?  ?   ?  0   0   *   ? : ? : -; // No change for any edge on lq and b2 is low
                 ?  b   ?  ?  (1?) 0   ? : 0 : -; // No change for neg-edge on b2, prev and lq are 0, clock 1 or 0
                 ?  b   ?  0  (1?) 1   ? : 1 : -; // No change for neg-edge on b2, prev and lq are 1, clock 1 or 0
                 ?  x   0  ?  (1?) 0   ? : 0 : -; // No change for neg-edge on b2, prev and lq are 0, D is 0
                 ?  x   1  0  (1?) 1   ? : 1 : -; // No change for neg-edge on b2, prev and lq are 1, D is 1
                 ?  ?   ?  ?  (10) ?   ? : ? : -; // No change for neg-edge on b2, no other pins change
                 ?  ?   ?  ?  (x0) ?   ? : ? : -; // No change for neg-edge on b2, no other pins change
                 ?  ?   ?  ?  (0x) 0   ? : 0 : x; // 
                 ?  ?   ?  0  (0x) ?   ? : 1 : x; //
                 ?  ?   ?  1   0   ?   ? : ? : 0;
                 ?  b   ? (1?) ?   ?   ? : 0 : -;
                 ?  x   0 (1?) ?   ?   ? : 0 : -;
                 ?  ?   ? (10) ?   ?   ? : ? : -;
                 ?  ?   ? (x0) ?   ?   ? : ? : -;
                 ?  ?   ? (0x) ?   ?   ? : 0 : -;
                 ? (x1) 0  ?   0   ?   0 : ? : 0;
                 ? (x1) 1  0   0   ?   0 : ? : 1;
                 ? (x1) 0  ?   0   ?   1 : 0 : 0;
                 ? (x1) 1  0   0   ?   1 : 1 : 1;
//                 ? (x1) ?  ?   0   ?   x : ? : -;
                 ? (x1) 0  ?   0   ?   x : ? : 0;
                 ? (x1) 1  0   0   ?   x : ? : 1;
                 ? (bx) 0  ?   0   ?   ? : 0 : -;
                 ? (bx) 1  0   0   ?   ? : 1 : -;
                 ? (x0) 0  ?   0   ?   ? : ? : -;
                 ? (x0) 1  0   0   ?   ? : ? : -;
                 ? (x0) ?  0   0   ?   x : ? : -;
                 ? (01) 0  ?   0   ?   ? : ? : 0;
                 ? (01) 1  0   0   ?   ? : ? : 1;
                 ? (10) ?  ?   0   ?   ? : ? : -;
                 ?  b   *  ?   0   ?   ? : ? : -;
                 ?  ?   ?  ?   0   ?   * : ? : -;
	endtable
endprimitive // dff_r_ret2

primitive scl40_htc50_dff_s_ret2 (q, v, clk, d, s, b2, lq, xcr);
	output q;
	reg q;
	input v, clk, d, s, b2, lq, xcr;
// Since this is not a Physical Verilog model, , the present 
// Verilog functionality does not assume the power supply to be shut off. 
// Therefore the output will be retain its last known state during sleep mode.
   
	table // v clk  d  s   b2  lq xcr
                 *  ?   ?  ?   ?   ?   ? : ? : x;
                 ? (x1) ?  0   1   0   ? : 0 : 0; // b1 and ck high is ok if lq and prev data are the same
                 ? (x1) ?  ?   1   1   ? : 1 : 1; // 
                 ?  0   ?  0   1   0   ? : ? : 0; // Restore state-0 from lq input
                 ?  0   ?  0   1   1   ? : ? : 1; // Restore state-1 from lq input
                 ?  ?   ?  0   0   *   ? : ? : -; // No change for any edge on lq and b2 is low
                 ?  b   ?  0  (1?) 0   ? : 0 : -; // No change for neg-edge on b2, prev and lq are 0, clock 1 or 0
                 ?  b   ?  ?  (1?) 1   ? : 1 : -; // No change for neg-edge on b2, prev and lq are 1, clock 1 or 0
                 ?  x   0  0  (1?) 0   ? : 0 : -; // No change for neg-edge on b2, prev and lq are 0, D is 0
                 ?  x   1  ?  (1?) 1   ? : 1 : -; // No change for neg-edge on b2, prev and lq are 1, D is 1
                 ?  ?   ?  ?  (10) ?   ? : ? : -; // No change for neg-edge on b2, no other pins change
                 ?  ?   ?  ?  (x0) ?   ? : ? : -; // No change for neg-edge on b2, no other pins change
                 ?  ?   ?  0  (0x) 0   ? : 0 : -; // No change for pos-edge on b2, prev and lq are 0
                 ?  ?   ?  ?  (0x) 1   ? : 1 : x; // No change for pos-edge on b2, prev and lq are 1
                 ?  ?   ?  1   0   ?   ? : ? : 1;
                 ?  b   ? (1?) ?   ?   ? : 1 : -;
                 ?  x   1 (1?) ?   ?   ? : 1 : -;
                 ?  ?   ? (10) ?   ?   ? : ? : -;
                 ?  ?   ? (x0) ?   ?   ? : ? : -;
                 ?  ?   ? (0x) ?   ?   ? : 1 : x;  
                 ? (x1) 0  0   0   ?   0 : ? : 0;
                 ? (x1) 1  ?   0   ?   0 : ? : 1;
                 ? (x1) 1  ?   0   ?   1 : 1 : 1;
                 ? (x1) 0  0   0   ?   1 : 0 : 0;
                 // ? (x1) ?  ?   0   ?   x : ? : -;
                 ? (x1) 1  ?   0   ?   x : ? : 1;
                 ? (x1) 0  0   0   ?   x : ? : 0;
                 ? (bx) 1  ?   0   ?   ? : 1 : -;
                 ? (bx) 0  0   0   ?   ? : 0 : -;
                 ? (x0) 1  ?   0   ?   ? : ? : -;
                 ? (x0) 0  0   0   ?   ? : ? : -;
                 ? (x0) ?  0   0   ?   x : ? : -;
                 ? (01) 1  b   0   ?   ? : ? : 1;
                 ? (01) 0  0   0   ?   ? : ? : 0;
                 ? (01) ?  x   ?   ?   ? : ? : x;  
                 ? (10) ?  ?   0   ?   ? : ? : -;
                 ?  b   *  ?   0   ?   ? : ? : -;
                 ?  ?   ?  ?   0   ?   * : ? : -;
	endtable
endprimitive // dff_s_ret2

`ifdef TETRAMAX

primitive scl40_htc50_dff_sr_ret (q, v, clk, d, s, r, xcr); // Added by Anil
   output q;
   reg q;
   input v, clk, d, s, r, xcr;
   table
 //   v,clk, d, s, r : q' : q;
      *  ?   ?   ?   ?   ? : ? : x;
      ?  ?   ?   ?   1   ? : ? : 0;
      ?  ?   ?   1   0   ? : ? : 1;
      ?  b   ? (1?)  0   ? : 1 : -;
      ?  x   1 (1?)  0   ? : 1 : -;
      ?  ?   ? (10)  0   ? : ? : -;
      ?  ?   ? (x0)  0   ? : ? : -;
      ?  ?   ? (0x)  0   ? : 1 : -;
      ?  ?   ?  x    0   ? : 1 : x; //added by Anil
      ?  b   ?  0   (1?) ? : 0 : -;
      ?  x   0  0   (1?) ? : 0 : -;
      ?  ?   ?  0   (10) ? : ? : -;
      ?  ?   ?  0   (x0) ? : ? : -;
      ?  ?   ?  0   (0x) ? : 0 : 0;
      ?  ?   ?  0    x   ? : 0 : x; //Added by Anil
      ? (x1) 0  0    ?   0 : ? : 0;
      ? (x1) 1  ?    0   0 : ? : 1;
      ? (x1) 0  0    ?   1 : 0 : 0;
      ? (x1) 1  ?    0   1 : 1 : 1;
      ? (x1) 1  0    0   x : ? : 1; // added by Anil
      ? (1x) 0  0    ?   ? : 0 : -;
      ? (1x) 1  ?    0   ? : 1 : -;
      ? (x0) 0  0    ?   ? : ? : -;
      ? (x0) 1  ?    0   ? : ? : -;
      ? (x0) ?  0    0   x : ? : -;
      ? (0x) 0  0    ?   ? : 0 : -;
      ? (0x) 1  ?    0   ? : 1 : -;
      ? (01) 0  0    ?   ? : ? : 0;
      ? (01) 1  1    0   ? : ? : 1;
      ? (01) 1  0    0   ? : ? : 1;
      ? (01) 1  x    0   ? : ? : x;
      ? (10) ?  0    ?   ? : ? : -;
      ? (10) ?  ?    0   ? : ? : -;
      ?  b   *  0    ?   ? : ? : -;
      ?  b   *  ?    0   ? : ? : -;
      ?  ?   ?  ?    ?   * : ? : -;
   endtable
endprimitive

`endif
